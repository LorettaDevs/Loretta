{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Loretta",
    "keywords": ""
  },
  "api/Loretta.CodeAnalysis.AnnotationExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.AnnotationExtensions.html",
    "title": "Class AnnotationExtensions | Loretta",
    "keywords": "Class AnnotationExtensions Extension methods for dealing with annotations. Inheritance Object AnnotationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public static class AnnotationExtensions Methods | Improve this Doc View Source WithAdditionalAnnotations<TNode>(TNode, IEnumerable<SyntaxAnnotation>) Creates a new node identical to this node with the specified annotations attached. Declaration public static TNode WithAdditionalAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations) where TNode : SyntaxNode Parameters Type Name Description TNode node Original node. IEnumerable < SyntaxAnnotation > annotations Annotations to be added to the new node. Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source WithAdditionalAnnotations<TNode>(TNode, SyntaxAnnotation[]) Creates a new node identical to this node with the specified annotations attached. Declaration public static TNode WithAdditionalAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations) where TNode : SyntaxNode Parameters Type Name Description TNode node Original node. SyntaxAnnotation [] annotations Annotations to be added to the new node. Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source WithoutAnnotations<TNode>(TNode, IEnumerable<SyntaxAnnotation>) Creates a new node identical to this node with the specified annotations removed. Declaration public static TNode WithoutAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations) where TNode : SyntaxNode Parameters Type Name Description TNode node Original node. IEnumerable < SyntaxAnnotation > annotations Annotations to be removed from the new node. Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source WithoutAnnotations<TNode>(TNode, SyntaxAnnotation[]) Creates a new node identical to this node with the specified annotations removed. Declaration public static TNode WithoutAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations) where TNode : SyntaxNode Parameters Type Name Description TNode node Original node. SyntaxAnnotation [] annotations Annotations to be removed from the new node. Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source WithoutAnnotations<TNode>(TNode, String) Creates a new node identical to this node with the annotations of the specified kind removed. Declaration public static TNode WithoutAnnotations<TNode>(this TNode node, string annotationKind) where TNode : SyntaxNode Parameters Type Name Description TNode node Original node. String annotationKind The kind of annotation to remove. Returns Type Description TNode Type Parameters Name Description TNode"
  },
  "api/Loretta.CodeAnalysis.ChildSyntaxList.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.ChildSyntaxList.Enumerator.html",
    "title": "Struct ChildSyntaxList.Enumerator | Loretta",
    "keywords": "Struct ChildSyntaxList.Enumerator Enumerates the elements of a ChildSyntaxList . Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly SyntaxNodeOrToken Current { get; } Property Value Type Description SyntaxNodeOrToken The element in the ChildSyntaxList at the current position of the enumerator. Methods | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the ChildSyntaxList . Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset()"
  },
  "api/Loretta.CodeAnalysis.ChildSyntaxList.html": {
    "href": "api/Loretta.CodeAnalysis.ChildSyntaxList.html",
    "title": "Struct ChildSyntaxList | Loretta",
    "keywords": "Struct ChildSyntaxList A list containing all children of a syntax node. Implements IEquatable < ChildSyntaxList > IReadOnlyList < SyntaxNodeOrToken > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct ChildSyntaxList Properties | Improve this Doc View Source Count Gets the number of children contained in the ChildSyntaxList . Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets the child at the specified index. Declaration public readonly SyntaxNodeOrToken this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the child to get. Property Value Type Description SyntaxNodeOrToken Exceptions Type Condition ArgumentOutOfRangeException index is less than 0.-or- index is equal to or greater than Count . Methods | Improve this Doc View Source Any() Checks whether this list contains any elements. Declaration public readonly bool Any() Returns Type Description Boolean | Improve this Doc View Source Equals(ChildSyntaxList) Determines whether the specified ChildSyntaxList structure is equal to the current instance. Declaration public readonly bool Equals(ChildSyntaxList other) Parameters Type Name Description ChildSyntaxList other The ChildSyntaxList structure to be compared with the current instance. Returns Type Description Boolean true if the specified ChildSyntaxList structure is equal to the current instance; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current instance. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The object to be compared with the current instance. Returns Type Description Boolean true if the specified object is a ChildSyntaxList structure and is equal to the current instance; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source First() Returns the first child in the list. Declaration public readonly SyntaxNodeOrToken First() Returns Type Description SyntaxNodeOrToken The first child in the list. Exceptions Type Condition InvalidOperationException The list is empty. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the ChildSyntaxList . Declaration public readonly ChildSyntaxList.Enumerator GetEnumerator() Returns Type Description ChildSyntaxList.Enumerator A ChildSyntaxList.Enumerator for the ChildSyntaxList . | Improve this Doc View Source GetHashCode() Returns the hash code for the current instance. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source Last() Returns the last child in the list. Declaration public readonly SyntaxNodeOrToken Last() Returns Type Description SyntaxNodeOrToken The last child in the list. Exceptions Type Condition InvalidOperationException The list is empty. | Improve this Doc View Source Reverse() Returns a list which contains all children of ChildSyntaxList in reversed order. Declaration public readonly ChildSyntaxList.Reversed Reverse() Returns Type Description ChildSyntaxList.Reversed ChildSyntaxList.Reversed which contains all children of ChildSyntaxList in reversed order Operators | Improve this Doc View Source Equality(ChildSyntaxList, ChildSyntaxList) Indicates whether two ChildSyntaxList structures are equal. Declaration public static bool operator ==(ChildSyntaxList list1, ChildSyntaxList list2) Parameters Type Name Description ChildSyntaxList list1 The ChildSyntaxList structure on the left side of the equality operator. ChildSyntaxList list2 The ChildSyntaxList structure on the right side of the equality operator. Returns Type Description Boolean true if list1 is equal to list2 ; otherwise, false. | Improve this Doc View Source Inequality(ChildSyntaxList, ChildSyntaxList) Indicates whether two ChildSyntaxList structures are unequal. Declaration public static bool operator !=(ChildSyntaxList list1, ChildSyntaxList list2) Parameters Type Name Description ChildSyntaxList list1 The ChildSyntaxList structure on the left side of the inequality operator. ChildSyntaxList list2 The ChildSyntaxList structure on the right side of the inequality operator. Returns Type Description Boolean true if list1 is equal to list2 ; otherwise, false. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEquatable<> IReadOnlyList<>"
  },
  "api/Loretta.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.ChildSyntaxList.Reversed.Enumerator.html",
    "title": "Struct ChildSyntaxList.Reversed.Enumerator | Loretta",
    "keywords": "Struct ChildSyntaxList.Reversed.Enumerator Enumerates the nodes in this reversed children list. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current The element the enumerator is at. Declaration public readonly SyntaxNodeOrToken Current { get; } Property Value Type Description SyntaxNodeOrToken Methods | Improve this Doc View Source MoveNext() Moves to the next element. Declaration public bool MoveNext() Returns Type Description Boolean Whether there was another element to move to. | Improve this Doc View Source Reset() Resets the enumerator to the last element. Declaration public void Reset()"
  },
  "api/Loretta.CodeAnalysis.ChildSyntaxList.Reversed.html": {
    "href": "api/Loretta.CodeAnalysis.ChildSyntaxList.Reversed.html",
    "title": "Struct ChildSyntaxList.Reversed | Loretta",
    "keywords": "Struct ChildSyntaxList.Reversed An enumerator that enumerates the list in reverse order. Implements System.Collections.IEnumerable < SyntaxNodeOrToken > IEquatable < ChildSyntaxList.Reversed > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct Reversed Methods | Improve this Doc View Source Equals(ChildSyntaxList.Reversed) Declaration public readonly bool Equals(ChildSyntaxList.Reversed other) Parameters Type Name Description ChildSyntaxList.Reversed other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetEnumerator() Returns the enumerator for this list. Declaration public readonly ChildSyntaxList.Reversed.Enumerator GetEnumerator() Returns Type Description ChildSyntaxList.Reversed.Enumerator | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(ChildSyntaxList.Reversed, ChildSyntaxList.Reversed) Checks whether two reversed lists are equal. Declaration public static bool operator ==(ChildSyntaxList.Reversed left, ChildSyntaxList.Reversed right) Parameters Type Name Description ChildSyntaxList.Reversed left ChildSyntaxList.Reversed right Returns Type Description Boolean | Improve this Doc View Source Inequality(ChildSyntaxList.Reversed, ChildSyntaxList.Reversed) Checks whether two reversed lists are not equal. Declaration public static bool operator !=(ChildSyntaxList.Reversed left, ChildSyntaxList.Reversed right) Parameters Type Name Description ChildSyntaxList.Reversed left ChildSyntaxList.Reversed right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.IEnumerable<> IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Diagnostic.html": {
    "href": "api/Loretta.CodeAnalysis.Diagnostic.html",
    "title": "Class Diagnostic | Loretta",
    "keywords": "Class Diagnostic Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred. Inheritance Object Diagnostic Implements IFormattable Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class Diagnostic : IEquatable<Diagnostic> Properties | Improve this Doc View Source AdditionalLocations Gets an array of additional locations related to the diagnostic. Typically these are the locations of other items referenced in the message. Declaration public abstract IReadOnlyList<Location> AdditionalLocations { get; } Property Value Type Description IReadOnlyList < Location > | Improve this Doc View Source DefaultSeverity Gets the default DiagnosticSeverity of the diagnostic's DiagnosticDescriptor . Declaration public virtual DiagnosticSeverity DefaultSeverity { get; } Property Value Type Description DiagnosticSeverity Remarks To get the effective severity of the diagnostic, use Severity . | Improve this Doc View Source Descriptor Gets the diagnostic descriptor, which provides a description about a Diagnostic . Declaration public abstract DiagnosticDescriptor Descriptor { get; } Property Value Type Description DiagnosticDescriptor | Improve this Doc View Source Id Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\". Declaration public abstract string Id { get; } Property Value Type Description String | Improve this Doc View Source IsSuppressed Returns true if the diagnostic has a source suppression, i.e. an attribute or a pragma suppression. Declaration public abstract bool IsSuppressed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWarningAsError Returns true if this is a warning treated as an error; otherwise false. Declaration public bool IsWarningAsError { get; } Property Value Type Description Boolean Remarks True implies DefaultSeverity = Warning and Severity = Error . | Improve this Doc View Source Location Gets the primary location of the diagnostic, or None if no primary location. Declaration public abstract Location Location { get; } Property Value Type Description Location | Improve this Doc View Source Properties Gets property bag for the diagnostic. it will return if there is no entry. This can be used to put diagnostic specific information you want to pass around. for example, to corresponding fixer. Declaration public virtual ImmutableDictionary<string, string> Properties { get; } Property Value Type Description ImmutableDictionary < String , String > | Improve this Doc View Source Severity Gets the effective DiagnosticSeverity of the diagnostic. Declaration public abstract DiagnosticSeverity Severity { get; } Property Value Type Description DiagnosticSeverity Remarks To get the default severity of diagnostic's DiagnosticDescriptor , use DefaultSeverity . To determine if this is a warning treated as an error, use IsWarningAsError . | Improve this Doc View Source WarningLevel Gets the warning level. This is 0 for diagnostics with severity Error , otherwise an integer greater than zero. Declaration public abstract int WarningLevel { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Create(DiagnosticDescriptor, Location, DiagnosticSeverity, Nullable<IEnumerable<Location>>, Nullable<ImmutableDictionary<String, String>>, Object[]) Creates a Diagnostic instance. Declaration public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, DiagnosticSeverity effectiveSeverity, IEnumerable<Location>? additionalLocations, ImmutableDictionary<string, string>? properties, params object[] messageArgs) Parameters Type Name Description DiagnosticDescriptor descriptor A DiagnosticDescriptor describing the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . DiagnosticSeverity effectiveSeverity Effective severity of the diagnostic. Nullable < IEnumerable < Location >> additionalLocations An optional set of additional locations related to the diagnostic. Typically, these are locations of other items referenced in the message. If null, AdditionalLocations will return an empty list. Nullable < ImmutableDictionary < String , String >> properties An optional set of name-value pairs by means of which the analyzer that creates the diagnostic can convey more detailed information to the fixer. If null, Properties will return . Object [] messageArgs Arguments to the message of the diagnostic. Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(DiagnosticDescriptor, Location, Nullable<IEnumerable<Location>>, Nullable<ImmutableDictionary<String, String>>, Object[]) Creates a Diagnostic instance. Declaration public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, IEnumerable<Location>? additionalLocations, ImmutableDictionary<string, string>? properties, params object[] messageArgs) Parameters Type Name Description DiagnosticDescriptor descriptor A DiagnosticDescriptor describing the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . Nullable < IEnumerable < Location >> additionalLocations An optional set of additional locations related to the diagnostic. Typically, these are locations of other items referenced in the message. If null, AdditionalLocations will return an empty list. Nullable < ImmutableDictionary < String , String >> properties An optional set of name-value pairs by means of which the analyzer that creates the diagnostic can convey more detailed information to the fixer. If null, Properties will return . Object [] messageArgs Arguments to the message of the diagnostic. Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(DiagnosticDescriptor, Location, Nullable<IEnumerable<Location>>, Object[]) Creates a Diagnostic instance. Declaration public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, IEnumerable<Location>? additionalLocations, params object[] messageArgs) Parameters Type Name Description DiagnosticDescriptor descriptor A DiagnosticDescriptor describing the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . Nullable < IEnumerable < Location >> additionalLocations An optional set of additional locations related to the diagnostic. Typically, these are locations of other items referenced in the message. If null, AdditionalLocations will return an empty list. Object [] messageArgs Arguments to the message of the diagnostic. Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(DiagnosticDescriptor, Location, Nullable<ImmutableDictionary<String, String>>, Object[]) Creates a Diagnostic instance. Declaration public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, ImmutableDictionary<string, string>? properties, params object[] messageArgs) Parameters Type Name Description DiagnosticDescriptor descriptor A DiagnosticDescriptor describing the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . Nullable < ImmutableDictionary < String , String >> properties An optional set of name-value pairs by means of which the analyzer that creates the diagnostic can convey more detailed information to the fixer. If null, Properties will return . Object [] messageArgs Arguments to the message of the diagnostic. Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(DiagnosticDescriptor, Location, Object[]) Creates a Diagnostic instance. Declaration public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, params object[] messageArgs) Parameters Type Name Description DiagnosticDescriptor descriptor A DiagnosticDescriptor describing the diagnostic Location location An optional primary location of the diagnostic. If null, Location will return None . Object [] messageArgs Arguments to the message of the diagnostic Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(String, String, LocalizableString, DiagnosticSeverity, DiagnosticSeverity, Boolean, Int32, LocalizableString, LocalizableString, String, Location, Nullable<IEnumerable<Location>>, Nullable<IEnumerable<String>>, Nullable<ImmutableDictionary<String, String>>) Creates a Diagnostic instance which is localizable. Declaration public static Diagnostic Create(string id, string category, LocalizableString message, DiagnosticSeverity severity, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, LocalizableString title = null, LocalizableString description = null, string helpLink = null, Location location = null, IEnumerable<Location>? additionalLocations = null, IEnumerable<string>? customTags = null, ImmutableDictionary<string, string>? properties = null) Parameters Type Name Description String id An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\". String category The category of the diagnostic. For diagnostics generated by the compiler, the category will be \"Compiler\". LocalizableString message The diagnostic message text. DiagnosticSeverity severity The diagnostic's effective severity. DiagnosticSeverity defaultSeverity The diagnostic's default severity. Boolean isEnabledByDefault True if the diagnostic is enabled by default Int32 warningLevel The warning level, between 1 and 4 if severity is Warning ; otherwise 0. LocalizableString title An optional short localizable title describing the diagnostic. LocalizableString description An optional longer localizable description for the diagnostic. String helpLink An optional hyperlink that provides more detailed information regarding the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . Nullable < IEnumerable < Location >> additionalLocations An optional set of additional locations related to the diagnostic. Typically, these are locations of other items referenced in the message. If null, AdditionalLocations will return an empty list. Nullable < IEnumerable < String >> customTags An optional set of custom tags for the diagnostic. See WellKnownDiagnosticTags for some well known tags. If null, Loretta.CodeAnalysis.Diagnostic.CustomTags will return an empty list. Nullable < ImmutableDictionary < String , String >> properties An optional set of name-value pairs by means of which the analyzer that creates the diagnostic can convey more detailed information to the fixer. If null, Properties will return . Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Create(String, String, LocalizableString, DiagnosticSeverity, DiagnosticSeverity, Boolean, Int32, Boolean, LocalizableString, LocalizableString, String, Location, Nullable<IEnumerable<Location>>, Nullable<IEnumerable<String>>, Nullable<ImmutableDictionary<String, String>>) Creates a Diagnostic instance which is localizable. Declaration public static Diagnostic Create(string id, string category, LocalizableString message, DiagnosticSeverity severity, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, bool isSuppressed, LocalizableString title = null, LocalizableString description = null, string helpLink = null, Location location = null, IEnumerable<Location>? additionalLocations = null, IEnumerable<string>? customTags = null, ImmutableDictionary<string, string>? properties = null) Parameters Type Name Description String id An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\". String category The category of the diagnostic. For diagnostics generated by the compiler, the category will be \"Compiler\". LocalizableString message The diagnostic message text. DiagnosticSeverity severity The diagnostic's effective severity. DiagnosticSeverity defaultSeverity The diagnostic's default severity. Boolean isEnabledByDefault True if the diagnostic is enabled by default Int32 warningLevel The warning level, between 1 and 4 if severity is Warning ; otherwise 0. Boolean isSuppressed Flag indicating whether the diagnostic is suppressed by a source suppression. LocalizableString title An optional short localizable title describing the diagnostic. LocalizableString description An optional longer localizable description for the diagnostic. String helpLink An optional hyperlink that provides more detailed information regarding the diagnostic. Location location An optional primary location of the diagnostic. If null, Location will return None . Nullable < IEnumerable < Location >> additionalLocations An optional set of additional locations related to the diagnostic. Typically, these are locations of other items referenced in the message. If null, AdditionalLocations will return an empty list. Nullable < IEnumerable < String >> customTags An optional set of custom tags for the diagnostic. See WellKnownDiagnosticTags for some well known tags. If null, Loretta.CodeAnalysis.Diagnostic.CustomTags will return an empty list. Nullable < ImmutableDictionary < String , String >> properties An optional set of name-value pairs by means of which the analyzer that creates the diagnostic can convey more detailed information to the fixer. If null, Properties will return . Returns Type Description Diagnostic The Diagnostic instance. | Improve this Doc View Source Equals(Diagnostic) Declaration public abstract bool Equals(Diagnostic obj) Parameters Type Name Description Diagnostic obj Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public abstract override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source GetMessage(Nullable<IFormatProvider>) Get the culture specific text of the message. Declaration public abstract string GetMessage(IFormatProvider? formatProvider = null) Parameters Type Name Description Nullable < IFormatProvider > formatProvider Returns Type Description String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Implements IFormattable"
  },
  "api/Loretta.CodeAnalysis.DiagnosticDescriptor.html": {
    "href": "api/Loretta.CodeAnalysis.DiagnosticDescriptor.html",
    "title": "Class DiagnosticDescriptor | Loretta",
    "keywords": "Class DiagnosticDescriptor Provides a description about a Diagnostic Inheritance Object DiagnosticDescriptor Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public sealed class DiagnosticDescriptor : IEquatable<DiagnosticDescriptor> Constructors | Improve this Doc View Source DiagnosticDescriptor(String, LocalizableString, LocalizableString, String, DiagnosticSeverity, Boolean, LocalizableString, String, String[]) Create a DiagnosticDescriptor, which provides description about a Diagnostic . Declaration public DiagnosticDescriptor(string id, LocalizableString title, LocalizableString messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, LocalizableString description = null, string helpLinkUri = null, params string[] customTags) Parameters Type Name Description String id A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\". LocalizableString title A short localizable title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\". LocalizableString messageFormat A localizable format message string, which can be passed as the first argument to Format(String, Object[]) when creating the diagnostic message with this descriptor. For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\" String category The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\". DiagnosticSeverity defaultSeverity Default severity of the diagnostic. Boolean isEnabledByDefault True if the diagnostic is enabled by default. LocalizableString description An optional longer localizable description of the diagnostic. String helpLinkUri An optional hyperlink that provides a more detailed description regarding the diagnostic. String [] customTags Optional custom tags for the diagnostic. See WellKnownDiagnosticTags for some well known tags. Remarks Example descriptor for rule CA1001: internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(RuleId, new LocalizableResourceString(nameof(FxCopRulesResources.TypesThatOwnDisposableFieldsShouldBeDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)), new LocalizableResourceString(nameof(FxCopRulesResources.TypeOwnsDisposableFieldButIsNotDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)), FxCopDiagnosticCategory.Design, DiagnosticSeverity.Warning, isEnabledByDefault: true, helpLinkUri: \"http://msdn.microsoft.com/library/ms182172.aspx\", customTags: DiagnosticCustomTags.Microsoft); | Improve this Doc View Source DiagnosticDescriptor(String, String, String, String, DiagnosticSeverity, Boolean, String, String, String[]) Create a DiagnosticDescriptor, which provides description about a Diagnostic . NOTE: For localizable title , description and/or messageFormat , use constructor overload DiagnosticDescriptor(String, LocalizableString, LocalizableString, String, DiagnosticSeverity, Boolean, LocalizableString, String, String[]) . Declaration public DiagnosticDescriptor(string id, string title, string messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, string description = null, string helpLinkUri = null, params string[] customTags) Parameters Type Name Description String id A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\". String title A short title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\". String messageFormat A format message string, which can be passed as the first argument to Format(String, Object[]) when creating the diagnostic message with this descriptor. For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\" String category The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\". DiagnosticSeverity defaultSeverity Default severity of the diagnostic. Boolean isEnabledByDefault True if the diagnostic is enabled by default. String description An optional longer description of the diagnostic. String helpLinkUri An optional hyperlink that provides a more detailed description regarding the diagnostic. String [] customTags Optional custom tags for the diagnostic. See WellKnownDiagnosticTags for some well known tags. Properties | Improve this Doc View Source Category The category of the diagnostic (like Design, Naming etc.) Declaration public string Category { get; } Property Value Type Description String | Improve this Doc View Source CustomTags Custom tags for the diagnostic. Declaration public IEnumerable<string> CustomTags { get; } Property Value Type Description IEnumerable < String > | Improve this Doc View Source DefaultSeverity The default severity of the diagnostic. Declaration public DiagnosticSeverity DefaultSeverity { get; } Property Value Type Description DiagnosticSeverity | Improve this Doc View Source Description An optional longer localizable description for the diagnostic. Declaration public LocalizableString Description { get; } Property Value Type Description LocalizableString | Improve this Doc View Source HelpLinkUri An optional hyperlink that provides more detailed information regarding the diagnostic. Declaration public string HelpLinkUri { get; } Property Value Type Description String | Improve this Doc View Source Id An unique identifier for the diagnostic. Declaration public string Id { get; } Property Value Type Description String | Improve this Doc View Source IsEnabledByDefault Returns true if the diagnostic is enabled by default. Declaration public bool IsEnabledByDefault { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageFormat A localizable format message string, which can be passed as the first argument to Format(String, Object[]) when creating the diagnostic message with this descriptor. Declaration public LocalizableString MessageFormat { get; } Property Value Type Description LocalizableString | Improve this Doc View Source Title A short localizable title describing the diagnostic. Declaration public LocalizableString Title { get; } Property Value Type Description LocalizableString Methods | Improve this Doc View Source Equals(DiagnosticDescriptor) Declaration public bool Equals(DiagnosticDescriptor other) Parameters Type Name Description DiagnosticDescriptor other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api/Loretta.CodeAnalysis.DiagnosticFormatter.html": {
    "href": "api/Loretta.CodeAnalysis.DiagnosticFormatter.html",
    "title": "Class DiagnosticFormatter | Loretta",
    "keywords": "Class DiagnosticFormatter Formats Diagnostic messages. Inheritance Object DiagnosticFormatter LuaDiagnosticFormatter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public class DiagnosticFormatter Methods | Improve this Doc View Source Format(Diagnostic, Nullable<IFormatProvider>) Formats the Diagnostic message using the optional . Declaration public virtual string Format(Diagnostic diagnostic, IFormatProvider? formatter = null) Parameters Type Name Description Diagnostic diagnostic The diagnostic. Nullable < IFormatProvider > formatter The formatter; or null to use the default formatter. Returns Type Description String The formatted message."
  },
  "api/Loretta.CodeAnalysis.DiagnosticSeverity.html": {
    "href": "api/Loretta.CodeAnalysis.DiagnosticSeverity.html",
    "title": "Enum DiagnosticSeverity | Loretta",
    "keywords": "Enum DiagnosticSeverity Describes how severe a diagnostic is. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum DiagnosticSeverity Fields Name Description Error Something not allowed by the rules of the language or other authority. Hidden Something that is an issue, as determined by some authority, but is not surfaced through normal means. There may be different mechanisms that act on these issues. Info Information that does not indicate a problem (i.e. not prescriptive). Warning Something suspicious but allowed."
  },
  "api/Loretta.CodeAnalysis.DocumentationMode.html": {
    "href": "api/Loretta.CodeAnalysis.DocumentationMode.html",
    "title": "Enum DocumentationMode | Loretta",
    "keywords": "Enum DocumentationMode Specifies the different documentation comment processing modes. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum DocumentationMode : byte Remarks Order matters: least processing to most processing. Fields Name Description Diagnose Parses documentation comments as structured trivia and report diagnostics. None Treats documentation comments as regular comments. Parse Parses documentation comments as structured trivia, but do not report any diagnostics."
  },
  "api/Loretta.CodeAnalysis.FileLinePositionSpan.html": {
    "href": "api/Loretta.CodeAnalysis.FileLinePositionSpan.html",
    "title": "Struct FileLinePositionSpan | Loretta",
    "keywords": "Struct FileLinePositionSpan Represents a span of text in a source code file in terms of file name, line number, and offset within line. However, the file is actually whatever was passed in when asked to parse; there may not really be a file. Implements IEquatable < FileLinePositionSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct FileLinePositionSpan Constructors | Improve this Doc View Source FileLinePositionSpan(String, LinePosition, LinePosition) Initializes the FileLinePositionSpan instance. Declaration public FileLinePositionSpan(string path, LinePosition start, LinePosition end) Parameters Type Name Description String path The file identifier - typically a relative or absolute path. LinePosition start The start line position. LinePosition end The end line position. | Improve this Doc View Source FileLinePositionSpan(String, LinePositionSpan) Initializes the FileLinePositionSpan instance. Declaration public FileLinePositionSpan(string path, LinePositionSpan span) Parameters Type Name Description String path The file identifier - typically a relative or absolute path. LinePositionSpan span The span. Properties | Improve this Doc View Source EndLinePosition Gets the LinePosition of the end of the span. Declaration public readonly LinePosition EndLinePosition { get; } Property Value Type Description LinePosition | Improve this Doc View Source HasMappedPath True if the Path is a mapped path. Declaration public readonly bool HasMappedPath { get; } Property Value Type Description Boolean Remarks A mapped path is a path specified in source via #line (C#) or #ExternalSource (VB) directives. | Improve this Doc View Source IsValid Returns true if the span represents a valid location. Declaration public readonly bool IsValid { get; } Property Value Type Description Boolean | Improve this Doc View Source Path Path, or null if the span represents an invalid value. Declaration public readonly string Path { get; } Property Value Type Description String Remarks Path may be Empty if not available. | Improve this Doc View Source Span Gets the span. Declaration public readonly LinePositionSpan Span { get; } Property Value Type Description LinePositionSpan | Improve this Doc View Source StartLinePosition Gets the LinePosition of the start of the span. Declaration public readonly LinePosition StartLinePosition { get; } Property Value Type Description LinePosition Methods | Improve this Doc View Source Equals(FileLinePositionSpan) Determines if two FileLinePositionSpan objects are equal. Declaration public readonly bool Equals(FileLinePositionSpan other) Parameters Type Name Description FileLinePositionSpan other Returns Type Description Boolean Remarks The path is treated as an opaque string, i.e. a case-sensitive comparison is used. | Improve this Doc View Source Equals(Object) Determines if two FileLinePositionSpan objects are equal. Declaration public override readonly bool Equals(object other) Parameters Type Name Description Object other Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for FileLinePositionSpan. Declaration public override readonly int GetHashCode() Returns Type Description Int32 The hash code. Overrides ValueType.GetHashCode() Remarks The path is treated as an opaque string, i.e. a case-sensitive hash is calculated. | Improve this Doc View Source ToString() Returns a String that represents FileLinePositionSpan. Declaration public override readonly string ToString() Returns Type Description String The string representation of FileLinePositionSpan. Overrides ValueType.ToString() Examples Path: (0,0)-(5,6) Operators | Improve this Doc View Source Equality(FileLinePositionSpan, FileLinePositionSpan) Checks whether two spans are equal. Declaration public static bool operator ==(FileLinePositionSpan left, FileLinePositionSpan right) Parameters Type Name Description FileLinePositionSpan left FileLinePositionSpan right Returns Type Description Boolean | Improve this Doc View Source Inequality(FileLinePositionSpan, FileLinePositionSpan) Checks whether two spans are not equal. Declaration public static bool operator !=(FileLinePositionSpan left, FileLinePositionSpan right) Parameters Type Name Description FileLinePositionSpan left FileLinePositionSpan right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.html": {
    "href": "api/Loretta.CodeAnalysis.html",
    "title": "Namespace Loretta.CodeAnalysis | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis Classes AnnotationExtensions Extension methods for dealing with annotations. Diagnostic Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred. DiagnosticDescriptor Provides a description about a Diagnostic DiagnosticFormatter Formats Diagnostic messages. LanguageNames A class that provides constants for common language names. LocalizableResourceString A localizable resource string that may possibly be formatted differently depending on culture. LocalizableString A string that may possibly be formatted differently depending on culture. NOTE: Types implementing LocalizableString must be serializable. Location A program location in source code. LuaExtensions Extension methods for lua specific data. ParseOptions Represents parse options common to C# and VB. SyntaxAnnotation A SyntaxAnnotation is used to annotate syntax elements with additional information. Since syntax elements are immutable, annotating them requires creating new instances of them with the annotations attached. SyntaxNode Represents a non-terminal node in the syntax tree. SyntaxNodeExtensions Extension methods for SyntaxNode . SyntaxReference A reference to a syntax node. SyntaxTree The parsed representation of a source document. SyntaxWalker Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia. The walker will perform a depth first walk of the tree. WellKnownDiagnosticTags A class with common diagnostic tags. Structs ChildSyntaxList A list containing all children of a syntax node. ChildSyntaxList.Enumerator Enumerates the elements of a ChildSyntaxList . ChildSyntaxList.Reversed An enumerator that enumerates the list in reverse order. ChildSyntaxList.Reversed.Enumerator Enumerates the nodes in this reversed children list. FileLinePositionSpan Represents a span of text in a source code file in terms of file name, line number, and offset within line. However, the file is actually whatever was passed in when asked to parse; there may not really be a file. SeparatedSyntaxList<TNode> Represents a list of nodes separated by one token. May have a trailing node. SeparatedSyntaxList<TNode>.Enumerator The enumerator for SeparatedSyntaxList<TNode> . SyntaxList<TNode> A list of SyntaxNode . SyntaxList<TNode>.Enumerator The enumerator for SyntaxList<TNode> . SyntaxNodeOrToken A wrapper for either a syntax node ( SyntaxNode ) or a syntax token ( SyntaxToken ). SyntaxNodeOrTokenList A list of SyntaxNodeOrToken structures. SyntaxNodeOrTokenList.Enumerator Enumerator for lists of SyntaxNodeOrToken structs. SyntaxToken Represents a token in the syntax tree. SyntaxTokenList Represents a read-only list of SyntaxToken . SyntaxTokenList.Enumerator A structure for enumerating a SyntaxTokenList SyntaxTokenList.Reversed Reversed enumerable. SyntaxTokenList.Reversed.Enumerator The enumerator for this reversed list. SyntaxTrivia Represents a trivia in the syntax tree. SyntaxTriviaList Represents a read-only list of SyntaxTrivia . SyntaxTriviaList.Enumerator The enumerator for this trivia list. SyntaxTriviaList.Reversed Reversed enumerable. SyntaxTriviaList.Reversed.Enumerator The enumerator for reversed trivia lists. Interfaces ICompilationUnitSyntax Interface implemented by any node that is the root 'CompilationUnit' of a SyntaxTree . i.e. any node returned by GetRoot(CancellationToken) where HasCompilationUnitRoot is true will implement this interface. This interface provides a common way to both easily find the root of a SyntaxTree given any SyntaxNode , as well as a common way for handling the special EndOfFileToken that is needed to store all final trivia in a SourceText that is not owned by any other SyntaxToken . IStructuredTriviaSyntax Represents the root node of a structured trivia tree (for example, a preprocessor directive or a documentation comment). From this root node you can traverse back up to the containing trivia in the outer tree that contains it. Enums DiagnosticSeverity Describes how severe a diagnostic is. DocumentationMode Specifies the different documentation comment processing modes. LocationKind Specifies the kind of location (source vs. metadata). ObjectDisplayOptions Specifies the options for how generics are displayed in the description of a symbol. SyntaxRemoveOptions The option flags for the RemoveNode(s) methods. SyntaxWalkerDepth Syntax the SyntaxWalker should descend into."
  },
  "api/Loretta.CodeAnalysis.ICompilationUnitSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.ICompilationUnitSyntax.html",
    "title": "Interface ICompilationUnitSyntax | Loretta",
    "keywords": "Interface ICompilationUnitSyntax Interface implemented by any node that is the root 'CompilationUnit' of a SyntaxTree . i.e. any node returned by GetRoot(CancellationToken) where HasCompilationUnitRoot is true will implement this interface. This interface provides a common way to both easily find the root of a SyntaxTree given any SyntaxNode , as well as a common way for handling the special EndOfFileToken that is needed to store all final trivia in a SourceText that is not owned by any other SyntaxToken . Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public interface ICompilationUnitSyntax Properties | Improve this Doc View Source EndOfFileToken Represents the end of the source file. This SyntaxToken may have SyntaxTrivia (whitespace, comments, directives) attached to it. Declaration SyntaxToken EndOfFileToken { get; } Property Value Type Description SyntaxToken"
  },
  "api/Loretta.CodeAnalysis.IStructuredTriviaSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.IStructuredTriviaSyntax.html",
    "title": "Interface IStructuredTriviaSyntax | Loretta",
    "keywords": "Interface IStructuredTriviaSyntax Represents the root node of a structured trivia tree (for example, a preprocessor directive or a documentation comment). From this root node you can traverse back up to the containing trivia in the outer tree that contains it. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public interface IStructuredTriviaSyntax Properties | Improve this Doc View Source ParentTrivia Returns the parent trivia syntax for this structured trivia syntax. Declaration SyntaxTrivia ParentTrivia { get; } Property Value Type Description SyntaxTrivia The parent trivia syntax for this structured trivia syntax."
  },
  "api/Loretta.CodeAnalysis.LanguageNames.html": {
    "href": "api/Loretta.CodeAnalysis.LanguageNames.html",
    "title": "Class LanguageNames | Loretta",
    "keywords": "Class LanguageNames A class that provides constants for common language names. Inheritance Object LanguageNames Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public static class LanguageNames Fields | Improve this Doc View Source Lua The common name used for the Lua language. Declaration public const string Lua = \"Lua\" Field Value Type Description String"
  },
  "api/Loretta.CodeAnalysis.LocalizableResourceString.html": {
    "href": "api/Loretta.CodeAnalysis.LocalizableResourceString.html",
    "title": "Class LocalizableResourceString | Loretta",
    "keywords": "Class LocalizableResourceString A localizable resource string that may possibly be formatted differently depending on culture. Inheritance Object LocalizableString LocalizableResourceString Implements IEquatable < LocalizableString > IObjectWritable Inherited Members LocalizableString.OnException LocalizableString.ToString(Nullable<IFormatProvider>) LocalizableString.ToString() LocalizableString.GetHashCode() LocalizableString.Equals(Object) LocalizableString.Equals(LocalizableString) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public sealed class LocalizableResourceString : LocalizableString Constructors | Improve this Doc View Source LocalizableResourceString(String, ResourceManager, Type) Creates a localizable resource string with no formatting arguments. Declaration public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource) Parameters Type Name Description String nameOfLocalizableResource nameof the resource that needs to be localized. ResourceManager resourceManager ResourceManager for the calling assembly. Type resourceSource Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed. | Improve this Doc View Source LocalizableResourceString(String, ResourceManager, Type, String[]) Creates a localizable resource string that may possibly be formatted differently depending on culture. Declaration public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource, params string[] formatArguments) Parameters Type Name Description String nameOfLocalizableResource nameof the resource that needs to be localized. ResourceManager resourceManager ResourceManager for the calling assembly. Type resourceSource Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed. String [] formatArguments Optional arguments for formatting the localizable resource string. Methods | Improve this Doc View Source AreEqual(Object) Provides the implementation of Equals. Equals will provide a default value if this method throws an exception. Declaration protected override bool AreEqual(object other) Parameters Type Name Description Object other Returns Type Description Boolean Overrides LocalizableString.AreEqual(Object) | Improve this Doc View Source GetHash() Provides the implementation of GetHashCode. GetHashCode will provide a default value if this method throws an exception. Declaration protected override int GetHash() Returns Type Description Int32 Overrides LocalizableString.GetHash() | Improve this Doc View Source GetText(Nullable<IFormatProvider>) Gets the text for the localizable string with the provided format provider. Declaration protected override string GetText(IFormatProvider? formatProvider) Parameters Type Name Description Nullable < IFormatProvider > formatProvider Returns Type Description String Overrides LocalizableString.GetText(Nullable<IFormatProvider>) Implements IEquatable<> IObjectWritable"
  },
  "api/Loretta.CodeAnalysis.LocalizableString.html": {
    "href": "api/Loretta.CodeAnalysis.LocalizableString.html",
    "title": "Class LocalizableString | Loretta",
    "keywords": "Class LocalizableString A string that may possibly be formatted differently depending on culture. NOTE: Types implementing LocalizableString must be serializable. Inheritance Object LocalizableString LocalizableResourceString Implements IEquatable < LocalizableString > Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class LocalizableString : IFormattable Methods | Improve this Doc View Source AreEqual(Object) Provides the implementation of Equals. Equals will provide a default value if this method throws an exception. Declaration protected abstract bool AreEqual(object other) Parameters Type Name Description Object other Returns Type Description Boolean | Improve this Doc View Source Equals(LocalizableString) Declaration public bool Equals(LocalizableString other) Parameters Type Name Description LocalizableString other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public sealed override bool Equals(object other) Parameters Type Name Description Object other Returns Type Description Boolean | Improve this Doc View Source GetHash() Provides the implementation of GetHashCode. GetHashCode will provide a default value if this method throws an exception. Declaration protected abstract int GetHash() Returns Type Description Int32 | Improve this Doc View Source GetHashCode() Declaration public sealed override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source GetText(Nullable<IFormatProvider>) Formats the value of the current instance using the optionally specified format. Provides the implementation of ToString. ToString will provide a default value if this method throws an exception. Declaration protected abstract string GetText(IFormatProvider? formatProvider) Parameters Type Name Description Nullable < IFormatProvider > formatProvider Returns Type Description String | Improve this Doc View Source ToString() Declaration public sealed override string ToString() Returns Type Description String | Improve this Doc View Source ToString(Nullable<IFormatProvider>) Formats the value of the current instance using the optionally specified format. Declaration public string ToString(IFormatProvider? formatProvider) Parameters Type Name Description Nullable < IFormatProvider > formatProvider Returns Type Description String Events | Improve this Doc View Source OnException Fired when an exception is raised by any of the public methods of LocalizableString . If the exception handler itself throws an exception, that exception is ignored. Declaration public event EventHandler<Exception>? OnException Event Type Type Description Nullable < EventHandler < Exception >> Operators | Improve this Doc View Source Explicit(LocalizableString to String) Converts a LocalizableString to a String with the default UI culture. Declaration public static explicit operator string (LocalizableString localizableResource) Parameters Type Name Description LocalizableString localizableResource Returns Type Description String | Improve this Doc View Source Implicit(String to LocalizableString) Converts a String to a LocalizableString . Declaration public static implicit operator LocalizableString(string fixedResource) Parameters Type Name Description String fixedResource Returns Type Description LocalizableString Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Location.html": {
    "href": "api/Loretta.CodeAnalysis.Location.html",
    "title": "Class Location | Loretta",
    "keywords": "Class Location A program location in source code. Inheritance Object Location Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class Location Properties | Improve this Doc View Source IsInSource Returns true if the location represents a specific location in a source code file. Declaration public bool IsInSource { get; } Property Value Type Description Boolean | Improve this Doc View Source Kind Location kind (None/SourceFile/MetadataFile). Declaration public abstract LocationKind Kind { get; } Property Value Type Description LocationKind | Improve this Doc View Source None A location of kind LocationKind.None. Declaration public static Location None { get; } Property Value Type Description Location | Improve this Doc View Source SourceSpan The location within the syntax tree that this location is associated with. Declaration public virtual TextSpan SourceSpan { get; } Property Value Type Description TextSpan Remarks If IsInSource returns False this method returns an empty TextSpan which starts at position 0. | Improve this Doc View Source SourceTree The syntax tree this location is located in or null if not in a syntax tree. Declaration public virtual SyntaxTree SourceTree { get; } Property Value Type Description SyntaxTree Methods | Improve this Doc View Source Create(SyntaxTree, TextSpan) Creates an instance of a Location for a span in a SyntaxTree . Declaration public static Location Create(SyntaxTree syntaxTree, TextSpan textSpan) Parameters Type Name Description SyntaxTree syntaxTree TextSpan textSpan Returns Type Description Location | Improve this Doc View Source Create(String, TextSpan, LinePositionSpan) Creates an instance of a Location for a span in a file. Declaration public static Location Create(string filePath, TextSpan textSpan, LinePositionSpan lineSpan) Parameters Type Name Description String filePath TextSpan textSpan LinePositionSpan lineSpan Returns Type Description Location | Improve this Doc View Source Equals(Object) Declaration public abstract override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetDebuggerDisplay() Returns the display string for the debugger. Declaration protected virtual string GetDebuggerDisplay() Returns Type Description String | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source GetLineSpan() Gets the location in terms of path, line and column. Declaration public virtual FileLinePositionSpan GetLineSpan() Returns Type Description FileLinePositionSpan FileLinePositionSpan that contains path, line and column information. Returns an invalid span (see IsValid ) if the information is not available. The values are not affected by line mapping directives (#line in C# or #ExternalSource in VB). | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(Location, Location) Checks whether two locations are equal. Declaration public static bool operator ==(Location left, Location right) Parameters Type Name Description Location left Location right Returns Type Description Boolean | Improve this Doc View Source Inequality(Location, Location) Checks whether two locations are not equal. Declaration public static bool operator !=(Location left, Location right) Parameters Type Name Description Location left Location right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.LocationKind.html": {
    "href": "api/Loretta.CodeAnalysis.LocationKind.html",
    "title": "Enum LocationKind | Loretta",
    "keywords": "Enum LocationKind Specifies the kind of location (source vs. metadata). Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum LocationKind : byte Fields Name Description ExternalFile The location in some external file. MetadataFile The location represents a metadata file. None Unspecified location. SourceFile The location represents a position in a source file."
  },
  "api/Loretta.CodeAnalysis.Lua.ContinueType.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.ContinueType.html",
    "title": "Enum ContinueType | Loretta",
    "keywords": "Enum ContinueType The type of continue the lua flavor being parsed has. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public enum ContinueType Fields Name Description ContextualKeyword Continue is a contextual keyword (is only a keyword when used as a statement). Keyword Continue is a keyword. None No continue."
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.ConstantFoldingOptions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.ConstantFoldingOptions.html",
    "title": "Class ConstantFoldingOptions | Loretta",
    "keywords": "Class ConstantFoldingOptions Settings to use when constant folding. Inheritance Object ConstantFoldingOptions Implements IEquatable < ConstantFoldingOptions > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public class ConstantFoldingOptions : IEquatable<ConstantFoldingOptions> Constructors | Improve this Doc View Source ConstantFoldingOptions(Boolean) Settings to use when constant folding. Declaration public ConstantFoldingOptions(bool ExtractNumbersFromStrings) Parameters Type Name Description Boolean ExtractNumbersFromStrings Fields | Improve this Doc View Source All The preset with everything set to true. Declaration public static readonly ConstantFoldingOptions All Field Value Type Description ConstantFoldingOptions | Improve this Doc View Source Default The default, most conservative, preset. Declaration public static readonly ConstantFoldingOptions Default Field Value Type Description ConstantFoldingOptions Properties | Improve this Doc View Source ExtractNumbersFromStrings Declaration public bool ExtractNumbersFromStrings { get; set; } Property Value Type Description Boolean Implements System.IEquatable<T>"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.html",
    "title": "Namespace Loretta.CodeAnalysis.Lua.Experimental | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Lua.Experimental Classes ConstantFoldingOptions Settings to use when constant folding. LuaExtensions The extension methods for SyntaxExtensions Experimental code exposed through extension methods."
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.LuaExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.LuaExtensions.html",
    "title": "Class LuaExtensions | Loretta",
    "keywords": "Class LuaExtensions The extension methods for Inheritance Object LuaExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public static class LuaExtensions Methods | Improve this Doc View Source ConstantFold(SyntaxNode, ConstantFoldingOptions) Runs constant folding on the tree rooted by the provided node. Declaration public static SyntaxNode ConstantFold(this SyntaxNode node, ConstantFoldingOptions options) Parameters Type Name Description SyntaxNode node ConstantFoldingOptions options Options to use when constant folding. Returns Type Description SyntaxNode | Improve this Doc View Source Minify(SyntaxTree) Minifies the provided tree using the provided naming strategy. Declaration public static SyntaxTree Minify(this SyntaxTree tree) Parameters Type Name Description SyntaxTree tree Returns Type Description SyntaxTree The tree with the new minified root. | Improve this Doc View Source Minify(SyntaxTree, NamingStrategy) Minifies the provided tree using the provided naming strategy. Declaration public static SyntaxTree Minify(this SyntaxTree tree, NamingStrategy namingStrategy) Parameters Type Name Description SyntaxTree tree NamingStrategy namingStrategy Returns Type Description SyntaxTree The tree with the new minified root. | Improve this Doc View Source Minify(SyntaxTree, NamingStrategy, ISlotAllocator) Minifies the provided tree using the provided naming strategy. Declaration public static SyntaxTree Minify(this SyntaxTree tree, NamingStrategy namingStrategy, ISlotAllocator slotAllocator) Parameters Type Name Description SyntaxTree tree The tree to minify. NamingStrategy namingStrategy The naming strategy to use. See NamingStrategies for common ones. ISlotAllocator slotAllocator The slot allocator to use. There are two builtin ones: SequentialSlotAllocator - fast but doesn't reuse variable names. SortedSlotAllocator - reuses variable names as much as possible. Returns Type Description SyntaxTree The tree with the new minified root."
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.html",
    "title": "Namespace Loretta.CodeAnalysis.Lua.Experimental.Minifying | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Lua.Experimental.Minifying Classes MinifyingUtils A class with helper methods for minifying. NamingStrategies The default naming strategies. SequentialSlotAllocator A sequential slot allocator. Never returns previously used slots and is the fastest one. SortedSlotAllocator The sorted slot allocator. Will always use the lowest free slot. Interfaces ISlotAllocator The slot allocator to use for renaming. Delegates NamingStrategy The naming strategy to use to convert a slot into a variable name. Uses the provided scope to check if the variable name is not being used already."
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.ISlotAllocator.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.ISlotAllocator.html",
    "title": "Interface ISlotAllocator | Loretta",
    "keywords": "Interface ISlotAllocator The slot allocator to use for renaming. Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public interface ISlotAllocator Methods | Improve this Doc View Source AllocateSlot() Allocates a slot for the provided variable. Declaration int AllocateSlot() Returns Type Description Int32 The slot that was allocated to the variable. | Improve this Doc View Source ReleaseSlot(Int32) Releases a slot for usage by other variables. Declaration void ReleaseSlot(int slot) Parameters Type Name Description Int32 slot The slot the variable is located in."
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.MinifyingUtils.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.MinifyingUtils.html",
    "title": "Class MinifyingUtils | Loretta",
    "keywords": "Class MinifyingUtils A class with helper methods for minifying. Inheritance Object MinifyingUtils Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public static class MinifyingUtils Methods | Improve this Doc View Source CanRename(IVariable) Returns whether this is a variable we are able to rename or not. Declaration public static bool CanRename(IVariable variable) Parameters Type Name Description IVariable variable Returns Type Description Boolean | Improve this Doc View Source GetUnavailableNames(IEnumerable<IScope>) Returns the list of variables names that are not avaiable in the provided scopes. Declaration public static IImmutableSet<string> GetUnavailableNames(IEnumerable<IScope> scopes) Parameters Type Name Description IEnumerable < IScope > scopes Returns Type Description IImmutableSet < String > | Improve this Doc View Source GetUnavailableNames(IScope) Returns the list of variables names that are not avaiable in the provided scope. Declaration public static IImmutableSet<string> GetUnavailableNames(IScope scope) Parameters Type Name Description IScope scope Returns Type Description IImmutableSet < String >"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.NamingStrategies.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.NamingStrategies.html",
    "title": "Class NamingStrategies | Loretta",
    "keywords": "Class NamingStrategies The default naming strategies. Inheritance Object NamingStrategies Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public static class NamingStrategies Methods | Improve this Doc View Source Alphabetical(Int32, IEnumerable<IScope>) The alphabet naming strategy. This is similar to Sequential(Char, ImmutableArray<String>) with: prefix as _ and alphabet as abcdefghijklmnopqrstuvwxyz . It is more optimized than Sequential(Char, ImmutableArray<String>) so use this instead of it whenever possible. Declaration public static string Alphabetical(int slot, IEnumerable<IScope> scopes) Parameters Type Name Description Int32 slot IEnumerable < IScope > scopes Returns Type Description String | Improve this Doc View Source Numerical(Int32, IEnumerable<IScope>) The alphabet naming strategy. This is similar to Sequential(Char, ImmutableArray<String>) with: prefix as _ and alphabet as 0123456789 . It is more optimized than Sequential(Char, ImmutableArray<String>) so use this instead of it whenever possible. Declaration public static string Numerical(int slot, IEnumerable<IScope> scopes) Parameters Type Name Description Int32 slot IEnumerable < IScope > scopes Returns Type Description String | Improve this Doc View Source Sequential(Char, ImmutableArray<String>) The sequential naming strategy factory method. It'll create a NamingStrategy delegate using the provided prefix and alphabet . Declaration public static NamingStrategy Sequential(char prefix, ImmutableArray<string> alphabet) Parameters Type Name Description Char prefix The prefix to use when a variable of the same name is found. ImmutableArray < String > alphabet The alphabet to use. Each character will be a single item. Returns Type Description NamingStrategy Remarks To provide an example of how this strategy works, let's assume the following: prefix is '_' alphabet is \"a\", \"b\" and \"c\" The provided IScope has two variables in scope named 'a' and 'b'. And these are some of its returns: Slot 0: _a (as a is already in scope) Slot 1: _b (as b is already in scope) Slot 2: c (as there is no c already in scope) Slot 3: aa Slot 13: aaa Slot 40: aaaa | Improve this Doc View Source ZeroWidth(Int32, IEnumerable<IScope>) The non-printable characters naming strategy. ONLY WORKS WHEN TARGETTING LUAJIT. This works like Sequential(Char, ImmutableArray<String>) . With prefix as _ and alphabet as zero width unicode characters. It is more optimized than Sequential(Char, ImmutableArray<String>) so use this instead of it whenever possible. Declaration public static string ZeroWidth(int slot, IEnumerable<IScope> scopes) Parameters Type Name Description Int32 slot IEnumerable < IScope > scopes Returns Type Description String"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.NamingStrategy.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.NamingStrategy.html",
    "title": "Delegate NamingStrategy | Loretta",
    "keywords": "Delegate NamingStrategy The naming strategy to use to convert a slot into a variable name. Uses the provided scope to check if the variable name is not being used already. Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public delegate string NamingStrategy(int slot, IEnumerable<IScope> scopes); Parameters Type Name Description Int32 slot The slot to convert to a variable name. IEnumerable < IScope > scopes The scopes the slot will be used in. Returns Type Description String"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.SequentialSlotAllocator.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.SequentialSlotAllocator.html",
    "title": "Class SequentialSlotAllocator | Loretta",
    "keywords": "Class SequentialSlotAllocator A sequential slot allocator. Never returns previously used slots and is the fastest one. Inheritance Object SequentialSlotAllocator Implements ISlotAllocator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public sealed class SequentialSlotAllocator : ISlotAllocator Methods | Improve this Doc View Source AllocateSlot() Allocates a slot for the provided variable. Declaration public int AllocateSlot() Returns Type Description Int32 The slot that was allocated to the variable. | Improve this Doc View Source ReleaseSlot(Int32) Releases a slot for usage by other variables. Declaration public void ReleaseSlot(int slot) Parameters Type Name Description Int32 slot The slot the variable is located in. Implements ISlotAllocator"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.SortedSlotAllocator.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.Minifying.SortedSlotAllocator.html",
    "title": "Class SortedSlotAllocator | Loretta",
    "keywords": "Class SortedSlotAllocator The sorted slot allocator. Will always use the lowest free slot. Inheritance Object SortedSlotAllocator Implements ISlotAllocator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental.Minifying Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public sealed class SortedSlotAllocator : ISlotAllocator Methods | Improve this Doc View Source AllocateSlot() Allocates a slot for the provided variable. Declaration public int AllocateSlot() Returns Type Description Int32 The slot that was allocated to the variable. | Improve this Doc View Source ReleaseSlot(Int32) Releases a slot for usage by other variables. Declaration public void ReleaseSlot(int slot) Parameters Type Name Description Int32 slot The slot the variable is located in. Implements ISlotAllocator"
  },
  "api/Loretta.CodeAnalysis.Lua.Experimental.SyntaxExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Experimental.SyntaxExtensions.html",
    "title": "Class SyntaxExtensions | Loretta",
    "keywords": "Class SyntaxExtensions Experimental code exposed through extension methods. Inheritance Object SyntaxExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.Experimental Assembly : Loretta.CodeAnalysis.Lua.Experimental.dll Syntax public static class SyntaxExtensions"
  },
  "api/Loretta.CodeAnalysis.Lua.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.html",
    "title": "Namespace Loretta.CodeAnalysis.Lua | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Lua Classes IdentifierNameNotSupportedError An error that represents the provided identifier not being supported in a provided tree. LuaDiagnosticFormatter The Lua diagnostic formatter. LuaExtensions Extension methods for lua specific data. LuaParseOptions This class stores several source parsing related options and offers access to their values. LuaSyntaxNode Represents a non-terminal node in the syntax tree. LuaSyntaxOptions The options used by Loretta to adapt to the syntax of the lua flavor being parsed. LuaSyntaxRewriter Represents a LuaSyntaxVisitor<TResult> which descends an entire LuaSyntaxNode graph and may replace or remove visited SyntaxNodes in depth-first order. LuaSyntaxTree The parsed representation of a Lua source document. LuaSyntaxVisitor Represents a LuaSyntaxNode visitor that visits only the single LuaSyntaxNode passed into its Visit method. LuaSyntaxVisitor<TResult> Represents a LuaSyntaxNode visitor that visits only the single LuaSyntaxNode passed into its Visit method and produces a value of the type specified by the TResult parameter. LuaSyntaxWalker Represents a LuaSyntaxVisitor that descends an entire LuaSyntaxNode graph visiting each LuaSyntaxNode and its child SyntaxNodes and SyntaxToken s in depth-first order. RenameError An error found while renaming a variable. Script A script containing one or more files. SyntaxExtensions Extension methods for the Lua syntax. SyntaxFactory A class containing factory methods for constructing syntax nodes, tokens and trivia. SyntaxFacts A static class containing facts about Lua's Syntax. VariableConflictError Represents a conflict with an existing variable. Interfaces IFileScope A file's scope. IFunctionScope A function's scope. IGotoLabel The interface for a goto label. IScope The base interface for scopes. IVariable The base interface for variables Enums ContinueType The type of continue the lua flavor being parsed has. IntegerFormats The format integers should be stored as. ScopeKind The type of scope. SyntaxKind VariableKind The kind of varibles available."
  },
  "api/Loretta.CodeAnalysis.Lua.IdentifierNameNotSupportedError.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IdentifierNameNotSupportedError.html",
    "title": "Class IdentifierNameNotSupportedError | Loretta",
    "keywords": "Class IdentifierNameNotSupportedError An error that represents the provided identifier not being supported in a provided tree. Inheritance Object RenameError IdentifierNameNotSupportedError Implements IEquatable < RenameError > IEquatable < IdentifierNameNotSupportedError > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public class IdentifierNameNotSupportedError : RenameError, IEquatable<RenameError>, IEquatable<IdentifierNameNotSupportedError> Constructors | Improve this Doc View Source IdentifierNameNotSupportedError(SyntaxTree) An error that represents the provided identifier not being supported in a provided tree. Declaration public IdentifierNameNotSupportedError(SyntaxTree TreeWithoutSupport) Parameters Type Name Description SyntaxTree TreeWithoutSupport The the identifier name is not supported on. Properties | Improve this Doc View Source TreeWithoutSupport Declaration public SyntaxTree TreeWithoutSupport { get; set; } Property Value Type Description SyntaxTree Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Loretta.CodeAnalysis.Lua.IFileScope.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IFileScope.html",
    "title": "Interface IFileScope | Loretta",
    "keywords": "Interface IFileScope A file's scope. Inherited Members IScope.Kind IScope.Node IScope.ContainingScope IScope.DeclaredVariables IScope.ReferencedVariables IScope.GotoLabels IScope.ContainedScopes IScope.FindVariable(String, ScopeKind) Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public interface IFileScope : IScope Properties | Improve this Doc View Source ArgVariable The implicit arg that's available in all files. Declaration IVariable ArgVariable { get; } Property Value Type Description IVariable | Improve this Doc View Source VarArgParameter The implicit vararg that's available in all files Declaration IVariable VarArgParameter { get; } Property Value Type Description IVariable"
  },
  "api/Loretta.CodeAnalysis.Lua.IFunctionScope.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IFunctionScope.html",
    "title": "Interface IFunctionScope | Loretta",
    "keywords": "Interface IFunctionScope A function's scope. Inherited Members IScope.Kind IScope.Node IScope.ContainingScope IScope.DeclaredVariables IScope.ReferencedVariables IScope.GotoLabels IScope.ContainedScopes IScope.FindVariable(String, ScopeKind) Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public interface IFunctionScope : IScope Properties | Improve this Doc View Source CapturedVariables Contains the variables that are captured by this scope. Variables captured by the scope are variables that weren't declared on the scope but are used in it. Declaration IEnumerable<IVariable> CapturedVariables { get; } Property Value Type Description IEnumerable < IVariable > | Improve this Doc View Source Parameters The parameters Declaration IEnumerable<IVariable> Parameters { get; } Property Value Type Description IEnumerable < IVariable >"
  },
  "api/Loretta.CodeAnalysis.Lua.IGotoLabel.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IGotoLabel.html",
    "title": "Interface IGotoLabel | Loretta",
    "keywords": "Interface IGotoLabel The interface for a goto label. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public interface IGotoLabel Properties | Improve this Doc View Source JumpSyntaxes The nodes that jump to this label. Declaration IEnumerable<GotoStatementSyntax> JumpSyntaxes { get; } Property Value Type Description IEnumerable < GotoStatementSyntax > | Improve this Doc View Source LabelSyntax The label's location. Declaration GotoLabelStatementSyntax LabelSyntax { get; } Property Value Type Description GotoLabelStatementSyntax | Improve this Doc View Source Name The label's name. Declaration string Name { get; } Property Value Type Description String"
  },
  "api/Loretta.CodeAnalysis.Lua.IntegerFormats.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IntegerFormats.html",
    "title": "Enum IntegerFormats | Loretta",
    "keywords": "Enum IntegerFormats The format integers should be stored as. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public enum IntegerFormats Fields Name Description Double Integers are stored as a Double . Int64 Integers are stored as a Int64 . NotSupported No integer support at all and numbers are parsed as Double s without overflow behavior."
  },
  "api/Loretta.CodeAnalysis.Lua.IScope.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IScope.html",
    "title": "Interface IScope | Loretta",
    "keywords": "Interface IScope The base interface for scopes. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public interface IScope Properties | Improve this Doc View Source ContainedScopes Returns the scopes directly contained within this scope. Declaration IEnumerable<IScope> ContainedScopes { get; } Property Value Type Description IEnumerable < IScope > | Improve this Doc View Source ContainingScope The parent scope (if any). Declaration IScope ContainingScope { get; } Property Value Type Description IScope | Improve this Doc View Source DeclaredVariables Contains the variables declared within the scope. As variables can be shadowed/redeclared, there may be multiple variables with the same name. Declaration IEnumerable<IVariable> DeclaredVariables { get; } Property Value Type Description IEnumerable < IVariable > | Improve this Doc View Source GotoLabels The goto labels contained within this scope. Declaration IEnumerable<IGotoLabel> GotoLabels { get; } Property Value Type Description IEnumerable < IGotoLabel > | Improve this Doc View Source Kind The kind of scope. Declaration ScopeKind Kind { get; } Property Value Type Description ScopeKind | Improve this Doc View Source Node The syntax node that originated this scope. Not supported for the global scope. Declaration SyntaxNode Node { get; } Property Value Type Description SyntaxNode | Improve this Doc View Source ReferencedVariables Variables that are directly referenced by this scope. Declaration IEnumerable<IVariable> ReferencedVariables { get; } Property Value Type Description IEnumerable < IVariable > Methods | Improve this Doc View Source FindVariable(String, ScopeKind) Attempts to find a variable with the given name. Declaration IVariable FindVariable(string name, ScopeKind kind = ScopeKind.Global) Parameters Type Name Description String name The name of the variable to search by. ScopeKind kind The kind of scope up to which to search the variable in. Returns Type Description IVariable Remarks The kind parameter searches for a scope of the provided kind or a more specific one as in the following list: Block searches only Block s. Function searches: Function s and Block s. File searches: File , Function s and Block s. Global searches: Global , File , Function s and Block s."
  },
  "api/Loretta.CodeAnalysis.Lua.IVariable.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.IVariable.html",
    "title": "Interface IVariable | Loretta",
    "keywords": "Interface IVariable The base interface for variables Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public interface IVariable Properties | Improve this Doc View Source CapturingScopes All scopes that capture this variable as an upvalue. Declaration IEnumerable<IScope> CapturingScopes { get; } Property Value Type Description IEnumerable < IScope > | Improve this Doc View Source ContainingScope The containing scope. Declaration IScope ContainingScope { get; } Property Value Type Description IScope | Improve this Doc View Source Declaration The node where this variable is declared. Declaration SyntaxNode Declaration { get; } Property Value Type Description SyntaxNode Remarks null if it is a global or implicit variable. | Improve this Doc View Source Kind The kind of this variable. Declaration VariableKind Kind { get; } Property Value Type Description VariableKind | Improve this Doc View Source Name The variable's name. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source ReadLocations All locations this variable is read from. Declaration IEnumerable<SyntaxNode> ReadLocations { get; } Property Value Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source ReferencingScopes The scopes that reference this variable. Declaration IEnumerable<IScope> ReferencingScopes { get; } Property Value Type Description IEnumerable < IScope > | Improve this Doc View Source WriteLocations All locations this variable is written to. Declaration IEnumerable<SyntaxNode> WriteLocations { get; } Property Value Type Description IEnumerable < SyntaxNode > Methods | Improve this Doc View Source CanBeAccessedIn(IScope) Returns whether this variable can be accessed in the provided scope. Declaration bool CanBeAccessedIn(IScope scope) Parameters Type Name Description IScope scope The scope to check access in. Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaDiagnosticFormatter.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaDiagnosticFormatter.html",
    "title": "Class LuaDiagnosticFormatter | Loretta",
    "keywords": "Class LuaDiagnosticFormatter The Lua diagnostic formatter. Inheritance Object DiagnosticFormatter LuaDiagnosticFormatter Inherited Members DiagnosticFormatter.Format(Diagnostic, Nullable<IFormatProvider>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public class LuaDiagnosticFormatter : DiagnosticFormatter Properties | Improve this Doc View Source Instance The diagnostic formatter instance. Declaration public static LuaDiagnosticFormatter Instance { get; } Property Value Type Description LuaDiagnosticFormatter"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaExtensions.html",
    "title": "Class LuaExtensions | Loretta",
    "keywords": "Class LuaExtensions Extension methods for lua specific data. Inheritance Object LuaExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class LuaExtensions Methods | Improve this Doc View Source GetCompilationUnitRoot(SyntaxTree, CancellationToken) Obtains the root as a CompilationUnitSyntax . Declaration public static CompilationUnitSyntax GetCompilationUnitRoot(this SyntaxTree tree, CancellationToken cancellationToken = null) Parameters Type Name Description SyntaxTree tree CancellationToken cancellationToken Returns Type Description CompilationUnitSyntax | Improve this Doc View Source Insert(SyntaxTokenList, Int32, SyntaxToken[]) Insert one or more tokens in the list at the specified index. Declaration public static SyntaxTokenList Insert(this SyntaxTokenList list, int index, params SyntaxToken[] items) Parameters Type Name Description SyntaxTokenList list Int32 index SyntaxToken [] items Returns Type Description SyntaxTokenList A new list with the tokens inserted. | Improve this Doc View Source IsKeyword(SyntaxToken) Returns whether the provided SyntaxToken is a Lua keyword. Declaration public static bool IsKeyword(this SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description Boolean | Improve this Doc View Source IsVerbatimStringLiteral(SyntaxToken) Returns whether a SyntaxToken is a verbatim string literal. Declaration public static bool IsVerbatimStringLiteral(this SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description Boolean | Improve this Doc View Source Kind(SyntaxNode) Returns SyntaxKind for SyntaxNode from RawKind property. Declaration public static SyntaxKind Kind(this SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description SyntaxKind | Improve this Doc View Source Kind(SyntaxNodeOrToken) Returns SyntaxKind for SyntaxNode from RawKind property. Declaration public static SyntaxKind Kind(this SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken Returns Type Description SyntaxKind | Improve this Doc View Source Kind(SyntaxToken) Returns SyntaxKind for SyntaxToken from RawKind property. Declaration public static SyntaxKind Kind(this SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description SyntaxKind | Improve this Doc View Source Kind(SyntaxTrivia) Returns SyntaxKind for SyntaxTrivia from RawKind property. Declaration public static SyntaxKind Kind(this SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description SyntaxKind | Improve this Doc View Source ReplaceTrivia(SyntaxToken, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) Creates a new token with the specified old trivia replaced with computed new trivia. Declaration public static SyntaxToken ReplaceTrivia(this SyntaxToken token, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia) Parameters Type Name Description SyntaxToken token IEnumerable < SyntaxTrivia > trivia The trivia to be replaced; descendants of the root token. Func < SyntaxTrivia , SyntaxTrivia , SyntaxTrivia > computeReplacementTrivia A function that computes a replacement trivia for the argument trivia. The first argument is the original trivia. The second argument is the same trivia rewritten with replaced structure. Returns Type Description SyntaxToken | Improve this Doc View Source ReplaceTrivia(SyntaxToken, SyntaxTrivia, SyntaxTrivia) Creates a new token with the specified old trivia replaced with a new trivia. The old trivia may appear in the token's leading or trailing trivia. Declaration public static SyntaxToken ReplaceTrivia(this SyntaxToken token, SyntaxTrivia oldTrivia, SyntaxTrivia newTrivia) Parameters Type Name Description SyntaxToken token SyntaxTrivia oldTrivia The trivia to be replaced. SyntaxTrivia newTrivia The new trivia to use in the new tree in place of the old trivia. Returns Type Description SyntaxToken"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaParseOptions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaParseOptions.html",
    "title": "Class LuaParseOptions | Loretta",
    "keywords": "Class LuaParseOptions This class stores several source parsing related options and offers access to their values. Inheritance Object ParseOptions LuaParseOptions Implements IEquatable < LuaParseOptions > Inherited Members ParseOptions.DocumentationMode ParseOptions.Errors ParseOptions.WithDocumentationMode(DocumentationMode) ParseOptions.WithFeatures(IEnumerable<KeyValuePair<String, String>>) ParseOptions.Features Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LuaParseOptions : ParseOptions Constructors | Improve this Doc View Source LuaParseOptions(LuaSyntaxOptions) Initializes a new set of parse options. Declaration public LuaParseOptions(LuaSyntaxOptions syntaxOptions) Parameters Type Name Description LuaSyntaxOptions syntaxOptions Properties | Improve this Doc View Source Default The default parse options. Declaration public static LuaParseOptions Default { get; } Property Value Type Description LuaParseOptions | Improve this Doc View Source Language Gets the source language (\"Lua\"). Declaration public override string Language { get; } Property Value Type Description String Overrides ParseOptions.Language | Improve this Doc View Source SyntaxOptions The LuaSyntaxOptions to use when parsing. Declaration public LuaSyntaxOptions SyntaxOptions { get; } Property Value Type Description LuaSyntaxOptions Methods | Improve this Doc View Source Equals(LuaParseOptions) Declaration public bool Equals(LuaParseOptions other) Parameters Type Name Description LuaParseOptions other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ParseOptions.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ParseOptions.GetHashCode() | Improve this Doc View Source WithSyntaxOptions(LuaSyntaxOptions) Creates a new instance with the syntax options replaced by the provided ones. Declaration public LuaParseOptions WithSyntaxOptions(LuaSyntaxOptions syntaxOptions) Parameters Type Name Description LuaSyntaxOptions syntaxOptions Returns Type Description LuaParseOptions Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxNode.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxNode.html",
    "title": "Class LuaSyntaxNode | Loretta",
    "keywords": "Class LuaSyntaxNode Represents a non-terminal node in the syntax tree. Inheritance Object SyntaxNode LuaSyntaxNode CompilationUnitSyntax ElseClauseSyntax ElseIfClauseSyntax ElseIfExpressionClauseSyntax EqualsTypeSyntax EqualsValuesClauseSyntax ExpressionSyntax FunctionArgumentSyntax FunctionNameSyntax LocalDeclarationNameSyntax ParameterListSyntax ParameterSyntax StatementListSyntax StatementSyntax StructuredTriviaSyntax TableFieldSyntax TableTypeElementSyntax TypeArgumentListSyntax TypeBindingSyntax TypedIdentifierNameSyntax TypeParameterListSyntax TypeParameterSyntax TypeSyntax VariableAttributeSyntax Implements IFormattable Inherited Members SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxNode : SyntaxNode Properties | Improve this Doc View Source Language The language name that this node is syntax of. Declaration public override string Language { get; } Property Value Type Description String Overrides SyntaxNode.Language Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Accepts a visitor into this node. Declaration public abstract void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Accepts a visitor into this node. Declaration public abstract TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult | Improve this Doc View Source DeserializeFrom(Stream, CancellationToken) Deserialize a syntax node from the byte stream. Declaration public static SyntaxNode DeserializeFrom(Stream stream, CancellationToken cancellationToken = null) Parameters Type Name Description Stream stream CancellationToken cancellationToken Returns Type Description SyntaxNode | Improve this Doc View Source FindToken(Int32, Boolean) Finds a token according to the following rules: If position matches the End of the node/s FullSpan and the node is CompilationUnit, then EoF is returned. If node.FullSpan.Contains(position) then the token that contains given position is returned. Otherwise an ArgumentOutOfRangeException is thrown Declaration public SyntaxToken FindToken(int position, bool findInsideTrivia = false) Parameters Type Name Description Int32 position Boolean findInsideTrivia Returns Type Description SyntaxToken | Improve this Doc View Source FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) Finds a descendant trivia of this node at the specified position, where the position is within the span of the node. Declaration public SyntaxTrivia FindTrivia(int position, Func<SyntaxTrivia, bool> stepInto) Parameters Type Name Description Int32 position The character position of the trivia relative to the beginning of the file. Func < SyntaxTrivia , Boolean > stepInto Specifies a function that determines per trivia node, whether to descend into structured trivia of that node. Returns Type Description SyntaxTrivia | Improve this Doc View Source FindTrivia(Int32, Boolean) Finds a descendant trivia of this node whose span includes the supplied position. Declaration public SyntaxTrivia FindTrivia(int position, bool findInsideTrivia = false) Parameters Type Name Description Int32 position The character position of the trivia relative to the beginning of the file. Boolean findInsideTrivia Whether to search inside structured trivia. Returns Type Description SyntaxTrivia | Improve this Doc View Source GetDiagnostics() Gets a list of all the diagnostics in the sub tree that has this node as its root. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public IEnumerable<Diagnostic> GetDiagnostics() Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetFirstToken(Boolean, Boolean, Boolean, Boolean) Gets the first token of the tree rooted by this node. Declaration public SyntaxToken GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth True if zero width tokens should be included, false by default. Boolean includeSkipped True if skipped tokens should be included, false by default. Boolean includeDirectives True if directives should be included, false by default. Boolean includeDocumentationComments True if documentation comments should be included, false by default. Returns Type Description SyntaxToken | Improve this Doc View Source GetLastToken(Boolean, Boolean, Boolean, Boolean) Gets the last non-zero-width token of the tree rooted by this node. Declaration public SyntaxToken GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth True if zero width tokens should be included, false by default. Boolean includeSkipped True if skipped tokens should be included, false by default. Boolean includeDirectives True if directives should be included, false by default. Boolean includeDocumentationComments True if documentation comments should be included, false by default. Returns Type Description SyntaxToken | Improve this Doc View Source GetLeadingTrivia() The list of trivia that appears before this node in the source code. Declaration public SyntaxTriviaList GetLeadingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source GetLocation() Gets a Location for this node. Declaration public Location GetLocation() Returns Type Description Location | Improve this Doc View Source GetTrailingTrivia() The list of trivia that appears after this node in the source code. Declaration public SyntaxTriviaList GetTrailingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source Kind() Returns the SyntaxKind of the node. Declaration public SyntaxKind Kind() Returns Type Description SyntaxKind Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.html",
    "title": "Class LuaSyntaxOptions | Loretta",
    "keywords": "Class LuaSyntaxOptions The options used by Loretta to adapt to the syntax of the lua flavor being parsed. Inheritance Object LuaSyntaxOptions Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public class LuaSyntaxOptions : IEquatable<LuaSyntaxOptions> Remarks Otherwise when noted, \"Accept\" in this class means not generating an error when parsing, but the syntax behind the option will still be parsed normally. Constructors | Improve this Doc View Source LuaSyntaxOptions(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, ContinueType, Boolean, Boolean, Boolean, Boolean, IntegerFormats, IntegerFormats, IntegerFormats, IntegerFormats, Boolean, Boolean, Boolean, Boolean) Initializes a new lua options set. Declaration public LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, IntegerFormats binaryIntegerFormat, IntegerFormats octalIntegerFormat, IntegerFormats decimalIntegerFormat, IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes, bool acceptNestingOfLongStrings) Parameters Type Name Description Boolean acceptBinaryNumbers Boolean acceptCCommentSyntax Boolean acceptCompoundAssignment Boolean acceptEmptyStatements Boolean acceptCBooleanOperators Boolean acceptGoto Boolean acceptHexEscapesInStrings Boolean acceptHexFloatLiterals Boolean acceptOctalNumbers Boolean acceptShebang Boolean acceptUnderscoreInNumberLiterals Boolean useLuaJitIdentifierRules Boolean acceptBitwiseOperators Boolean acceptWhitespaceEscape Boolean acceptUnicodeEscape ContinueType continueType Boolean acceptIfExpression Boolean acceptHashStrings Boolean acceptInvalidEscapes Boolean acceptLocalVariableAttributes IntegerFormats binaryIntegerFormat IntegerFormats octalIntegerFormat IntegerFormats decimalIntegerFormat IntegerFormats hexIntegerFormat Boolean acceptTypedLua Boolean acceptFloorDivision Boolean acceptLuaJITNumberSuffixes Boolean acceptNestingOfLongStrings Fields | Improve this Doc View Source All The preset that sets everything to true, continue to ContextualKeyword and integer options to NotSupported . Declaration public static readonly LuaSyntaxOptions All Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source AllWithIntegers Same as All but with integer settings set to Int64 , AcceptFloorDivision set to true and AcceptCCommentSyntax set to false . Declaration public static readonly LuaSyntaxOptions AllWithIntegers Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source FiveM The FiveM preset. Declaration public static readonly LuaSyntaxOptions FiveM Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source GMod The GLua preset. Declaration public static readonly LuaSyntaxOptions GMod Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Lua51 The Lua 5.1 preset. Declaration public static readonly LuaSyntaxOptions Lua51 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Lua52 The Lua 5.2 preset. Declaration public static readonly LuaSyntaxOptions Lua52 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Lua53 The Lua 5.3 preset. Declaration public static readonly LuaSyntaxOptions Lua53 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Lua54 The Lua 5.4 preset. Declaration public static readonly LuaSyntaxOptions Lua54 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source LuaJIT20 The LuaJIT 2.0 preset. Declaration public static readonly LuaSyntaxOptions LuaJIT20 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source LuaJIT21 The LuaJIT 2.1-beta3 preset. Declaration public static readonly LuaSyntaxOptions LuaJIT21 Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Luau The Luau preset. Declaration public static readonly LuaSyntaxOptions Luau Field Value Type Description LuaSyntaxOptions | Improve this Doc View Source Roblox The Luau preset. Declaration public static readonly LuaSyntaxOptions Roblox Field Value Type Description LuaSyntaxOptions Properties | Improve this Doc View Source AcceptBinaryNumbers Whether to accept binary numbers (format: /0b[10]+/). Declaration public bool AcceptBinaryNumbers { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptBitwiseOperators Whether to accept 5.3 bitise operators. Declaration public bool AcceptBitwiseOperators { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptCBooleanOperators Whether to accept C boolean operators (&&, ||, != and !). Declaration public bool AcceptCBooleanOperators { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptCCommentSyntax Whether to accept C comment syntax (formats: \"//...\" and \"/* ... */\"). Declaration public bool AcceptCCommentSyntax { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptCompoundAssignment Whether to accept compound assignment syntax (format: <expr> (\"+=\" | \"-=\" | \"*=\" | \"/=\" | \"^=\" | \"%=\" | \"..=\") <expr>). Declaration public bool AcceptCompoundAssignment { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptEmptyStatements Whether to accept empty statements (lone semicolons). Declaration public bool AcceptEmptyStatements { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptFloorDivision Whether to accept floor division or not Declaration public bool AcceptFloorDivision { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptGoto Whether to accept goto labels and statements. Declaration public bool AcceptGoto { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptHashStrings Whether to accept FiveM hash strings. Declaration public bool AcceptHashStrings { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptHexEscapesInStrings Whether to accept hexadecimal escapes in strings. Declaration public bool AcceptHexEscapesInStrings { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptHexFloatLiterals Whether to accept hexadecimal floating point literals (format: /0x[a-fA-F0-9]+(.[a-fA-F0-9])?([+-]?p[0-9]+)/). Declaration public bool AcceptHexFloatLiterals { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptIfExpressions Whether to accept Luau if expressions. Declaration public bool AcceptIfExpressions { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptInvalidEscapes Whether to support the Lua 5.1 lexer bug where invalid escapes in strings are read as the character in the escape. NO ERROR WILL BE EMITTED IF AN INVALID ESCAPE IS ENCOUNTERED IF THIS IS true . Declaration public bool AcceptInvalidEscapes { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptLocalVariableAttributes Whether to accept Lua 5.4 variable attributes. Declaration public bool AcceptLocalVariableAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptLuaJITNumberSuffixes Whether to accept LuaJIT number suffixes or not Declaration public bool AcceptLuaJITNumberSuffixes { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptNestingOfLongStrings Whether to accept nesting of [[...]] AN ERROR WILL BE GENERATED FOR NESTED LONG STRINGS IF THIS IS false . Declaration public bool AcceptNestingOfLongStrings { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptOctalNumbers Whether to accept octal numbers (format: /0o[0-7]+/). Declaration public bool AcceptOctalNumbers { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptShebang Whether to accept shebangs (format: \"#!...\"). Declaration public bool AcceptShebang { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptTypedLua Whether to accept typed lua syntax or not Declaration public bool AcceptTypedLua { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptUnderscoreInNumberLiterals Whether to accept underscores in any number literals (will be ignored when parsing the number). Declaration public bool AcceptUnderscoreInNumberLiterals { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptUnicodeEscape Whether to accept Unicode ( \\u{XXX} ) escapes. Declaration public bool AcceptUnicodeEscape { get; } Property Value Type Description Boolean | Improve this Doc View Source AcceptWhitespaceEscape Whether to accept \\z escapes. Declaration public bool AcceptWhitespaceEscape { get; } Property Value Type Description Boolean | Improve this Doc View Source AllPresets All presets that are preconfigured in LuaSyntaxOptions . Declaration public static ImmutableArray<LuaSyntaxOptions> AllPresets { get; } Property Value Type Description ImmutableArray < LuaSyntaxOptions > | Improve this Doc View Source BinaryIntegerFormat Format binary numeric literals are stored as. Declaration public IntegerFormats BinaryIntegerFormat { get; } Property Value Type Description IntegerFormats | Improve this Doc View Source ContinueType The type of continue to be recognized by the parser. Declaration public ContinueType ContinueType { get; } Property Value Type Description ContinueType | Improve this Doc View Source DecimalIntegerFormat Format decimal integer literals are stored as. Declaration public IntegerFormats DecimalIntegerFormat { get; } Property Value Type Description IntegerFormats | Improve this Doc View Source HexIntegerFormat Format hexadecimal integer literals are stored as. Declaration public IntegerFormats HexIntegerFormat { get; } Property Value Type Description IntegerFormats | Improve this Doc View Source OctalIntegerFormat Format octal numeric literals are stored as. Declaration public IntegerFormats OctalIntegerFormat { get; } Property Value Type Description IntegerFormats | Improve this Doc View Source UseLuaJitIdentifierRules Whether to use LuaJIT's identifier character rules (accepts any character greater than or equal to 0xF7). Declaration public bool UseLuaJitIdentifierRules { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(LuaSyntaxOptions) Declaration public bool Equals(LuaSyntaxOptions other) Parameters Type Name Description LuaSyntaxOptions other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String | Improve this Doc View Source With(Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<ContinueType>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<IntegerFormats>, Option<IntegerFormats>, Option<IntegerFormats>, Option<IntegerFormats>, Option<Boolean>, Option<Boolean>, Option<Boolean>, Option<Boolean>) Creates a new lua options changing the provided fields. Declaration public LuaSyntaxOptions With(Option<bool> acceptBinaryNumbers = default(Option<bool>), Option<bool> acceptCCommentSyntax = default(Option<bool>), Option<bool> acceptCompoundAssignment = default(Option<bool>), Option<bool> acceptEmptyStatements = default(Option<bool>), Option<bool> acceptCBooleanOperators = default(Option<bool>), Option<bool> acceptGoto = default(Option<bool>), Option<bool> acceptHexEscapesInStrings = default(Option<bool>), Option<bool> acceptHexFloatLiterals = default(Option<bool>), Option<bool> acceptOctalNumbers = default(Option<bool>), Option<bool> acceptShebang = default(Option<bool>), Option<bool> acceptUnderscoreInNumberLiterals = default(Option<bool>), Option<bool> useLuaJitIdentifierRules = default(Option<bool>), Option<bool> acceptBitwiseOperators = default(Option<bool>), Option<bool> acceptWhitespaceEscape = default(Option<bool>), Option<bool> acceptUnicodeEscape = default(Option<bool>), Option<ContinueType> continueType = default(Option<ContinueType>), Option<bool> acceptIfExpression = default(Option<bool>), Option<bool> acceptHashStrings = default(Option<bool>), Option<bool> acceptInvalidEscapes = default(Option<bool>), Option<bool> acceptLocalVariableAttributes = default(Option<bool>), Option<IntegerFormats> binaryIntegerFormat = default(Option<IntegerFormats>), Option<IntegerFormats> octalIntegerFormat = default(Option<IntegerFormats>), Option<IntegerFormats> decimalIntegerFormat = default(Option<IntegerFormats>), Option<IntegerFormats> hexIntegerFormat = default(Option<IntegerFormats>), Option<bool> acceptTypedLua = default(Option<bool>), Option<bool> acceptFloorDivision = default(Option<bool>), Option<bool> acceptLuaJITNumberSuffixes = default(Option<bool>), Option<bool> acceptNestingOfLongStrings = default(Option<bool>)) Parameters Type Name Description Tsu.Option < Boolean > acceptBinaryNumbers If None uses the value of AcceptBinaryNumbers . Tsu.Option < Boolean > acceptCCommentSyntax If None uses the value of AcceptCCommentSyntax . Tsu.Option < Boolean > acceptCompoundAssignment If None uses the value of AcceptCompoundAssignment . Tsu.Option < Boolean > acceptEmptyStatements If None uses the value of AcceptEmptyStatements . Tsu.Option < Boolean > acceptCBooleanOperators If None uses the value of AcceptCBooleanOperators . Tsu.Option < Boolean > acceptGoto If None uses the value of AcceptGoto . Tsu.Option < Boolean > acceptHexEscapesInStrings If None uses the value of AcceptHexEscapesInStrings . Tsu.Option < Boolean > acceptHexFloatLiterals If None uses the value of AcceptHexFloatLiterals . Tsu.Option < Boolean > acceptOctalNumbers If None uses the value of AcceptOctalNumbers . Tsu.Option < Boolean > acceptShebang If None uses the value of AcceptShebang . Tsu.Option < Boolean > acceptUnderscoreInNumberLiterals If None uses the value of AcceptUnderscoreInNumberLiterals . Tsu.Option < Boolean > useLuaJitIdentifierRules If None uses the value of UseLuaJitIdentifierRules . Tsu.Option < Boolean > acceptBitwiseOperators If None uses the value of AcceptBitwiseOperators . Tsu.Option < Boolean > acceptWhitespaceEscape If None uses the value of AcceptWhitespaceEscape . Tsu.Option < Boolean > acceptUnicodeEscape If None uses the value of AcceptUnicodeEscape . Tsu.Option < ContinueType > continueType If None uses the value of ContinueType . Tsu.Option < Boolean > acceptIfExpression If None uses the value of AcceptIfExpressions . Tsu.Option < Boolean > acceptHashStrings If None uses the value of AcceptHashStrings . Tsu.Option < Boolean > acceptInvalidEscapes If None uses the value of AcceptInvalidEscapes . Tsu.Option < Boolean > acceptLocalVariableAttributes If None uses the value of AcceptLocalVariableAttributes . Tsu.Option < IntegerFormats > binaryIntegerFormat If None uses the value of BinaryIntegerFormat . Tsu.Option < IntegerFormats > octalIntegerFormat If None uses the value of OctalIntegerFormat . Tsu.Option < IntegerFormats > decimalIntegerFormat If None uses the value of DecimalIntegerFormat . Tsu.Option < IntegerFormats > hexIntegerFormat If None uses the value of HexIntegerFormat . Tsu.Option < Boolean > acceptTypedLua If None uses the value of AcceptTypedLua . Tsu.Option < Boolean > acceptFloorDivision If None uses the value of AcceptFloorDivision . Tsu.Option < Boolean > acceptLuaJITNumberSuffixes If None uses the value of AcceptLuaJITNumberSuffixes . Tsu.Option < Boolean > acceptNestingOfLongStrings If None uses the value of AcceptNestingOfLongStrings . Returns Type Description LuaSyntaxOptions Operators | Improve this Doc View Source Equality(LuaSyntaxOptions, LuaSyntaxOptions) Checks whether two lua option sets are equal. Declaration public static bool operator ==(LuaSyntaxOptions left, LuaSyntaxOptions right) Parameters Type Name Description LuaSyntaxOptions left LuaSyntaxOptions right Returns Type Description Boolean | Improve this Doc View Source Inequality(LuaSyntaxOptions, LuaSyntaxOptions) Checks whether two lua option sets are not equal. Declaration public static bool operator !=(LuaSyntaxOptions left, LuaSyntaxOptions right) Parameters Type Name Description LuaSyntaxOptions left LuaSyntaxOptions right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.html",
    "title": "Class LuaSyntaxRewriter | Loretta",
    "keywords": "Class LuaSyntaxRewriter Represents a LuaSyntaxVisitor<TResult> which descends an entire LuaSyntaxNode graph and may replace or remove visited SyntaxNodes in depth-first order. Inheritance Object LuaSyntaxVisitor < SyntaxNode > LuaSyntaxRewriter Inherited Members LuaSyntaxVisitor<SyntaxNode>.DefaultVisit(SyntaxNode) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxRewriter : LuaSyntaxVisitor<SyntaxNode> Constructors | Improve this Doc View Source LuaSyntaxRewriter(Boolean) Initializes a new LuaSyntaxRewriter Declaration public LuaSyntaxRewriter(bool visitIntoStructuredTrivia = false) Parameters Type Name Description Boolean visitIntoStructuredTrivia Whether the rewriter should enter into structured trivia. Properties | Improve this Doc View Source VisitIntoStructuredTrivia Whether the rewriter enters into structured trivia. Declaration public virtual bool VisitIntoStructuredTrivia { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Visit(SyntaxNode) Declaration public override SyntaxNode Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.Visit(Loretta.CodeAnalysis.SyntaxNode) | Improve this Doc View Source VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax) Declaration public override SyntaxNode VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax node) Parameters Type Name Description AnonymousFunctionExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitAnonymousFunctionExpression(Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax) | Improve this Doc View Source VisitArrayType(ArrayTypeSyntax) Declaration public override SyntaxNode VisitArrayType(ArrayTypeSyntax node) Parameters Type Name Description ArrayTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitArrayType(Loretta.CodeAnalysis.Lua.Syntax.ArrayTypeSyntax) | Improve this Doc View Source VisitAssignmentStatement(AssignmentStatementSyntax) Declaration public override SyntaxNode VisitAssignmentStatement(AssignmentStatementSyntax node) Parameters Type Name Description AssignmentStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax) | Improve this Doc View Source VisitBinaryExpression(BinaryExpressionSyntax) Declaration public override SyntaxNode VisitBinaryExpression(BinaryExpressionSyntax node) Parameters Type Name Description BinaryExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitBinaryExpression(Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax) | Improve this Doc View Source VisitBreakStatement(BreakStatementSyntax) Declaration public override SyntaxNode VisitBreakStatement(BreakStatementSyntax node) Parameters Type Name Description BreakStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitBreakStatement(Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax) | Improve this Doc View Source VisitCompilationUnit(CompilationUnitSyntax) Declaration public override SyntaxNode VisitCompilationUnit(CompilationUnitSyntax node) Parameters Type Name Description CompilationUnitSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitCompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax) | Improve this Doc View Source VisitCompositeTypeName(CompositeTypeNameSyntax) Declaration public override SyntaxNode VisitCompositeTypeName(CompositeTypeNameSyntax node) Parameters Type Name Description CompositeTypeNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitCompositeTypeName(Loretta.CodeAnalysis.Lua.Syntax.CompositeTypeNameSyntax) | Improve this Doc View Source VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax) Declaration public override SyntaxNode VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax node) Parameters Type Name Description CompoundAssignmentStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitCompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax) | Improve this Doc View Source VisitContinueStatement(ContinueStatementSyntax) Declaration public override SyntaxNode VisitContinueStatement(ContinueStatementSyntax node) Parameters Type Name Description ContinueStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitContinueStatement(Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax) | Improve this Doc View Source VisitDoStatement(DoStatementSyntax) Declaration public override SyntaxNode VisitDoStatement(DoStatementSyntax node) Parameters Type Name Description DoStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitDoStatement(Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax) | Improve this Doc View Source VisitElementAccessExpression(ElementAccessExpressionSyntax) Declaration public override SyntaxNode VisitElementAccessExpression(ElementAccessExpressionSyntax node) Parameters Type Name Description ElementAccessExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitElementAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax) | Improve this Doc View Source VisitElseClause(ElseClauseSyntax) Declaration public override SyntaxNode VisitElseClause(ElseClauseSyntax node) Parameters Type Name Description ElseClauseSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitElseClause(Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax) | Improve this Doc View Source VisitElseIfClause(ElseIfClauseSyntax) Declaration public override SyntaxNode VisitElseIfClause(ElseIfClauseSyntax node) Parameters Type Name Description ElseIfClauseSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax) | Improve this Doc View Source VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax) Declaration public override SyntaxNode VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax node) Parameters Type Name Description ElseIfExpressionClauseSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitElseIfExpressionClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax) | Improve this Doc View Source VisitEmptyStatement(EmptyStatementSyntax) Declaration public override SyntaxNode VisitEmptyStatement(EmptyStatementSyntax node) Parameters Type Name Description EmptyStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitEmptyStatement(Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax) | Improve this Doc View Source VisitEqualsType(EqualsTypeSyntax) Declaration public override SyntaxNode VisitEqualsType(EqualsTypeSyntax node) Parameters Type Name Description EqualsTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitEqualsType(Loretta.CodeAnalysis.Lua.Syntax.EqualsTypeSyntax) | Improve this Doc View Source VisitEqualsValuesClause(EqualsValuesClauseSyntax) Declaration public override SyntaxNode VisitEqualsValuesClause(EqualsValuesClauseSyntax node) Parameters Type Name Description EqualsValuesClauseSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitEqualsValuesClause(Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax) | Improve this Doc View Source VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax) Declaration public override SyntaxNode VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax node) Parameters Type Name Description ExpressionKeyedTableFieldSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitExpressionKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax) | Improve this Doc View Source VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax) Declaration public override SyntaxNode VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax node) Parameters Type Name Description ExpressionListFunctionArgumentSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitExpressionListFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax) | Improve this Doc View Source VisitExpressionStatement(ExpressionStatementSyntax) Declaration public override SyntaxNode VisitExpressionStatement(ExpressionStatementSyntax node) Parameters Type Name Description ExpressionStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitExpressionStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax) | Improve this Doc View Source VisitFunctionCallExpression(FunctionCallExpressionSyntax) Declaration public override SyntaxNode VisitFunctionCallExpression(FunctionCallExpressionSyntax node) Parameters Type Name Description FunctionCallExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitFunctionCallExpression(Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax) | Improve this Doc View Source VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax) Declaration public override SyntaxNode VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax node) Parameters Type Name Description FunctionDeclarationStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax) | Improve this Doc View Source VisitFunctionType(FunctionTypeSyntax) Declaration public override SyntaxNode VisitFunctionType(FunctionTypeSyntax node) Parameters Type Name Description FunctionTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitFunctionType(Loretta.CodeAnalysis.Lua.Syntax.FunctionTypeSyntax) | Improve this Doc View Source VisitGenericForStatement(GenericForStatementSyntax) Declaration public override SyntaxNode VisitGenericForStatement(GenericForStatementSyntax node) Parameters Type Name Description GenericForStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitGenericForStatement(Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax) | Improve this Doc View Source VisitGenericTypePack(GenericTypePackSyntax) Declaration public override SyntaxNode VisitGenericTypePack(GenericTypePackSyntax node) Parameters Type Name Description GenericTypePackSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitGenericTypePack(Loretta.CodeAnalysis.Lua.Syntax.GenericTypePackSyntax) | Improve this Doc View Source VisitGotoLabelStatement(GotoLabelStatementSyntax) Declaration public override SyntaxNode VisitGotoLabelStatement(GotoLabelStatementSyntax node) Parameters Type Name Description GotoLabelStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitGotoLabelStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax) | Improve this Doc View Source VisitGotoStatement(GotoStatementSyntax) Declaration public override SyntaxNode VisitGotoStatement(GotoStatementSyntax node) Parameters Type Name Description GotoStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitGotoStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax) | Improve this Doc View Source VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax) Declaration public override SyntaxNode VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax node) Parameters Type Name Description IdentifierKeyedTableFieldSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitIdentifierKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax) | Improve this Doc View Source VisitIdentifierName(IdentifierNameSyntax) Declaration public override SyntaxNode VisitIdentifierName(IdentifierNameSyntax node) Parameters Type Name Description IdentifierNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitIdentifierName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax) | Improve this Doc View Source VisitIfExpression(IfExpressionSyntax) Declaration public override SyntaxNode VisitIfExpression(IfExpressionSyntax node) Parameters Type Name Description IfExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitIfExpression(Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax) | Improve this Doc View Source VisitIfStatement(IfStatementSyntax) Declaration public override SyntaxNode VisitIfStatement(IfStatementSyntax node) Parameters Type Name Description IfStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitIfStatement(Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax) | Improve this Doc View Source VisitIntersectionType(IntersectionTypeSyntax) Declaration public override SyntaxNode VisitIntersectionType(IntersectionTypeSyntax node) Parameters Type Name Description IntersectionTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitIntersectionType(Loretta.CodeAnalysis.Lua.Syntax.IntersectionTypeSyntax) | Improve this Doc View Source VisitList(SyntaxTokenList) Declaration public virtual SyntaxTokenList VisitList(SyntaxTokenList list) Parameters Type Name Description SyntaxTokenList list Returns Type Description SyntaxTokenList | Improve this Doc View Source VisitList(SyntaxTriviaList) Declaration public virtual SyntaxTriviaList VisitList(SyntaxTriviaList list) Parameters Type Name Description SyntaxTriviaList list Returns Type Description SyntaxTriviaList | Improve this Doc View Source VisitList<TNode>(SeparatedSyntaxList<TNode>) Declaration public virtual SeparatedSyntaxList<TNode> VisitList<TNode>(SeparatedSyntaxList<TNode> list) where TNode : SyntaxNode Parameters Type Name Description SeparatedSyntaxList <TNode> list Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode | Improve this Doc View Source VisitList<TNode>(SyntaxList<TNode>) Declaration public virtual SyntaxList<TNode> VisitList<TNode>(SyntaxList<TNode> list) where TNode : SyntaxNode Parameters Type Name Description SyntaxList <TNode> list Returns Type Description SyntaxList <TNode> Type Parameters Name Description TNode | Improve this Doc View Source VisitListElement(SyntaxTrivia) Declaration public virtual SyntaxTrivia VisitListElement(SyntaxTrivia element) Parameters Type Name Description SyntaxTrivia element Returns Type Description SyntaxTrivia | Improve this Doc View Source VisitListElement<TNode>(TNode) Declaration public virtual TNode VisitListElement<TNode>(TNode node) where TNode : SyntaxNode Parameters Type Name Description TNode node Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source VisitListSeparator(SyntaxToken) Declaration public virtual SyntaxToken VisitListSeparator(SyntaxToken separator) Parameters Type Name Description SyntaxToken separator Returns Type Description SyntaxToken | Improve this Doc View Source VisitLiteralExpression(LiteralExpressionSyntax) Declaration public override SyntaxNode VisitLiteralExpression(LiteralExpressionSyntax node) Parameters Type Name Description LiteralExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitLiteralExpression(Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax) | Improve this Doc View Source VisitLiteralType(LiteralTypeSyntax) Declaration public override SyntaxNode VisitLiteralType(LiteralTypeSyntax node) Parameters Type Name Description LiteralTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitLiteralType(Loretta.CodeAnalysis.Lua.Syntax.LiteralTypeSyntax) | Improve this Doc View Source VisitLocalDeclarationName(LocalDeclarationNameSyntax) Declaration public override SyntaxNode VisitLocalDeclarationName(LocalDeclarationNameSyntax node) Parameters Type Name Description LocalDeclarationNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitLocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax) | Improve this Doc View Source VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax) Declaration public override SyntaxNode VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax node) Parameters Type Name Description LocalFunctionDeclarationStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitLocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax) | Improve this Doc View Source VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax) Declaration public override SyntaxNode VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax node) Parameters Type Name Description LocalVariableDeclarationStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitLocalVariableDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax) | Improve this Doc View Source VisitMemberAccessExpression(MemberAccessExpressionSyntax) Declaration public override SyntaxNode VisitMemberAccessExpression(MemberAccessExpressionSyntax node) Parameters Type Name Description MemberAccessExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitMemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax) | Improve this Doc View Source VisitMemberFunctionName(MemberFunctionNameSyntax) Declaration public override SyntaxNode VisitMemberFunctionName(MemberFunctionNameSyntax node) Parameters Type Name Description MemberFunctionNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitMemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax) | Improve this Doc View Source VisitMethodCallExpression(MethodCallExpressionSyntax) Declaration public override SyntaxNode VisitMethodCallExpression(MethodCallExpressionSyntax node) Parameters Type Name Description MethodCallExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitMethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax) | Improve this Doc View Source VisitMethodFunctionName(MethodFunctionNameSyntax) Declaration public override SyntaxNode VisitMethodFunctionName(MethodFunctionNameSyntax node) Parameters Type Name Description MethodFunctionNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitMethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax) | Improve this Doc View Source VisitNamedParameter(NamedParameterSyntax) Declaration public override SyntaxNode VisitNamedParameter(NamedParameterSyntax node) Parameters Type Name Description NamedParameterSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitNamedParameter(Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax) | Improve this Doc View Source VisitNilableType(NilableTypeSyntax) Declaration public override SyntaxNode VisitNilableType(NilableTypeSyntax node) Parameters Type Name Description NilableTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitNilableType(Loretta.CodeAnalysis.Lua.Syntax.NilableTypeSyntax) | Improve this Doc View Source VisitNumericForStatement(NumericForStatementSyntax) Declaration public override SyntaxNode VisitNumericForStatement(NumericForStatementSyntax node) Parameters Type Name Description NumericForStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitNumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax) | Improve this Doc View Source VisitParameterList(ParameterListSyntax) Declaration public override SyntaxNode VisitParameterList(ParameterListSyntax node) Parameters Type Name Description ParameterListSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitParameterList(Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax) | Improve this Doc View Source VisitParenthesizedExpression(ParenthesizedExpressionSyntax) Declaration public override SyntaxNode VisitParenthesizedExpression(ParenthesizedExpressionSyntax node) Parameters Type Name Description ParenthesizedExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitParenthesizedExpression(Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax) | Improve this Doc View Source VisitParenthesizedType(ParenthesizedTypeSyntax) Declaration public override SyntaxNode VisitParenthesizedType(ParenthesizedTypeSyntax node) Parameters Type Name Description ParenthesizedTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitParenthesizedType(Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedTypeSyntax) | Improve this Doc View Source VisitRepeatUntilStatement(RepeatUntilStatementSyntax) Declaration public override SyntaxNode VisitRepeatUntilStatement(RepeatUntilStatementSyntax node) Parameters Type Name Description RepeatUntilStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitRepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax) | Improve this Doc View Source VisitReturnStatement(ReturnStatementSyntax) Declaration public override SyntaxNode VisitReturnStatement(ReturnStatementSyntax node) Parameters Type Name Description ReturnStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitReturnStatement(Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax) | Improve this Doc View Source VisitSimpleFunctionName(SimpleFunctionNameSyntax) Declaration public override SyntaxNode VisitSimpleFunctionName(SimpleFunctionNameSyntax node) Parameters Type Name Description SimpleFunctionNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitSimpleFunctionName(Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax) | Improve this Doc View Source VisitSimpleTypeName(SimpleTypeNameSyntax) Declaration public override SyntaxNode VisitSimpleTypeName(SimpleTypeNameSyntax node) Parameters Type Name Description SimpleTypeNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitSimpleTypeName(Loretta.CodeAnalysis.Lua.Syntax.SimpleTypeNameSyntax) | Improve this Doc View Source VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax) Declaration public override SyntaxNode VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) Parameters Type Name Description SkippedTokensTriviaSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitSkippedTokensTrivia(Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax) | Improve this Doc View Source VisitStatementList(StatementListSyntax) Declaration public override SyntaxNode VisitStatementList(StatementListSyntax node) Parameters Type Name Description StatementListSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitStatementList(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax) | Improve this Doc View Source VisitStringFunctionArgument(StringFunctionArgumentSyntax) Declaration public override SyntaxNode VisitStringFunctionArgument(StringFunctionArgumentSyntax node) Parameters Type Name Description StringFunctionArgumentSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitStringFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax) | Improve this Doc View Source VisitTableConstructorExpression(TableConstructorExpressionSyntax) Declaration public override SyntaxNode VisitTableConstructorExpression(TableConstructorExpressionSyntax node) Parameters Type Name Description TableConstructorExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTableConstructorExpression(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax) | Improve this Doc View Source VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax) Declaration public override SyntaxNode VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax node) Parameters Type Name Description TableConstructorFunctionArgumentSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTableConstructorFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax) | Improve this Doc View Source VisitTableType(TableTypeSyntax) Declaration public override SyntaxNode VisitTableType(TableTypeSyntax node) Parameters Type Name Description TableTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTableType(Loretta.CodeAnalysis.Lua.Syntax.TableTypeSyntax) | Improve this Doc View Source VisitTableTypeIndexer(TableTypeIndexerSyntax) Declaration public override SyntaxNode VisitTableTypeIndexer(TableTypeIndexerSyntax node) Parameters Type Name Description TableTypeIndexerSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTableTypeIndexer(Loretta.CodeAnalysis.Lua.Syntax.TableTypeIndexerSyntax) | Improve this Doc View Source VisitTableTypeProperty(TableTypePropertySyntax) Declaration public override SyntaxNode VisitTableTypeProperty(TableTypePropertySyntax node) Parameters Type Name Description TableTypePropertySyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTableTypeProperty(Loretta.CodeAnalysis.Lua.Syntax.TableTypePropertySyntax) | Improve this Doc View Source VisitToken(SyntaxToken) Declaration public virtual SyntaxToken VisitToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description SyntaxToken | Improve this Doc View Source VisitTrivia(SyntaxTrivia) Declaration public virtual SyntaxTrivia VisitTrivia(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description SyntaxTrivia | Improve this Doc View Source VisitTypeArgumentList(TypeArgumentListSyntax) Declaration public override SyntaxNode VisitTypeArgumentList(TypeArgumentListSyntax node) Parameters Type Name Description TypeArgumentListSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeArgumentList(Loretta.CodeAnalysis.Lua.Syntax.TypeArgumentListSyntax) | Improve this Doc View Source VisitTypeBinding(TypeBindingSyntax) Declaration public override SyntaxNode VisitTypeBinding(TypeBindingSyntax node) Parameters Type Name Description TypeBindingSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeBinding(Loretta.CodeAnalysis.Lua.Syntax.TypeBindingSyntax) | Improve this Doc View Source VisitTypeCastExpression(TypeCastExpressionSyntax) Declaration public override SyntaxNode VisitTypeCastExpression(TypeCastExpressionSyntax node) Parameters Type Name Description TypeCastExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeCastExpression(Loretta.CodeAnalysis.Lua.Syntax.TypeCastExpressionSyntax) | Improve this Doc View Source VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax) Declaration public override SyntaxNode VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax node) Parameters Type Name Description TypeDeclarationStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.TypeDeclarationStatementSyntax) | Improve this Doc View Source VisitTypedIdentifierName(TypedIdentifierNameSyntax) Declaration public override SyntaxNode VisitTypedIdentifierName(TypedIdentifierNameSyntax node) Parameters Type Name Description TypedIdentifierNameSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypedIdentifierName(Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax) | Improve this Doc View Source VisitTypeofType(TypeofTypeSyntax) Declaration public override SyntaxNode VisitTypeofType(TypeofTypeSyntax node) Parameters Type Name Description TypeofTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeofType(Loretta.CodeAnalysis.Lua.Syntax.TypeofTypeSyntax) | Improve this Doc View Source VisitTypePack(TypePackSyntax) Declaration public override SyntaxNode VisitTypePack(TypePackSyntax node) Parameters Type Name Description TypePackSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypePack(Loretta.CodeAnalysis.Lua.Syntax.TypePackSyntax) | Improve this Doc View Source VisitTypeParameter(TypeParameterSyntax) Declaration public override SyntaxNode VisitTypeParameter(TypeParameterSyntax node) Parameters Type Name Description TypeParameterSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeParameter(Loretta.CodeAnalysis.Lua.Syntax.TypeParameterSyntax) | Improve this Doc View Source VisitTypeParameterList(TypeParameterListSyntax) Declaration public override SyntaxNode VisitTypeParameterList(TypeParameterListSyntax node) Parameters Type Name Description TypeParameterListSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitTypeParameterList(Loretta.CodeAnalysis.Lua.Syntax.TypeParameterListSyntax) | Improve this Doc View Source VisitUnaryExpression(UnaryExpressionSyntax) Declaration public override SyntaxNode VisitUnaryExpression(UnaryExpressionSyntax node) Parameters Type Name Description UnaryExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitUnaryExpression(Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax) | Improve this Doc View Source VisitUnionType(UnionTypeSyntax) Declaration public override SyntaxNode VisitUnionType(UnionTypeSyntax node) Parameters Type Name Description UnionTypeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitUnionType(Loretta.CodeAnalysis.Lua.Syntax.UnionTypeSyntax) | Improve this Doc View Source VisitUnkeyedTableField(UnkeyedTableFieldSyntax) Declaration public override SyntaxNode VisitUnkeyedTableField(UnkeyedTableFieldSyntax node) Parameters Type Name Description UnkeyedTableFieldSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitUnkeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax) | Improve this Doc View Source VisitVarArgExpression(VarArgExpressionSyntax) Declaration public override SyntaxNode VisitVarArgExpression(VarArgExpressionSyntax node) Parameters Type Name Description VarArgExpressionSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitVarArgExpression(Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax) | Improve this Doc View Source VisitVarArgParameter(VarArgParameterSyntax) Declaration public override SyntaxNode VisitVarArgParameter(VarArgParameterSyntax node) Parameters Type Name Description VarArgParameterSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitVarArgParameter(Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax) | Improve this Doc View Source VisitVariableAttribute(VariableAttributeSyntax) Declaration public override SyntaxNode VisitVariableAttribute(VariableAttributeSyntax node) Parameters Type Name Description VariableAttributeSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitVariableAttribute(Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax) | Improve this Doc View Source VisitVariadicTypePack(VariadicTypePackSyntax) Declaration public override SyntaxNode VisitVariadicTypePack(VariadicTypePackSyntax node) Parameters Type Name Description VariadicTypePackSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitVariadicTypePack(Loretta.CodeAnalysis.Lua.Syntax.VariadicTypePackSyntax) | Improve this Doc View Source VisitWhileStatement(WhileStatementSyntax) Declaration public override SyntaxNode VisitWhileStatement(WhileStatementSyntax node) Parameters Type Name Description WhileStatementSyntax node Returns Type Description SyntaxNode Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<Loretta.CodeAnalysis.SyntaxNode>.VisitWhileStatement(Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax)"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxTree.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxTree.html",
    "title": "Class LuaSyntaxTree | Loretta",
    "keywords": "Class LuaSyntaxTree The parsed representation of a Lua source document. Inheritance Object SyntaxTree LuaSyntaxTree Inherited Members SyntaxTree.FilePath SyntaxTree.HasCompilationUnitRoot SyntaxTree.Length SyntaxTree.TryGetText(SourceText) SyntaxTree.GetText(CancellationToken) SyntaxTree.Encoding SyntaxTree.GetTextAsync(CancellationToken) SyntaxTree.TryGetRoot(SyntaxNode) SyntaxTree.GetReference(SyntaxNode) SyntaxTree.WithRootAndOptions(SyntaxNode, ParseOptions) SyntaxTree.WithFilePath(String) SyntaxTree.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxTree : SyntaxTree Properties | Improve this Doc View Source Options The options used by the parser to produce the syntax tree. Declaration public abstract LuaParseOptions Options { get; } Property Value Type Description LuaParseOptions Methods | Improve this Doc View Source CloneNodeAsRoot<T>(T) Produces a clone of a LuaSyntaxNode which will have current syntax tree as its parent. Caller must guarantee that if the same instance of LuaSyntaxNode makes multiple calls to this function, only one result is observable. Declaration protected T CloneNodeAsRoot<T>(T node) where T : LuaSyntaxNode Parameters Type Name Description T node The original syntax node. Returns Type Description T A clone of the original syntax node that has current LuaSyntaxTree as its parent. Type Parameters Name Description T Type of the syntax node. | Improve this Doc View Source Create(LuaSyntaxNode, LuaParseOptions, String, Encoding) Creates a new syntax tree from a syntax node. Declaration public static SyntaxTree Create(LuaSyntaxNode root, LuaParseOptions options = null, string path = \"\", Encoding encoding = null) Parameters Type Name Description LuaSyntaxNode root LuaParseOptions options String path Encoding encoding Returns Type Description SyntaxTree | Improve this Doc View Source GetChangedSpans(SyntaxTree) Produces a pessimistic list of spans that denote the regions of text in this tree that are changed from the text of the old tree. Declaration public override IList<TextSpan> GetChangedSpans(SyntaxTree oldTree) Parameters Type Name Description SyntaxTree oldTree The old tree. Cannot be null . Returns Type Description IList < TextSpan > Overrides SyntaxTree.GetChangedSpans(SyntaxTree) Remarks The list is pessimistic because it may claim more or larger regions than actually changed. | Improve this Doc View Source GetChanges(SyntaxTree) Gets a list of text changes that when applied to the old tree produce this tree. Declaration public override IList<TextChange> GetChanges(SyntaxTree oldTree) Parameters Type Name Description SyntaxTree oldTree The old tree. Cannot be null . Returns Type Description IList < TextChange > Overrides SyntaxTree.GetChanges(SyntaxTree) Remarks The list of changes may be different than the original changes that produced this tree. | Improve this Doc View Source GetCompilationUnitRoot(CancellationToken) Gets the root of the syntax tree statically typed as CompilationUnitSyntax . Declaration public CompilationUnitSyntax GetCompilationUnitRoot(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description CompilationUnitSyntax Remarks Ensure that HasCompilationUnitRoot is true for this tree prior to invoking this method. | Improve this Doc View Source GetDiagnostics(CancellationToken) Gets a list of all the diagnostics in the syntax tree. Declaration public override IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IEnumerable < Diagnostic > Remarks This method does not filter diagnostics based on #pragma s and compiler options like /nowarn, /warnaserror etc. | Improve this Doc View Source GetDiagnostics(SyntaxNode) Gets a list of all the diagnostics in the sub tree that has the specified node as its root. Declaration public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IEnumerable < Diagnostic > Overrides SyntaxTree.GetDiagnostics(SyntaxNode) Remarks This method does not filter diagnostics based on #pragma s and compiler options like /nowarn, /warnaserror etc. | Improve this Doc View Source GetDiagnostics(SyntaxNodeOrToken) Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or associated with the token and its related trivia. Declaration public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken Returns Type Description IEnumerable < Diagnostic > Overrides SyntaxTree.GetDiagnostics(SyntaxNodeOrToken) Remarks This method does not filter diagnostics based on #pragma s and compiler options like /nowarn, /warnaserror etc. | Improve this Doc View Source GetDiagnostics(SyntaxToken) Gets a list of all the diagnostics associated with the token and any related trivia. Declaration public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description IEnumerable < Diagnostic > Overrides SyntaxTree.GetDiagnostics(SyntaxToken) Remarks This method does not filter diagnostics based on #pragma s and compiler options like /nowarn, /warnaserror etc. | Improve this Doc View Source GetDiagnostics(SyntaxTrivia) Gets a list of all the diagnostics associated with the trivia. Declaration public override IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description IEnumerable < Diagnostic > Overrides SyntaxTree.GetDiagnostics(SyntaxTrivia) Remarks This method does not filter diagnostics based on #pragma s and compiler options like /nowarn, /warnaserror etc. | Improve this Doc View Source GetLineSpan(TextSpan, CancellationToken) Gets the location in terms of path, line and column for a given span. Declaration public override FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = null) Parameters Type Name Description TextSpan span Span within the tree. CancellationToken cancellationToken Cancellation token. Returns Type Description FileLinePositionSpan FileLinePositionSpan that contains path, line and column information. Remarks The values are not affected by line mapping directives ( #line ). | Improve this Doc View Source GetLocation(TextSpan) Gets a Location for the specified text span . Declaration public override Location GetLocation(TextSpan span) Parameters Type Name Description TextSpan span Returns Type Description Location Overrides SyntaxTree.GetLocation(TextSpan) | Improve this Doc View Source GetRoot(CancellationToken) Gets the root node of the syntax tree. Declaration public abstract LuaSyntaxNode GetRoot(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description LuaSyntaxNode | Improve this Doc View Source GetRootAsync(CancellationToken) Gets the root node of the syntax tree asynchronously. Declaration public virtual Task<LuaSyntaxNode> GetRootAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < LuaSyntaxNode > Remarks By default, the work associated with this method will be executed immediately on the current thread. Implementations that wish to schedule this work differently should override GetRootAsync(CancellationToken) . | Improve this Doc View Source IsEquivalentTo(SyntaxTree, Boolean) Determines if two trees are the same, disregarding trivia differences. Declaration public override bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false) Parameters Type Name Description SyntaxTree tree The tree to compare against. Boolean topLevel If true then the trees are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean Overrides SyntaxTree.IsEquivalentTo(SyntaxTree, Boolean) | Improve this Doc View Source ParseText(SourceText, LuaParseOptions, String, CancellationToken) Produces a syntax tree by parsing the source text. Declaration public static SyntaxTree ParseText(SourceText text, LuaParseOptions options = null, string path = \"\", CancellationToken cancellationToken = null) Parameters Type Name Description SourceText text LuaParseOptions options String path CancellationToken cancellationToken Returns Type Description SyntaxTree | Improve this Doc View Source ParseText(String, LuaParseOptions, String, Encoding, CancellationToken) Produces a syntax tree by parsing the source text. Declaration public static SyntaxTree ParseText(string text, LuaParseOptions options = null, string path = \"\", Encoding encoding = null, CancellationToken cancellationToken = null) Parameters Type Name Description String text LuaParseOptions options String path Encoding encoding CancellationToken cancellationToken Returns Type Description SyntaxTree | Improve this Doc View Source TryGetRoot(out LuaSyntaxNode) Gets the root node of the syntax tree if it is already available. Declaration public abstract bool TryGetRoot(out LuaSyntaxNode root) Parameters Type Name Description LuaSyntaxNode root Returns Type Description Boolean | Improve this Doc View Source WithChangedText(SourceText) Creates a new syntax based off this tree using a new source text. Declaration public override SyntaxTree WithChangedText(SourceText newText) Parameters Type Name Description SourceText newText Returns Type Description SyntaxTree Overrides SyntaxTree.WithChangedText(SourceText) Remarks If the new source text is a minor change from the current source text an incremental parse will occur reusing most of the current syntax tree internal data. Otherwise, a full parse will occur using the new source text. Extension Methods LuaExtensions.GetCompilationUnitRoot(SyntaxTree, CancellationToken) LuaExtensions.Minify(SyntaxTree) LuaExtensions.Minify(SyntaxTree, NamingStrategy) LuaExtensions.Minify(SyntaxTree, NamingStrategy, ISlotAllocator)"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.html",
    "title": "Class LuaSyntaxVisitor | Loretta",
    "keywords": "Class LuaSyntaxVisitor Represents a LuaSyntaxNode visitor that visits only the single LuaSyntaxNode passed into its Visit method. Inheritance Object LuaSyntaxVisitor LuaSyntaxWalker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxVisitor Methods | Improve this Doc View Source DefaultVisit(SyntaxNode) Declaration public virtual void DefaultVisit(SyntaxNode node) Parameters Type Name Description SyntaxNode node | Improve this Doc View Source Visit(SyntaxNode) Declaration public virtual void Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node | Improve this Doc View Source VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax) Called when the visitor visits a AnonymousFunctionExpressionSyntax node. Declaration public virtual void VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax node) Parameters Type Name Description AnonymousFunctionExpressionSyntax node | Improve this Doc View Source VisitArrayType(ArrayTypeSyntax) Called when the visitor visits a ArrayTypeSyntax node. Declaration public virtual void VisitArrayType(ArrayTypeSyntax node) Parameters Type Name Description ArrayTypeSyntax node | Improve this Doc View Source VisitAssignmentStatement(AssignmentStatementSyntax) Called when the visitor visits a AssignmentStatementSyntax node. Declaration public virtual void VisitAssignmentStatement(AssignmentStatementSyntax node) Parameters Type Name Description AssignmentStatementSyntax node | Improve this Doc View Source VisitBinaryExpression(BinaryExpressionSyntax) Called when the visitor visits a BinaryExpressionSyntax node. Declaration public virtual void VisitBinaryExpression(BinaryExpressionSyntax node) Parameters Type Name Description BinaryExpressionSyntax node | Improve this Doc View Source VisitBreakStatement(BreakStatementSyntax) Called when the visitor visits a BreakStatementSyntax node. Declaration public virtual void VisitBreakStatement(BreakStatementSyntax node) Parameters Type Name Description BreakStatementSyntax node | Improve this Doc View Source VisitCompilationUnit(CompilationUnitSyntax) Called when the visitor visits a CompilationUnitSyntax node. Declaration public virtual void VisitCompilationUnit(CompilationUnitSyntax node) Parameters Type Name Description CompilationUnitSyntax node | Improve this Doc View Source VisitCompositeTypeName(CompositeTypeNameSyntax) Called when the visitor visits a CompositeTypeNameSyntax node. Declaration public virtual void VisitCompositeTypeName(CompositeTypeNameSyntax node) Parameters Type Name Description CompositeTypeNameSyntax node | Improve this Doc View Source VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax) Called when the visitor visits a CompoundAssignmentStatementSyntax node. Declaration public virtual void VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax node) Parameters Type Name Description CompoundAssignmentStatementSyntax node | Improve this Doc View Source VisitContinueStatement(ContinueStatementSyntax) Called when the visitor visits a ContinueStatementSyntax node. Declaration public virtual void VisitContinueStatement(ContinueStatementSyntax node) Parameters Type Name Description ContinueStatementSyntax node | Improve this Doc View Source VisitDoStatement(DoStatementSyntax) Called when the visitor visits a DoStatementSyntax node. Declaration public virtual void VisitDoStatement(DoStatementSyntax node) Parameters Type Name Description DoStatementSyntax node | Improve this Doc View Source VisitElementAccessExpression(ElementAccessExpressionSyntax) Called when the visitor visits a ElementAccessExpressionSyntax node. Declaration public virtual void VisitElementAccessExpression(ElementAccessExpressionSyntax node) Parameters Type Name Description ElementAccessExpressionSyntax node | Improve this Doc View Source VisitElseClause(ElseClauseSyntax) Called when the visitor visits a ElseClauseSyntax node. Declaration public virtual void VisitElseClause(ElseClauseSyntax node) Parameters Type Name Description ElseClauseSyntax node | Improve this Doc View Source VisitElseIfClause(ElseIfClauseSyntax) Called when the visitor visits a ElseIfClauseSyntax node. Declaration public virtual void VisitElseIfClause(ElseIfClauseSyntax node) Parameters Type Name Description ElseIfClauseSyntax node | Improve this Doc View Source VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax) Called when the visitor visits a ElseIfExpressionClauseSyntax node. Declaration public virtual void VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax node) Parameters Type Name Description ElseIfExpressionClauseSyntax node | Improve this Doc View Source VisitEmptyStatement(EmptyStatementSyntax) Called when the visitor visits a EmptyStatementSyntax node. Declaration public virtual void VisitEmptyStatement(EmptyStatementSyntax node) Parameters Type Name Description EmptyStatementSyntax node | Improve this Doc View Source VisitEqualsType(EqualsTypeSyntax) Called when the visitor visits a EqualsTypeSyntax node. Declaration public virtual void VisitEqualsType(EqualsTypeSyntax node) Parameters Type Name Description EqualsTypeSyntax node | Improve this Doc View Source VisitEqualsValuesClause(EqualsValuesClauseSyntax) Called when the visitor visits a EqualsValuesClauseSyntax node. Declaration public virtual void VisitEqualsValuesClause(EqualsValuesClauseSyntax node) Parameters Type Name Description EqualsValuesClauseSyntax node | Improve this Doc View Source VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax) Called when the visitor visits a ExpressionKeyedTableFieldSyntax node. Declaration public virtual void VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax node) Parameters Type Name Description ExpressionKeyedTableFieldSyntax node | Improve this Doc View Source VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax) Called when the visitor visits a ExpressionListFunctionArgumentSyntax node. Declaration public virtual void VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax node) Parameters Type Name Description ExpressionListFunctionArgumentSyntax node | Improve this Doc View Source VisitExpressionStatement(ExpressionStatementSyntax) Called when the visitor visits a ExpressionStatementSyntax node. Declaration public virtual void VisitExpressionStatement(ExpressionStatementSyntax node) Parameters Type Name Description ExpressionStatementSyntax node | Improve this Doc View Source VisitFunctionCallExpression(FunctionCallExpressionSyntax) Called when the visitor visits a FunctionCallExpressionSyntax node. Declaration public virtual void VisitFunctionCallExpression(FunctionCallExpressionSyntax node) Parameters Type Name Description FunctionCallExpressionSyntax node | Improve this Doc View Source VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax) Called when the visitor visits a FunctionDeclarationStatementSyntax node. Declaration public virtual void VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax node) Parameters Type Name Description FunctionDeclarationStatementSyntax node | Improve this Doc View Source VisitFunctionType(FunctionTypeSyntax) Called when the visitor visits a FunctionTypeSyntax node. Declaration public virtual void VisitFunctionType(FunctionTypeSyntax node) Parameters Type Name Description FunctionTypeSyntax node | Improve this Doc View Source VisitGenericForStatement(GenericForStatementSyntax) Called when the visitor visits a GenericForStatementSyntax node. Declaration public virtual void VisitGenericForStatement(GenericForStatementSyntax node) Parameters Type Name Description GenericForStatementSyntax node | Improve this Doc View Source VisitGenericTypePack(GenericTypePackSyntax) Called when the visitor visits a GenericTypePackSyntax node. Declaration public virtual void VisitGenericTypePack(GenericTypePackSyntax node) Parameters Type Name Description GenericTypePackSyntax node | Improve this Doc View Source VisitGotoLabelStatement(GotoLabelStatementSyntax) Called when the visitor visits a GotoLabelStatementSyntax node. Declaration public virtual void VisitGotoLabelStatement(GotoLabelStatementSyntax node) Parameters Type Name Description GotoLabelStatementSyntax node | Improve this Doc View Source VisitGotoStatement(GotoStatementSyntax) Called when the visitor visits a GotoStatementSyntax node. Declaration public virtual void VisitGotoStatement(GotoStatementSyntax node) Parameters Type Name Description GotoStatementSyntax node | Improve this Doc View Source VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax) Called when the visitor visits a IdentifierKeyedTableFieldSyntax node. Declaration public virtual void VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax node) Parameters Type Name Description IdentifierKeyedTableFieldSyntax node | Improve this Doc View Source VisitIdentifierName(IdentifierNameSyntax) Called when the visitor visits a IdentifierNameSyntax node. Declaration public virtual void VisitIdentifierName(IdentifierNameSyntax node) Parameters Type Name Description IdentifierNameSyntax node | Improve this Doc View Source VisitIfExpression(IfExpressionSyntax) Called when the visitor visits a IfExpressionSyntax node. Declaration public virtual void VisitIfExpression(IfExpressionSyntax node) Parameters Type Name Description IfExpressionSyntax node | Improve this Doc View Source VisitIfStatement(IfStatementSyntax) Called when the visitor visits a IfStatementSyntax node. Declaration public virtual void VisitIfStatement(IfStatementSyntax node) Parameters Type Name Description IfStatementSyntax node | Improve this Doc View Source VisitIntersectionType(IntersectionTypeSyntax) Called when the visitor visits a IntersectionTypeSyntax node. Declaration public virtual void VisitIntersectionType(IntersectionTypeSyntax node) Parameters Type Name Description IntersectionTypeSyntax node | Improve this Doc View Source VisitLiteralExpression(LiteralExpressionSyntax) Called when the visitor visits a LiteralExpressionSyntax node. Declaration public virtual void VisitLiteralExpression(LiteralExpressionSyntax node) Parameters Type Name Description LiteralExpressionSyntax node | Improve this Doc View Source VisitLiteralType(LiteralTypeSyntax) Called when the visitor visits a LiteralTypeSyntax node. Declaration public virtual void VisitLiteralType(LiteralTypeSyntax node) Parameters Type Name Description LiteralTypeSyntax node | Improve this Doc View Source VisitLocalDeclarationName(LocalDeclarationNameSyntax) Called when the visitor visits a LocalDeclarationNameSyntax node. Declaration public virtual void VisitLocalDeclarationName(LocalDeclarationNameSyntax node) Parameters Type Name Description LocalDeclarationNameSyntax node | Improve this Doc View Source VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax) Called when the visitor visits a LocalFunctionDeclarationStatementSyntax node. Declaration public virtual void VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax node) Parameters Type Name Description LocalFunctionDeclarationStatementSyntax node | Improve this Doc View Source VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax) Called when the visitor visits a LocalVariableDeclarationStatementSyntax node. Declaration public virtual void VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax node) Parameters Type Name Description LocalVariableDeclarationStatementSyntax node | Improve this Doc View Source VisitMemberAccessExpression(MemberAccessExpressionSyntax) Called when the visitor visits a MemberAccessExpressionSyntax node. Declaration public virtual void VisitMemberAccessExpression(MemberAccessExpressionSyntax node) Parameters Type Name Description MemberAccessExpressionSyntax node | Improve this Doc View Source VisitMemberFunctionName(MemberFunctionNameSyntax) Called when the visitor visits a MemberFunctionNameSyntax node. Declaration public virtual void VisitMemberFunctionName(MemberFunctionNameSyntax node) Parameters Type Name Description MemberFunctionNameSyntax node | Improve this Doc View Source VisitMethodCallExpression(MethodCallExpressionSyntax) Called when the visitor visits a MethodCallExpressionSyntax node. Declaration public virtual void VisitMethodCallExpression(MethodCallExpressionSyntax node) Parameters Type Name Description MethodCallExpressionSyntax node | Improve this Doc View Source VisitMethodFunctionName(MethodFunctionNameSyntax) Called when the visitor visits a MethodFunctionNameSyntax node. Declaration public virtual void VisitMethodFunctionName(MethodFunctionNameSyntax node) Parameters Type Name Description MethodFunctionNameSyntax node | Improve this Doc View Source VisitNamedParameter(NamedParameterSyntax) Called when the visitor visits a NamedParameterSyntax node. Declaration public virtual void VisitNamedParameter(NamedParameterSyntax node) Parameters Type Name Description NamedParameterSyntax node | Improve this Doc View Source VisitNilableType(NilableTypeSyntax) Called when the visitor visits a NilableTypeSyntax node. Declaration public virtual void VisitNilableType(NilableTypeSyntax node) Parameters Type Name Description NilableTypeSyntax node | Improve this Doc View Source VisitNumericForStatement(NumericForStatementSyntax) Called when the visitor visits a NumericForStatementSyntax node. Declaration public virtual void VisitNumericForStatement(NumericForStatementSyntax node) Parameters Type Name Description NumericForStatementSyntax node | Improve this Doc View Source VisitParameterList(ParameterListSyntax) Called when the visitor visits a ParameterListSyntax node. Declaration public virtual void VisitParameterList(ParameterListSyntax node) Parameters Type Name Description ParameterListSyntax node | Improve this Doc View Source VisitParenthesizedExpression(ParenthesizedExpressionSyntax) Called when the visitor visits a ParenthesizedExpressionSyntax node. Declaration public virtual void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node) Parameters Type Name Description ParenthesizedExpressionSyntax node | Improve this Doc View Source VisitParenthesizedType(ParenthesizedTypeSyntax) Called when the visitor visits a ParenthesizedTypeSyntax node. Declaration public virtual void VisitParenthesizedType(ParenthesizedTypeSyntax node) Parameters Type Name Description ParenthesizedTypeSyntax node | Improve this Doc View Source VisitRepeatUntilStatement(RepeatUntilStatementSyntax) Called when the visitor visits a RepeatUntilStatementSyntax node. Declaration public virtual void VisitRepeatUntilStatement(RepeatUntilStatementSyntax node) Parameters Type Name Description RepeatUntilStatementSyntax node | Improve this Doc View Source VisitReturnStatement(ReturnStatementSyntax) Called when the visitor visits a ReturnStatementSyntax node. Declaration public virtual void VisitReturnStatement(ReturnStatementSyntax node) Parameters Type Name Description ReturnStatementSyntax node | Improve this Doc View Source VisitSimpleFunctionName(SimpleFunctionNameSyntax) Called when the visitor visits a SimpleFunctionNameSyntax node. Declaration public virtual void VisitSimpleFunctionName(SimpleFunctionNameSyntax node) Parameters Type Name Description SimpleFunctionNameSyntax node | Improve this Doc View Source VisitSimpleTypeName(SimpleTypeNameSyntax) Called when the visitor visits a SimpleTypeNameSyntax node. Declaration public virtual void VisitSimpleTypeName(SimpleTypeNameSyntax node) Parameters Type Name Description SimpleTypeNameSyntax node | Improve this Doc View Source VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax) Called when the visitor visits a SkippedTokensTriviaSyntax node. Declaration public virtual void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) Parameters Type Name Description SkippedTokensTriviaSyntax node | Improve this Doc View Source VisitStatementList(StatementListSyntax) Called when the visitor visits a StatementListSyntax node. Declaration public virtual void VisitStatementList(StatementListSyntax node) Parameters Type Name Description StatementListSyntax node | Improve this Doc View Source VisitStringFunctionArgument(StringFunctionArgumentSyntax) Called when the visitor visits a StringFunctionArgumentSyntax node. Declaration public virtual void VisitStringFunctionArgument(StringFunctionArgumentSyntax node) Parameters Type Name Description StringFunctionArgumentSyntax node | Improve this Doc View Source VisitTableConstructorExpression(TableConstructorExpressionSyntax) Called when the visitor visits a TableConstructorExpressionSyntax node. Declaration public virtual void VisitTableConstructorExpression(TableConstructorExpressionSyntax node) Parameters Type Name Description TableConstructorExpressionSyntax node | Improve this Doc View Source VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax) Called when the visitor visits a TableConstructorFunctionArgumentSyntax node. Declaration public virtual void VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax node) Parameters Type Name Description TableConstructorFunctionArgumentSyntax node | Improve this Doc View Source VisitTableType(TableTypeSyntax) Called when the visitor visits a TableTypeSyntax node. Declaration public virtual void VisitTableType(TableTypeSyntax node) Parameters Type Name Description TableTypeSyntax node | Improve this Doc View Source VisitTableTypeIndexer(TableTypeIndexerSyntax) Called when the visitor visits a TableTypeIndexerSyntax node. Declaration public virtual void VisitTableTypeIndexer(TableTypeIndexerSyntax node) Parameters Type Name Description TableTypeIndexerSyntax node | Improve this Doc View Source VisitTableTypeProperty(TableTypePropertySyntax) Called when the visitor visits a TableTypePropertySyntax node. Declaration public virtual void VisitTableTypeProperty(TableTypePropertySyntax node) Parameters Type Name Description TableTypePropertySyntax node | Improve this Doc View Source VisitTypeArgumentList(TypeArgumentListSyntax) Called when the visitor visits a TypeArgumentListSyntax node. Declaration public virtual void VisitTypeArgumentList(TypeArgumentListSyntax node) Parameters Type Name Description TypeArgumentListSyntax node | Improve this Doc View Source VisitTypeBinding(TypeBindingSyntax) Called when the visitor visits a TypeBindingSyntax node. Declaration public virtual void VisitTypeBinding(TypeBindingSyntax node) Parameters Type Name Description TypeBindingSyntax node | Improve this Doc View Source VisitTypeCastExpression(TypeCastExpressionSyntax) Called when the visitor visits a TypeCastExpressionSyntax node. Declaration public virtual void VisitTypeCastExpression(TypeCastExpressionSyntax node) Parameters Type Name Description TypeCastExpressionSyntax node | Improve this Doc View Source VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax) Called when the visitor visits a TypeDeclarationStatementSyntax node. Declaration public virtual void VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax node) Parameters Type Name Description TypeDeclarationStatementSyntax node | Improve this Doc View Source VisitTypedIdentifierName(TypedIdentifierNameSyntax) Called when the visitor visits a TypedIdentifierNameSyntax node. Declaration public virtual void VisitTypedIdentifierName(TypedIdentifierNameSyntax node) Parameters Type Name Description TypedIdentifierNameSyntax node | Improve this Doc View Source VisitTypeofType(TypeofTypeSyntax) Called when the visitor visits a TypeofTypeSyntax node. Declaration public virtual void VisitTypeofType(TypeofTypeSyntax node) Parameters Type Name Description TypeofTypeSyntax node | Improve this Doc View Source VisitTypePack(TypePackSyntax) Called when the visitor visits a TypePackSyntax node. Declaration public virtual void VisitTypePack(TypePackSyntax node) Parameters Type Name Description TypePackSyntax node | Improve this Doc View Source VisitTypeParameter(TypeParameterSyntax) Called when the visitor visits a TypeParameterSyntax node. Declaration public virtual void VisitTypeParameter(TypeParameterSyntax node) Parameters Type Name Description TypeParameterSyntax node | Improve this Doc View Source VisitTypeParameterList(TypeParameterListSyntax) Called when the visitor visits a TypeParameterListSyntax node. Declaration public virtual void VisitTypeParameterList(TypeParameterListSyntax node) Parameters Type Name Description TypeParameterListSyntax node | Improve this Doc View Source VisitUnaryExpression(UnaryExpressionSyntax) Called when the visitor visits a UnaryExpressionSyntax node. Declaration public virtual void VisitUnaryExpression(UnaryExpressionSyntax node) Parameters Type Name Description UnaryExpressionSyntax node | Improve this Doc View Source VisitUnionType(UnionTypeSyntax) Called when the visitor visits a UnionTypeSyntax node. Declaration public virtual void VisitUnionType(UnionTypeSyntax node) Parameters Type Name Description UnionTypeSyntax node | Improve this Doc View Source VisitUnkeyedTableField(UnkeyedTableFieldSyntax) Called when the visitor visits a UnkeyedTableFieldSyntax node. Declaration public virtual void VisitUnkeyedTableField(UnkeyedTableFieldSyntax node) Parameters Type Name Description UnkeyedTableFieldSyntax node | Improve this Doc View Source VisitVarArgExpression(VarArgExpressionSyntax) Called when the visitor visits a VarArgExpressionSyntax node. Declaration public virtual void VisitVarArgExpression(VarArgExpressionSyntax node) Parameters Type Name Description VarArgExpressionSyntax node | Improve this Doc View Source VisitVarArgParameter(VarArgParameterSyntax) Called when the visitor visits a VarArgParameterSyntax node. Declaration public virtual void VisitVarArgParameter(VarArgParameterSyntax node) Parameters Type Name Description VarArgParameterSyntax node | Improve this Doc View Source VisitVariableAttribute(VariableAttributeSyntax) Called when the visitor visits a VariableAttributeSyntax node. Declaration public virtual void VisitVariableAttribute(VariableAttributeSyntax node) Parameters Type Name Description VariableAttributeSyntax node | Improve this Doc View Source VisitVariadicTypePack(VariadicTypePackSyntax) Called when the visitor visits a VariadicTypePackSyntax node. Declaration public virtual void VisitVariadicTypePack(VariadicTypePackSyntax node) Parameters Type Name Description VariadicTypePackSyntax node | Improve this Doc View Source VisitWhileStatement(WhileStatementSyntax) Called when the visitor visits a WhileStatementSyntax node. Declaration public virtual void VisitWhileStatement(WhileStatementSyntax node) Parameters Type Name Description WhileStatementSyntax node"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor-1.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor-1.html",
    "title": "Class LuaSyntaxVisitor<TResult> | Loretta",
    "keywords": "Class LuaSyntaxVisitor<TResult> Represents a LuaSyntaxNode visitor that visits only the single LuaSyntaxNode passed into its Visit method and produces a value of the type specified by the TResult parameter. Inheritance Object LuaSyntaxVisitor<TResult> LuaSyntaxRewriter Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxVisitor<TResult> Type Parameters Name Description TResult The type of the return value this visitor's Visit method. Methods | Improve this Doc View Source DefaultVisit(SyntaxNode) Declaration public virtual TResult DefaultVisit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description TResult | Improve this Doc View Source Visit(SyntaxNode) Declaration public virtual TResult Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description TResult | Improve this Doc View Source VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax) Called when the visitor visits a AnonymousFunctionExpressionSyntax node. Declaration public virtual TResult VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax node) Parameters Type Name Description AnonymousFunctionExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitArrayType(ArrayTypeSyntax) Called when the visitor visits a ArrayTypeSyntax node. Declaration public virtual TResult VisitArrayType(ArrayTypeSyntax node) Parameters Type Name Description ArrayTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitAssignmentStatement(AssignmentStatementSyntax) Called when the visitor visits a AssignmentStatementSyntax node. Declaration public virtual TResult VisitAssignmentStatement(AssignmentStatementSyntax node) Parameters Type Name Description AssignmentStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitBinaryExpression(BinaryExpressionSyntax) Called when the visitor visits a BinaryExpressionSyntax node. Declaration public virtual TResult VisitBinaryExpression(BinaryExpressionSyntax node) Parameters Type Name Description BinaryExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitBreakStatement(BreakStatementSyntax) Called when the visitor visits a BreakStatementSyntax node. Declaration public virtual TResult VisitBreakStatement(BreakStatementSyntax node) Parameters Type Name Description BreakStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitCompilationUnit(CompilationUnitSyntax) Called when the visitor visits a CompilationUnitSyntax node. Declaration public virtual TResult VisitCompilationUnit(CompilationUnitSyntax node) Parameters Type Name Description CompilationUnitSyntax node Returns Type Description TResult | Improve this Doc View Source VisitCompositeTypeName(CompositeTypeNameSyntax) Called when the visitor visits a CompositeTypeNameSyntax node. Declaration public virtual TResult VisitCompositeTypeName(CompositeTypeNameSyntax node) Parameters Type Name Description CompositeTypeNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax) Called when the visitor visits a CompoundAssignmentStatementSyntax node. Declaration public virtual TResult VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax node) Parameters Type Name Description CompoundAssignmentStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitContinueStatement(ContinueStatementSyntax) Called when the visitor visits a ContinueStatementSyntax node. Declaration public virtual TResult VisitContinueStatement(ContinueStatementSyntax node) Parameters Type Name Description ContinueStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitDoStatement(DoStatementSyntax) Called when the visitor visits a DoStatementSyntax node. Declaration public virtual TResult VisitDoStatement(DoStatementSyntax node) Parameters Type Name Description DoStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitElementAccessExpression(ElementAccessExpressionSyntax) Called when the visitor visits a ElementAccessExpressionSyntax node. Declaration public virtual TResult VisitElementAccessExpression(ElementAccessExpressionSyntax node) Parameters Type Name Description ElementAccessExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitElseClause(ElseClauseSyntax) Called when the visitor visits a ElseClauseSyntax node. Declaration public virtual TResult VisitElseClause(ElseClauseSyntax node) Parameters Type Name Description ElseClauseSyntax node Returns Type Description TResult | Improve this Doc View Source VisitElseIfClause(ElseIfClauseSyntax) Called when the visitor visits a ElseIfClauseSyntax node. Declaration public virtual TResult VisitElseIfClause(ElseIfClauseSyntax node) Parameters Type Name Description ElseIfClauseSyntax node Returns Type Description TResult | Improve this Doc View Source VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax) Called when the visitor visits a ElseIfExpressionClauseSyntax node. Declaration public virtual TResult VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax node) Parameters Type Name Description ElseIfExpressionClauseSyntax node Returns Type Description TResult | Improve this Doc View Source VisitEmptyStatement(EmptyStatementSyntax) Called when the visitor visits a EmptyStatementSyntax node. Declaration public virtual TResult VisitEmptyStatement(EmptyStatementSyntax node) Parameters Type Name Description EmptyStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitEqualsType(EqualsTypeSyntax) Called when the visitor visits a EqualsTypeSyntax node. Declaration public virtual TResult VisitEqualsType(EqualsTypeSyntax node) Parameters Type Name Description EqualsTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitEqualsValuesClause(EqualsValuesClauseSyntax) Called when the visitor visits a EqualsValuesClauseSyntax node. Declaration public virtual TResult VisitEqualsValuesClause(EqualsValuesClauseSyntax node) Parameters Type Name Description EqualsValuesClauseSyntax node Returns Type Description TResult | Improve this Doc View Source VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax) Called when the visitor visits a ExpressionKeyedTableFieldSyntax node. Declaration public virtual TResult VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax node) Parameters Type Name Description ExpressionKeyedTableFieldSyntax node Returns Type Description TResult | Improve this Doc View Source VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax) Called when the visitor visits a ExpressionListFunctionArgumentSyntax node. Declaration public virtual TResult VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax node) Parameters Type Name Description ExpressionListFunctionArgumentSyntax node Returns Type Description TResult | Improve this Doc View Source VisitExpressionStatement(ExpressionStatementSyntax) Called when the visitor visits a ExpressionStatementSyntax node. Declaration public virtual TResult VisitExpressionStatement(ExpressionStatementSyntax node) Parameters Type Name Description ExpressionStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitFunctionCallExpression(FunctionCallExpressionSyntax) Called when the visitor visits a FunctionCallExpressionSyntax node. Declaration public virtual TResult VisitFunctionCallExpression(FunctionCallExpressionSyntax node) Parameters Type Name Description FunctionCallExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax) Called when the visitor visits a FunctionDeclarationStatementSyntax node. Declaration public virtual TResult VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax node) Parameters Type Name Description FunctionDeclarationStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitFunctionType(FunctionTypeSyntax) Called when the visitor visits a FunctionTypeSyntax node. Declaration public virtual TResult VisitFunctionType(FunctionTypeSyntax node) Parameters Type Name Description FunctionTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitGenericForStatement(GenericForStatementSyntax) Called when the visitor visits a GenericForStatementSyntax node. Declaration public virtual TResult VisitGenericForStatement(GenericForStatementSyntax node) Parameters Type Name Description GenericForStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitGenericTypePack(GenericTypePackSyntax) Called when the visitor visits a GenericTypePackSyntax node. Declaration public virtual TResult VisitGenericTypePack(GenericTypePackSyntax node) Parameters Type Name Description GenericTypePackSyntax node Returns Type Description TResult | Improve this Doc View Source VisitGotoLabelStatement(GotoLabelStatementSyntax) Called when the visitor visits a GotoLabelStatementSyntax node. Declaration public virtual TResult VisitGotoLabelStatement(GotoLabelStatementSyntax node) Parameters Type Name Description GotoLabelStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitGotoStatement(GotoStatementSyntax) Called when the visitor visits a GotoStatementSyntax node. Declaration public virtual TResult VisitGotoStatement(GotoStatementSyntax node) Parameters Type Name Description GotoStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax) Called when the visitor visits a IdentifierKeyedTableFieldSyntax node. Declaration public virtual TResult VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax node) Parameters Type Name Description IdentifierKeyedTableFieldSyntax node Returns Type Description TResult | Improve this Doc View Source VisitIdentifierName(IdentifierNameSyntax) Called when the visitor visits a IdentifierNameSyntax node. Declaration public virtual TResult VisitIdentifierName(IdentifierNameSyntax node) Parameters Type Name Description IdentifierNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitIfExpression(IfExpressionSyntax) Called when the visitor visits a IfExpressionSyntax node. Declaration public virtual TResult VisitIfExpression(IfExpressionSyntax node) Parameters Type Name Description IfExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitIfStatement(IfStatementSyntax) Called when the visitor visits a IfStatementSyntax node. Declaration public virtual TResult VisitIfStatement(IfStatementSyntax node) Parameters Type Name Description IfStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitIntersectionType(IntersectionTypeSyntax) Called when the visitor visits a IntersectionTypeSyntax node. Declaration public virtual TResult VisitIntersectionType(IntersectionTypeSyntax node) Parameters Type Name Description IntersectionTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitLiteralExpression(LiteralExpressionSyntax) Called when the visitor visits a LiteralExpressionSyntax node. Declaration public virtual TResult VisitLiteralExpression(LiteralExpressionSyntax node) Parameters Type Name Description LiteralExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitLiteralType(LiteralTypeSyntax) Called when the visitor visits a LiteralTypeSyntax node. Declaration public virtual TResult VisitLiteralType(LiteralTypeSyntax node) Parameters Type Name Description LiteralTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitLocalDeclarationName(LocalDeclarationNameSyntax) Called when the visitor visits a LocalDeclarationNameSyntax node. Declaration public virtual TResult VisitLocalDeclarationName(LocalDeclarationNameSyntax node) Parameters Type Name Description LocalDeclarationNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax) Called when the visitor visits a LocalFunctionDeclarationStatementSyntax node. Declaration public virtual TResult VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax node) Parameters Type Name Description LocalFunctionDeclarationStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax) Called when the visitor visits a LocalVariableDeclarationStatementSyntax node. Declaration public virtual TResult VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax node) Parameters Type Name Description LocalVariableDeclarationStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitMemberAccessExpression(MemberAccessExpressionSyntax) Called when the visitor visits a MemberAccessExpressionSyntax node. Declaration public virtual TResult VisitMemberAccessExpression(MemberAccessExpressionSyntax node) Parameters Type Name Description MemberAccessExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitMemberFunctionName(MemberFunctionNameSyntax) Called when the visitor visits a MemberFunctionNameSyntax node. Declaration public virtual TResult VisitMemberFunctionName(MemberFunctionNameSyntax node) Parameters Type Name Description MemberFunctionNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitMethodCallExpression(MethodCallExpressionSyntax) Called when the visitor visits a MethodCallExpressionSyntax node. Declaration public virtual TResult VisitMethodCallExpression(MethodCallExpressionSyntax node) Parameters Type Name Description MethodCallExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitMethodFunctionName(MethodFunctionNameSyntax) Called when the visitor visits a MethodFunctionNameSyntax node. Declaration public virtual TResult VisitMethodFunctionName(MethodFunctionNameSyntax node) Parameters Type Name Description MethodFunctionNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitNamedParameter(NamedParameterSyntax) Called when the visitor visits a NamedParameterSyntax node. Declaration public virtual TResult VisitNamedParameter(NamedParameterSyntax node) Parameters Type Name Description NamedParameterSyntax node Returns Type Description TResult | Improve this Doc View Source VisitNilableType(NilableTypeSyntax) Called when the visitor visits a NilableTypeSyntax node. Declaration public virtual TResult VisitNilableType(NilableTypeSyntax node) Parameters Type Name Description NilableTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitNumericForStatement(NumericForStatementSyntax) Called when the visitor visits a NumericForStatementSyntax node. Declaration public virtual TResult VisitNumericForStatement(NumericForStatementSyntax node) Parameters Type Name Description NumericForStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitParameterList(ParameterListSyntax) Called when the visitor visits a ParameterListSyntax node. Declaration public virtual TResult VisitParameterList(ParameterListSyntax node) Parameters Type Name Description ParameterListSyntax node Returns Type Description TResult | Improve this Doc View Source VisitParenthesizedExpression(ParenthesizedExpressionSyntax) Called when the visitor visits a ParenthesizedExpressionSyntax node. Declaration public virtual TResult VisitParenthesizedExpression(ParenthesizedExpressionSyntax node) Parameters Type Name Description ParenthesizedExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitParenthesizedType(ParenthesizedTypeSyntax) Called when the visitor visits a ParenthesizedTypeSyntax node. Declaration public virtual TResult VisitParenthesizedType(ParenthesizedTypeSyntax node) Parameters Type Name Description ParenthesizedTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitRepeatUntilStatement(RepeatUntilStatementSyntax) Called when the visitor visits a RepeatUntilStatementSyntax node. Declaration public virtual TResult VisitRepeatUntilStatement(RepeatUntilStatementSyntax node) Parameters Type Name Description RepeatUntilStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitReturnStatement(ReturnStatementSyntax) Called when the visitor visits a ReturnStatementSyntax node. Declaration public virtual TResult VisitReturnStatement(ReturnStatementSyntax node) Parameters Type Name Description ReturnStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitSimpleFunctionName(SimpleFunctionNameSyntax) Called when the visitor visits a SimpleFunctionNameSyntax node. Declaration public virtual TResult VisitSimpleFunctionName(SimpleFunctionNameSyntax node) Parameters Type Name Description SimpleFunctionNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitSimpleTypeName(SimpleTypeNameSyntax) Called when the visitor visits a SimpleTypeNameSyntax node. Declaration public virtual TResult VisitSimpleTypeName(SimpleTypeNameSyntax node) Parameters Type Name Description SimpleTypeNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax) Called when the visitor visits a SkippedTokensTriviaSyntax node. Declaration public virtual TResult VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node) Parameters Type Name Description SkippedTokensTriviaSyntax node Returns Type Description TResult | Improve this Doc View Source VisitStatementList(StatementListSyntax) Called when the visitor visits a StatementListSyntax node. Declaration public virtual TResult VisitStatementList(StatementListSyntax node) Parameters Type Name Description StatementListSyntax node Returns Type Description TResult | Improve this Doc View Source VisitStringFunctionArgument(StringFunctionArgumentSyntax) Called when the visitor visits a StringFunctionArgumentSyntax node. Declaration public virtual TResult VisitStringFunctionArgument(StringFunctionArgumentSyntax node) Parameters Type Name Description StringFunctionArgumentSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTableConstructorExpression(TableConstructorExpressionSyntax) Called when the visitor visits a TableConstructorExpressionSyntax node. Declaration public virtual TResult VisitTableConstructorExpression(TableConstructorExpressionSyntax node) Parameters Type Name Description TableConstructorExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax) Called when the visitor visits a TableConstructorFunctionArgumentSyntax node. Declaration public virtual TResult VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax node) Parameters Type Name Description TableConstructorFunctionArgumentSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTableType(TableTypeSyntax) Called when the visitor visits a TableTypeSyntax node. Declaration public virtual TResult VisitTableType(TableTypeSyntax node) Parameters Type Name Description TableTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTableTypeIndexer(TableTypeIndexerSyntax) Called when the visitor visits a TableTypeIndexerSyntax node. Declaration public virtual TResult VisitTableTypeIndexer(TableTypeIndexerSyntax node) Parameters Type Name Description TableTypeIndexerSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTableTypeProperty(TableTypePropertySyntax) Called when the visitor visits a TableTypePropertySyntax node. Declaration public virtual TResult VisitTableTypeProperty(TableTypePropertySyntax node) Parameters Type Name Description TableTypePropertySyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeArgumentList(TypeArgumentListSyntax) Called when the visitor visits a TypeArgumentListSyntax node. Declaration public virtual TResult VisitTypeArgumentList(TypeArgumentListSyntax node) Parameters Type Name Description TypeArgumentListSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeBinding(TypeBindingSyntax) Called when the visitor visits a TypeBindingSyntax node. Declaration public virtual TResult VisitTypeBinding(TypeBindingSyntax node) Parameters Type Name Description TypeBindingSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeCastExpression(TypeCastExpressionSyntax) Called when the visitor visits a TypeCastExpressionSyntax node. Declaration public virtual TResult VisitTypeCastExpression(TypeCastExpressionSyntax node) Parameters Type Name Description TypeCastExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax) Called when the visitor visits a TypeDeclarationStatementSyntax node. Declaration public virtual TResult VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax node) Parameters Type Name Description TypeDeclarationStatementSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypedIdentifierName(TypedIdentifierNameSyntax) Called when the visitor visits a TypedIdentifierNameSyntax node. Declaration public virtual TResult VisitTypedIdentifierName(TypedIdentifierNameSyntax node) Parameters Type Name Description TypedIdentifierNameSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeofType(TypeofTypeSyntax) Called when the visitor visits a TypeofTypeSyntax node. Declaration public virtual TResult VisitTypeofType(TypeofTypeSyntax node) Parameters Type Name Description TypeofTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypePack(TypePackSyntax) Called when the visitor visits a TypePackSyntax node. Declaration public virtual TResult VisitTypePack(TypePackSyntax node) Parameters Type Name Description TypePackSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeParameter(TypeParameterSyntax) Called when the visitor visits a TypeParameterSyntax node. Declaration public virtual TResult VisitTypeParameter(TypeParameterSyntax node) Parameters Type Name Description TypeParameterSyntax node Returns Type Description TResult | Improve this Doc View Source VisitTypeParameterList(TypeParameterListSyntax) Called when the visitor visits a TypeParameterListSyntax node. Declaration public virtual TResult VisitTypeParameterList(TypeParameterListSyntax node) Parameters Type Name Description TypeParameterListSyntax node Returns Type Description TResult | Improve this Doc View Source VisitUnaryExpression(UnaryExpressionSyntax) Called when the visitor visits a UnaryExpressionSyntax node. Declaration public virtual TResult VisitUnaryExpression(UnaryExpressionSyntax node) Parameters Type Name Description UnaryExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitUnionType(UnionTypeSyntax) Called when the visitor visits a UnionTypeSyntax node. Declaration public virtual TResult VisitUnionType(UnionTypeSyntax node) Parameters Type Name Description UnionTypeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitUnkeyedTableField(UnkeyedTableFieldSyntax) Called when the visitor visits a UnkeyedTableFieldSyntax node. Declaration public virtual TResult VisitUnkeyedTableField(UnkeyedTableFieldSyntax node) Parameters Type Name Description UnkeyedTableFieldSyntax node Returns Type Description TResult | Improve this Doc View Source VisitVarArgExpression(VarArgExpressionSyntax) Called when the visitor visits a VarArgExpressionSyntax node. Declaration public virtual TResult VisitVarArgExpression(VarArgExpressionSyntax node) Parameters Type Name Description VarArgExpressionSyntax node Returns Type Description TResult | Improve this Doc View Source VisitVarArgParameter(VarArgParameterSyntax) Called when the visitor visits a VarArgParameterSyntax node. Declaration public virtual TResult VisitVarArgParameter(VarArgParameterSyntax node) Parameters Type Name Description VarArgParameterSyntax node Returns Type Description TResult | Improve this Doc View Source VisitVariableAttribute(VariableAttributeSyntax) Called when the visitor visits a VariableAttributeSyntax node. Declaration public virtual TResult VisitVariableAttribute(VariableAttributeSyntax node) Parameters Type Name Description VariableAttributeSyntax node Returns Type Description TResult | Improve this Doc View Source VisitVariadicTypePack(VariadicTypePackSyntax) Called when the visitor visits a VariadicTypePackSyntax node. Declaration public virtual TResult VisitVariadicTypePack(VariadicTypePackSyntax node) Parameters Type Name Description VariadicTypePackSyntax node Returns Type Description TResult | Improve this Doc View Source VisitWhileStatement(WhileStatementSyntax) Called when the visitor visits a WhileStatementSyntax node. Declaration public virtual TResult VisitWhileStatement(WhileStatementSyntax node) Parameters Type Name Description WhileStatementSyntax node Returns Type Description TResult"
  },
  "api/Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.html",
    "title": "Class LuaSyntaxWalker | Loretta",
    "keywords": "Class LuaSyntaxWalker Represents a LuaSyntaxVisitor that descends an entire LuaSyntaxNode graph visiting each LuaSyntaxNode and its child SyntaxNodes and SyntaxToken s in depth-first order. Inheritance Object LuaSyntaxVisitor LuaSyntaxWalker Inherited Members LuaSyntaxVisitor.VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax) LuaSyntaxVisitor.VisitStatementList(StatementListSyntax) LuaSyntaxVisitor.VisitNamedParameter(NamedParameterSyntax) LuaSyntaxVisitor.VisitVarArgParameter(VarArgParameterSyntax) LuaSyntaxVisitor.VisitParameterList(ParameterListSyntax) LuaSyntaxVisitor.VisitIdentifierKeyedTableField(IdentifierKeyedTableFieldSyntax) LuaSyntaxVisitor.VisitExpressionKeyedTableField(ExpressionKeyedTableFieldSyntax) LuaSyntaxVisitor.VisitUnkeyedTableField(UnkeyedTableFieldSyntax) LuaSyntaxVisitor.VisitSimpleFunctionName(SimpleFunctionNameSyntax) LuaSyntaxVisitor.VisitMemberFunctionName(MemberFunctionNameSyntax) LuaSyntaxVisitor.VisitMethodFunctionName(MethodFunctionNameSyntax) LuaSyntaxVisitor.VisitStringFunctionArgument(StringFunctionArgumentSyntax) LuaSyntaxVisitor.VisitTableConstructorFunctionArgument(TableConstructorFunctionArgumentSyntax) LuaSyntaxVisitor.VisitExpressionListFunctionArgument(ExpressionListFunctionArgumentSyntax) LuaSyntaxVisitor.VisitAnonymousFunctionExpression(AnonymousFunctionExpressionSyntax) LuaSyntaxVisitor.VisitTableConstructorExpression(TableConstructorExpressionSyntax) LuaSyntaxVisitor.VisitLiteralExpression(LiteralExpressionSyntax) LuaSyntaxVisitor.VisitVarArgExpression(VarArgExpressionSyntax) LuaSyntaxVisitor.VisitIdentifierName(IdentifierNameSyntax) LuaSyntaxVisitor.VisitMemberAccessExpression(MemberAccessExpressionSyntax) LuaSyntaxVisitor.VisitElementAccessExpression(ElementAccessExpressionSyntax) LuaSyntaxVisitor.VisitUnaryExpression(UnaryExpressionSyntax) LuaSyntaxVisitor.VisitBinaryExpression(BinaryExpressionSyntax) LuaSyntaxVisitor.VisitElseIfExpressionClause(ElseIfExpressionClauseSyntax) LuaSyntaxVisitor.VisitIfExpression(IfExpressionSyntax) LuaSyntaxVisitor.VisitParenthesizedExpression(ParenthesizedExpressionSyntax) LuaSyntaxVisitor.VisitFunctionCallExpression(FunctionCallExpressionSyntax) LuaSyntaxVisitor.VisitMethodCallExpression(MethodCallExpressionSyntax) LuaSyntaxVisitor.VisitVariableAttribute(VariableAttributeSyntax) LuaSyntaxVisitor.VisitLocalDeclarationName(LocalDeclarationNameSyntax) LuaSyntaxVisitor.VisitEqualsValuesClause(EqualsValuesClauseSyntax) LuaSyntaxVisitor.VisitAssignmentStatement(AssignmentStatementSyntax) LuaSyntaxVisitor.VisitCompoundAssignmentStatement(CompoundAssignmentStatementSyntax) LuaSyntaxVisitor.VisitLocalVariableDeclarationStatement(LocalVariableDeclarationStatementSyntax) LuaSyntaxVisitor.VisitTypedIdentifierName(TypedIdentifierNameSyntax) LuaSyntaxVisitor.VisitNumericForStatement(NumericForStatementSyntax) LuaSyntaxVisitor.VisitGenericForStatement(GenericForStatementSyntax) LuaSyntaxVisitor.VisitWhileStatement(WhileStatementSyntax) LuaSyntaxVisitor.VisitRepeatUntilStatement(RepeatUntilStatementSyntax) LuaSyntaxVisitor.VisitIfStatement(IfStatementSyntax) LuaSyntaxVisitor.VisitElseIfClause(ElseIfClauseSyntax) LuaSyntaxVisitor.VisitElseClause(ElseClauseSyntax) LuaSyntaxVisitor.VisitGotoStatement(GotoStatementSyntax) LuaSyntaxVisitor.VisitBreakStatement(BreakStatementSyntax) LuaSyntaxVisitor.VisitReturnStatement(ReturnStatementSyntax) LuaSyntaxVisitor.VisitContinueStatement(ContinueStatementSyntax) LuaSyntaxVisitor.VisitLocalFunctionDeclarationStatement(LocalFunctionDeclarationStatementSyntax) LuaSyntaxVisitor.VisitFunctionDeclarationStatement(FunctionDeclarationStatementSyntax) LuaSyntaxVisitor.VisitDoStatement(DoStatementSyntax) LuaSyntaxVisitor.VisitGotoLabelStatement(GotoLabelStatementSyntax) LuaSyntaxVisitor.VisitExpressionStatement(ExpressionStatementSyntax) LuaSyntaxVisitor.VisitEmptyStatement(EmptyStatementSyntax) LuaSyntaxVisitor.VisitTypeDeclarationStatement(TypeDeclarationStatementSyntax) LuaSyntaxVisitor.VisitTypeBinding(TypeBindingSyntax) LuaSyntaxVisitor.VisitSimpleTypeName(SimpleTypeNameSyntax) LuaSyntaxVisitor.VisitCompositeTypeName(CompositeTypeNameSyntax) LuaSyntaxVisitor.VisitNilableType(NilableTypeSyntax) LuaSyntaxVisitor.VisitParenthesizedType(ParenthesizedTypeSyntax) LuaSyntaxVisitor.VisitTypePack(TypePackSyntax) LuaSyntaxVisitor.VisitFunctionType(FunctionTypeSyntax) LuaSyntaxVisitor.VisitArrayType(ArrayTypeSyntax) LuaSyntaxVisitor.VisitTableTypeIndexer(TableTypeIndexerSyntax) LuaSyntaxVisitor.VisitTableTypeProperty(TableTypePropertySyntax) LuaSyntaxVisitor.VisitTableType(TableTypeSyntax) LuaSyntaxVisitor.VisitTypeCastExpression(TypeCastExpressionSyntax) LuaSyntaxVisitor.VisitUnionType(UnionTypeSyntax) LuaSyntaxVisitor.VisitIntersectionType(IntersectionTypeSyntax) LuaSyntaxVisitor.VisitEqualsType(EqualsTypeSyntax) LuaSyntaxVisitor.VisitTypeParameter(TypeParameterSyntax) LuaSyntaxVisitor.VisitTypeParameterList(TypeParameterListSyntax) LuaSyntaxVisitor.VisitTypeArgumentList(TypeArgumentListSyntax) LuaSyntaxVisitor.VisitLiteralType(LiteralTypeSyntax) LuaSyntaxVisitor.VisitTypeofType(TypeofTypeSyntax) LuaSyntaxVisitor.VisitVariadicTypePack(VariadicTypePackSyntax) LuaSyntaxVisitor.VisitGenericTypePack(GenericTypePackSyntax) LuaSyntaxVisitor.VisitCompilationUnit(CompilationUnitSyntax) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class LuaSyntaxWalker : LuaSyntaxVisitor Constructors | Improve this Doc View Source LuaSyntaxWalker(SyntaxWalkerDepth) Initializes the syntax walker with hte provided depth. Declaration protected LuaSyntaxWalker(SyntaxWalkerDepth depth = SyntaxWalkerDepth.Node) Parameters Type Name Description SyntaxWalkerDepth depth Properties | Improve this Doc View Source Depth The depth up to which the walker should go into. Declaration protected SyntaxWalkerDepth Depth { get; } Property Value Type Description SyntaxWalkerDepth Methods | Improve this Doc View Source DefaultVisit(SyntaxNode) Called when the walker walks into a node. Declaration public override void DefaultVisit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Overrides LuaSyntaxVisitor.DefaultVisit(SyntaxNode) | Improve this Doc View Source Visit(SyntaxNode) Called when the syntax walker visits a node. Declaration public override void Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node Overrides LuaSyntaxVisitor.Visit(SyntaxNode) | Improve this Doc View Source VisitLeadingTrivia(SyntaxToken) Called when the walker should visit the leading trivia of a token. Declaration public virtual void VisitLeadingTrivia(SyntaxToken token) Parameters Type Name Description SyntaxToken token | Improve this Doc View Source VisitToken(SyntaxToken) Called when the walker visits a token. Declaration public virtual void VisitToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token | Improve this Doc View Source VisitTrailingTrivia(SyntaxToken) Called when the walker should visit the trailing trivia of a token. Declaration public virtual void VisitTrailingTrivia(SyntaxToken token) Parameters Type Name Description SyntaxToken token | Improve this Doc View Source VisitTrivia(SyntaxTrivia) Called when the walker visits a trivia. Declaration public virtual void VisitTrivia(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia"
  },
  "api/Loretta.CodeAnalysis.Lua.RenameError.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.RenameError.html",
    "title": "Class RenameError | Loretta",
    "keywords": "Class RenameError An error found while renaming a variable. Inheritance Object RenameError IdentifierNameNotSupportedError VariableConflictError Implements IEquatable < RenameError > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public class RenameError : IEquatable<RenameError> Implements System.IEquatable<T>"
  },
  "api/Loretta.CodeAnalysis.Lua.ScopeKind.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.ScopeKind.html",
    "title": "Enum ScopeKind | Loretta",
    "keywords": "Enum ScopeKind The type of scope. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public enum ScopeKind Fields Name Description Block A block's scope. File A file's scope. Function A local function's scope. Global The global scope."
  },
  "api/Loretta.CodeAnalysis.Lua.Script.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Script.html",
    "title": "Class Script | Loretta",
    "keywords": "Class Script A script containing one or more files. Inheritance Object Script Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class Script Constructors | Improve this Doc View Source Script() Initializes an empty script. Declaration public Script() | Improve this Doc View Source Script(ImmutableArray<SyntaxTree>) Initializes a new script. Declaration public Script(ImmutableArray<SyntaxTree> syntaxTrees) Parameters Type Name Description ImmutableArray < SyntaxTree > syntaxTrees Properties | Improve this Doc View Source Empty An empty script with no syntax trees. Declaration public static Script Empty { get; } Property Value Type Description Script | Improve this Doc View Source RootScope The root scope of the script. Declaration public IScope RootScope { get; } Property Value Type Description IScope | Improve this Doc View Source SyntaxTrees The syntax trees contained in this script. Declaration public ImmutableArray<SyntaxTree> SyntaxTrees { get; } Property Value Type Description ImmutableArray < SyntaxTree > Methods | Improve this Doc View Source FindScope(SyntaxNode, ScopeKind) Attempts to find the outermost scope of the provided kind (or a more generic one). Declaration public IScope FindScope(SyntaxNode node, ScopeKind kind = ScopeKind.Block) Parameters Type Name Description SyntaxNode node The node to search from. ScopeKind kind The kind to search for. Returns Type Description IScope Remarks If the tree that contains the provided node does not have a CompilationUnitSyntax , statements on the file root will not have a scope . The kind parameter searches for a scope of the provided kind or a more generic one as in the following list: Block searches for: Block , Function , File , Global . Function searches for: Function , File , Global . File searches for: File , Global . Global searches for itself. | Improve this Doc View Source GetLabel(SyntaxNode) Get the goto label for the provided node. Declaration public IGotoLabel GetLabel(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IGotoLabel | Improve this Doc View Source GetScope(SyntaxNode) Get the scope for the provided node. Declaration public IScope GetScope(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IScope | Improve this Doc View Source GetVariable(SyntaxNode) Get the variable for the provided node. Declaration public IVariable GetVariable(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IVariable | Improve this Doc View Source RenameVariable(IVariable, String) Attempts to rename the provided variable with the new provided name. Declaration public Result<Script, IEnumerable<RenameError>> RenameVariable(IVariable variable, string newName) Parameters Type Name Description IVariable variable The variable to rename. String newName The new variable's name. Returns Type Description Tsu.Result < Script , IEnumerable < RenameError >> An Ok(Script) if the rename was successful or an Err(IEnumerable<RenameError>) if there were errors while renaming the variable."
  },
  "api/Loretta.CodeAnalysis.Lua.SymbolDisplay.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SymbolDisplay.html",
    "title": "Namespace Loretta.CodeAnalysis.Lua.SymbolDisplay | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Lua.SymbolDisplay Classes ObjectDisplay Displays an object in the Lua style."
  },
  "api/Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.html",
    "title": "Class ObjectDisplay | Loretta",
    "keywords": "Class ObjectDisplay Displays an object in the Lua style. Inheritance Object ObjectDisplay Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua.SymbolDisplay Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class ObjectDisplay Properties | Improve this Doc View Source NilLiteral The nil literal in Lua. Declaration public static string NilLiteral { get; } Property Value Type Description String Methods | Improve this Doc View Source FormatLiteral(Boolean) Returns a string representation of a boolean. Declaration public static string FormatLiteral(bool value) Parameters Type Name Description Boolean value A value to display as a string. Returns Type Description String A string representation of an object of primitive type. | Improve this Doc View Source FormatLiteral(Double, ObjectDisplayOptions, CultureInfo) Returns a Lua number literal with the given value. Declaration public static string FormatLiteral(double value, ObjectDisplayOptions options, CultureInfo cultureInfo = null) Parameters Type Name Description Double value ObjectDisplayOptions options CultureInfo cultureInfo Returns Type Description String | Improve this Doc View Source FormatLiteral(Int64, ObjectDisplayOptions, CultureInfo) Returns a Lua number literal with the given value. Declaration public static string FormatLiteral(long value, ObjectDisplayOptions options, CultureInfo cultureInfo = null) Parameters Type Name Description Int64 value ObjectDisplayOptions options CultureInfo cultureInfo Returns Type Description String | Improve this Doc View Source FormatLiteral(Complex, ObjectDisplayOptions, CultureInfo) Returns a Lua number literal with the given value and the i suffix. Declaration public static string FormatLiteral(Complex value, ObjectDisplayOptions options, CultureInfo cultureInfo = null) Parameters Type Name Description Complex value ObjectDisplayOptions options CultureInfo cultureInfo Returns Type Description String | Improve this Doc View Source FormatLiteral(String, ObjectDisplayOptions) Returns a Lua string literal with the given value. Declaration public static string FormatLiteral(string value, ObjectDisplayOptions options) Parameters Type Name Description String value The value that the resulting string literal should have. ObjectDisplayOptions options Options used to customize formatting of an object value. Returns Type Description String A string literal with the given value. Remarks Optionally escapes non-printable characters. | Improve this Doc View Source FormatLiteral(UInt64, ObjectDisplayOptions, CultureInfo) Returns a Lua number literal with the given value and the ULL suffix. Declaration public static string FormatLiteral(ulong value, ObjectDisplayOptions options, CultureInfo cultureInfo = null) Parameters Type Name Description UInt64 value ObjectDisplayOptions options CultureInfo cultureInfo Returns Type Description String | Improve this Doc View Source FormatPrimitive(Object, ObjectDisplayOptions) Returns a string representation of an object of primitive type. Declaration public static string FormatPrimitive(object obj, ObjectDisplayOptions options) Parameters Type Name Description Object obj A value to display as a string. ObjectDisplayOptions options Options used to customize formatting of an object value. Returns Type Description String A string representation of an object of primitive type (or null if the type is not supported). Remarks Handles Boolean , String , Double and null ."
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.html",
    "title": "Class AnonymousFunctionExpressionSyntax | Loretta",
    "keywords": "Class AnonymousFunctionExpressionSyntax Represents an anonymous function expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax AnonymousFunctionExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class AnonymousFunctionExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: AnonymousFunctionExpression Properties | Improve this Doc View Source Body The function's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source FunctionKeyword The 'function' keyword. Declaration public SyntaxToken FunctionKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Parameters The list of parameters. Declaration public ParameterListSyntax Parameters { get; } Property Value Type Description ParameterListSyntax | Improve this Doc View Source TypeBinding The function's (optional) return type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax | Improve this Doc View Source TypeParameterList Gets the type parameter list for this function (if any). Declaration public TypeParameterListSyntax TypeParameterList { get; } Property Value Type Description TypeParameterListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public AnonymousFunctionExpressionSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source AddParametersParameters(ParameterSyntax[]) Declaration public AnonymousFunctionExpressionSyntax AddParametersParameters(params ParameterSyntax[] items) Parameters Type Name Description ParameterSyntax [] items Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source AddTypeParameterListNames(TypeParameterSyntax[]) Declaration public AnonymousFunctionExpressionSyntax AddTypeParameterListNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source Update(SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken) Declaration public AnonymousFunctionExpressionSyntax Update(SyntaxToken functionKeyword, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken functionKeyword TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public AnonymousFunctionExpressionSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public AnonymousFunctionExpressionSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithFunctionKeyword(SyntaxToken) Declaration public AnonymousFunctionExpressionSyntax WithFunctionKeyword(SyntaxToken functionKeyword) Parameters Type Name Description SyntaxToken functionKeyword Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithParameters(ParameterListSyntax) Declaration public AnonymousFunctionExpressionSyntax WithParameters(ParameterListSyntax parameters) Parameters Type Name Description ParameterListSyntax parameters Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public AnonymousFunctionExpressionSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source WithTypeParameterList(TypeParameterListSyntax) Declaration public AnonymousFunctionExpressionSyntax WithTypeParameterList(TypeParameterListSyntax typeParameterList) Parameters Type Name Description TypeParameterListSyntax typeParameterList Returns Type Description AnonymousFunctionExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ArrayTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ArrayTypeSyntax.html",
    "title": "Class ArrayTypeSyntax | Loretta",
    "keywords": "Class ArrayTypeSyntax This node represents an array type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TableBasedTypeSyntax ArrayTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ArrayTypeSyntax : TableBasedTypeSyntax Remarks This node is associated with the following syntax kinds: ArrayType Properties | Improve this Doc View Source CloseBraceToken Gets the } token. Declaration public SyntaxToken CloseBraceToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source OpenBraceToken Gets the { token. Declaration public SyntaxToken OpenBraceToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the array's type Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax, SyntaxToken) Declaration public ArrayTypeSyntax Update(SyntaxToken openBraceToken, TypeSyntax type, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken TypeSyntax type SyntaxToken closeBraceToken Returns Type Description ArrayTypeSyntax | Improve this Doc View Source WithCloseBraceToken(SyntaxToken) Declaration public ArrayTypeSyntax WithCloseBraceToken(SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken closeBraceToken Returns Type Description ArrayTypeSyntax | Improve this Doc View Source WithOpenBraceToken(SyntaxToken) Declaration public ArrayTypeSyntax WithOpenBraceToken(SyntaxToken openBraceToken) Parameters Type Name Description SyntaxToken openBraceToken Returns Type Description ArrayTypeSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public ArrayTypeSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description ArrayTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax.html",
    "title": "Class AssignmentStatementSyntax | Loretta",
    "keywords": "Class AssignmentStatementSyntax Represents an assignment statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax AssignmentStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class AssignmentStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: AssignmentStatement Properties | Improve this Doc View Source EqualsValues The values being assigned to the names (if any). Declaration public EqualsValuesClauseSyntax EqualsValues { get; } Property Value Type Description EqualsValuesClauseSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source Variables The variables being assigned to. Declaration public SeparatedSyntaxList<PrefixExpressionSyntax> Variables { get; } Property Value Type Description SeparatedSyntaxList < PrefixExpressionSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddEqualsValuesValues(ExpressionSyntax[]) Declaration public AssignmentStatementSyntax AddEqualsValuesValues(params ExpressionSyntax[] items) Parameters Type Name Description ExpressionSyntax [] items Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source AddVariables(PrefixExpressionSyntax[]) Declaration public AssignmentStatementSyntax AddVariables(params PrefixExpressionSyntax[] items) Parameters Type Name Description PrefixExpressionSyntax [] items Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source Update(SeparatedSyntaxList<PrefixExpressionSyntax>, EqualsValuesClauseSyntax, SyntaxToken) Declaration public AssignmentStatementSyntax Update(SeparatedSyntaxList<PrefixExpressionSyntax> variables, EqualsValuesClauseSyntax equalsValues, SyntaxToken semicolonToken) Parameters Type Name Description SeparatedSyntaxList < PrefixExpressionSyntax > variables EqualsValuesClauseSyntax equalsValues SyntaxToken semicolonToken Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source WithEqualsValues(EqualsValuesClauseSyntax) Declaration public AssignmentStatementSyntax WithEqualsValues(EqualsValuesClauseSyntax equalsValues) Parameters Type Name Description EqualsValuesClauseSyntax equalsValues Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public AssignmentStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source WithVariables(SeparatedSyntaxList<PrefixExpressionSyntax>) Declaration public AssignmentStatementSyntax WithVariables(SeparatedSyntaxList<PrefixExpressionSyntax> variables) Parameters Type Name Description SeparatedSyntaxList < PrefixExpressionSyntax > variables Returns Type Description AssignmentStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax.html",
    "title": "Class BinaryExpressionSyntax | Loretta",
    "keywords": "Class BinaryExpressionSyntax Represents a binary expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax BinaryExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class BinaryExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: AddExpression BitwiseAndExpression BitwiseOrExpression ConcatExpression DivideExpression EqualsExpression ExclusiveOrExpression ExponentiateExpression GreaterThanExpression GreaterThanOrEqualExpression LeftShiftExpression LessThanExpression LessThanOrEqualExpression LogicalAndExpression LogicalOrExpression ModuloExpression MultiplyExpression NotEqualsExpression RightShiftExpression SubtractExpression FloorDivideExpression Properties | Improve this Doc View Source Left The expression on the left side of the operator. Declaration public ExpressionSyntax Left { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OperatorToken The operator token. Declaration public SyntaxToken OperatorToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Right The expression on the right side of the operator. Declaration public ExpressionSyntax Right { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(ExpressionSyntax, SyntaxToken, ExpressionSyntax) Declaration public BinaryExpressionSyntax Update(ExpressionSyntax left, SyntaxToken operatorToken, ExpressionSyntax right) Parameters Type Name Description ExpressionSyntax left SyntaxToken operatorToken ExpressionSyntax right Returns Type Description BinaryExpressionSyntax | Improve this Doc View Source WithLeft(ExpressionSyntax) Declaration public BinaryExpressionSyntax WithLeft(ExpressionSyntax left) Parameters Type Name Description ExpressionSyntax left Returns Type Description BinaryExpressionSyntax | Improve this Doc View Source WithOperatorToken(SyntaxToken) Declaration public BinaryExpressionSyntax WithOperatorToken(SyntaxToken operatorToken) Parameters Type Name Description SyntaxToken operatorToken Returns Type Description BinaryExpressionSyntax | Improve this Doc View Source WithRight(ExpressionSyntax) Declaration public BinaryExpressionSyntax WithRight(ExpressionSyntax right) Parameters Type Name Description ExpressionSyntax right Returns Type Description BinaryExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax.html",
    "title": "Class BreakStatementSyntax | Loretta",
    "keywords": "Class BreakStatementSyntax Represents a break statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax BreakStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class BreakStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: BreakStatement Properties | Improve this Doc View Source BreakKeyword The 'break' keyword. Declaration public SyntaxToken BreakKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken) Declaration public BreakStatementSyntax Update(SyntaxToken breakKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken breakKeyword SyntaxToken semicolonToken Returns Type Description BreakStatementSyntax | Improve this Doc View Source WithBreakKeyword(SyntaxToken) Declaration public BreakStatementSyntax WithBreakKeyword(SyntaxToken breakKeyword) Parameters Type Name Description SyntaxToken breakKeyword Returns Type Description BreakStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public BreakStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description BreakStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax.html",
    "title": "Class CompilationUnitSyntax | Loretta",
    "keywords": "Class CompilationUnitSyntax The node containing all of the file's contents. Inheritance Object SyntaxNode LuaSyntaxNode CompilationUnitSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class CompilationUnitSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: CompilationUnit Properties | Improve this Doc View Source EndOfFileToken The end-of-file token. Declaration public SyntaxToken EndOfFileToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Statements The statements in the compilation unit. Declaration public StatementListSyntax Statements { get; } Property Value Type Description StatementListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddStatementsStatements(StatementSyntax[]) Declaration public CompilationUnitSyntax AddStatementsStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description CompilationUnitSyntax | Improve this Doc View Source Update(StatementListSyntax, SyntaxToken) Declaration public CompilationUnitSyntax Update(StatementListSyntax statements, SyntaxToken endOfFileToken) Parameters Type Name Description StatementListSyntax statements SyntaxToken endOfFileToken Returns Type Description CompilationUnitSyntax | Improve this Doc View Source WithEndOfFileToken(SyntaxToken) Declaration public CompilationUnitSyntax WithEndOfFileToken(SyntaxToken endOfFileToken) Parameters Type Name Description SyntaxToken endOfFileToken Returns Type Description CompilationUnitSyntax | Improve this Doc View Source WithStatements(StatementListSyntax) Declaration public CompilationUnitSyntax WithStatements(StatementListSyntax statements) Parameters Type Name Description StatementListSyntax statements Returns Type Description CompilationUnitSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.CompositeTypeNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.CompositeTypeNameSyntax.html",
    "title": "Class CompositeTypeNameSyntax | Loretta",
    "keywords": "Class CompositeTypeNameSyntax This node represents a composite name (.T) Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TypeNameSyntax CompositeTypeNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class CompositeTypeNameSyntax : TypeNameSyntax Remarks This node is associated with the following syntax kinds: CompositeTypeName Properties | Improve this Doc View Source Base Gets the name of the type. Declaration public TypeNameSyntax Base { get; } Property Value Type Description TypeNameSyntax | Improve this Doc View Source DotToken Gets the . token. Declaration public SyntaxToken DotToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source IdentifierToken Gets the name of the type. Declaration public SyntaxToken IdentifierToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source TypeArgumentList The type argument list for this generic type. Declaration public override TypeArgumentListSyntax TypeArgumentList { get; } Property Value Type Description TypeArgumentListSyntax Overrides TypeNameSyntax.TypeArgumentList Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTypeArgumentListArguments(TypeSyntax[]) Declaration public CompositeTypeNameSyntax AddTypeArgumentListArguments(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source Update(TypeNameSyntax, SyntaxToken, SyntaxToken, TypeArgumentListSyntax) Declaration public CompositeTypeNameSyntax Update(TypeNameSyntax base, SyntaxToken dotToken, SyntaxToken identifierToken, TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeNameSyntax base SyntaxToken dotToken SyntaxToken identifierToken TypeArgumentListSyntax typeArgumentList Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source WithBase(TypeNameSyntax) Declaration public CompositeTypeNameSyntax WithBase(TypeNameSyntax base) Parameters Type Name Description TypeNameSyntax base Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source WithDotToken(SyntaxToken) Declaration public CompositeTypeNameSyntax WithDotToken(SyntaxToken dotToken) Parameters Type Name Description SyntaxToken dotToken Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source WithIdentifierToken(SyntaxToken) Declaration public CompositeTypeNameSyntax WithIdentifierToken(SyntaxToken identifierToken) Parameters Type Name Description SyntaxToken identifierToken Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source WithTypeArgumentList(TypeArgumentListSyntax) Declaration public CompositeTypeNameSyntax WithTypeArgumentList(TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeArgumentListSyntax typeArgumentList Returns Type Description CompositeTypeNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.html",
    "title": "Class CompoundAssignmentStatementSyntax | Loretta",
    "keywords": "Class CompoundAssignmentStatementSyntax Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax CompoundAssignmentStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class CompoundAssignmentStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: AddAssignmentStatement SubtractAssignmentStatement MultiplyAssignmentStatement DivideAssignmentStatement ModuloAssignmentStatement ConcatAssignmentStatement ExponentiateAssignmentStatement Properties | Improve this Doc View Source AssignmentOperatorToken The compound assignment operator token. Declaration public SyntaxToken AssignmentOperatorToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The expression on the right side of the operator. Declaration public ExpressionSyntax Expression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source Variable The variable being assigned to. Declaration public PrefixExpressionSyntax Variable { get; } Property Value Type Description PrefixExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(PrefixExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public CompoundAssignmentStatementSyntax Update(PrefixExpressionSyntax variable, SyntaxToken assignmentOperatorToken, ExpressionSyntax expression, SyntaxToken semicolonToken) Parameters Type Name Description PrefixExpressionSyntax variable SyntaxToken assignmentOperatorToken ExpressionSyntax expression SyntaxToken semicolonToken Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source WithAssignmentOperatorToken(SyntaxToken) Declaration public CompoundAssignmentStatementSyntax WithAssignmentOperatorToken(SyntaxToken assignmentOperatorToken) Parameters Type Name Description SyntaxToken assignmentOperatorToken Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source WithExpression(ExpressionSyntax) Declaration public CompoundAssignmentStatementSyntax WithExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public CompoundAssignmentStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source WithVariable(PrefixExpressionSyntax) Declaration public CompoundAssignmentStatementSyntax WithVariable(PrefixExpressionSyntax variable) Parameters Type Name Description PrefixExpressionSyntax variable Returns Type Description CompoundAssignmentStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax.html",
    "title": "Class ContinueStatementSyntax | Loretta",
    "keywords": "Class ContinueStatementSyntax Represents a continue statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax ContinueStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ContinueStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: ContinueStatement Properties | Improve this Doc View Source ContinueKeyword The 'continue' keyword. Declaration public SyntaxToken ContinueKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken) Declaration public ContinueStatementSyntax Update(SyntaxToken continueKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken continueKeyword SyntaxToken semicolonToken Returns Type Description ContinueStatementSyntax | Improve this Doc View Source WithContinueKeyword(SyntaxToken) Declaration public ContinueStatementSyntax WithContinueKeyword(SyntaxToken continueKeyword) Parameters Type Name Description SyntaxToken continueKeyword Returns Type Description ContinueStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public ContinueStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description ContinueStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.html",
    "title": "Class DoStatementSyntax | Loretta",
    "keywords": "Class DoStatementSyntax Represents a do statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax DoStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class DoStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: DoStatement Properties | Improve this Doc View Source Body The do's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source DoKeyword The 'do' keyword. Declaration public SyntaxToken DoKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public DoStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description DoStatementSyntax | Improve this Doc View Source Update(SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public DoStatementSyntax Update(SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description DoStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public DoStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description DoStatementSyntax | Improve this Doc View Source WithDoKeyword(SyntaxToken) Declaration public DoStatementSyntax WithDoKeyword(SyntaxToken doKeyword) Parameters Type Name Description SyntaxToken doKeyword Returns Type Description DoStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public DoStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description DoStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public DoStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description DoStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.html",
    "title": "Class ElementAccessExpressionSyntax | Loretta",
    "keywords": "Class ElementAccessExpressionSyntax Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax VariableExpressionSyntax ElementAccessExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ElementAccessExpressionSyntax : VariableExpressionSyntax Remarks This node is associated with the following syntax kinds: ElementAccessExpression Properties | Improve this Doc View Source CloseBracketToken The closing bracket token. Declaration public SyntaxToken CloseBracketToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The expression that contains the member being accessed. Declaration public PrefixExpressionSyntax Expression { get; } Property Value Type Description PrefixExpressionSyntax | Improve this Doc View Source KeyExpression The key expression. Declaration public ExpressionSyntax KeyExpression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OpenBracketToken The opening bracket token. Declaration public SyntaxToken OpenBracketToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(PrefixExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public ElementAccessExpressionSyntax Update(PrefixExpressionSyntax expression, SyntaxToken openBracketToken, ExpressionSyntax keyExpression, SyntaxToken closeBracketToken) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken openBracketToken ExpressionSyntax keyExpression SyntaxToken closeBracketToken Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source WithCloseBracketToken(SyntaxToken) Declaration public ElementAccessExpressionSyntax WithCloseBracketToken(SyntaxToken closeBracketToken) Parameters Type Name Description SyntaxToken closeBracketToken Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source WithExpression(PrefixExpressionSyntax) Declaration public ElementAccessExpressionSyntax WithExpression(PrefixExpressionSyntax expression) Parameters Type Name Description PrefixExpressionSyntax expression Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source WithKeyExpression(ExpressionSyntax) Declaration public ElementAccessExpressionSyntax WithKeyExpression(ExpressionSyntax keyExpression) Parameters Type Name Description ExpressionSyntax keyExpression Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source WithOpenBracketToken(SyntaxToken) Declaration public ElementAccessExpressionSyntax WithOpenBracketToken(SyntaxToken openBracketToken) Parameters Type Name Description SyntaxToken openBracketToken Returns Type Description ElementAccessExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax.html",
    "title": "Class ElseClauseSyntax | Loretta",
    "keywords": "Class ElseClauseSyntax Represents an else clause. Inheritance Object SyntaxNode LuaSyntaxNode ElseClauseSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ElseClauseSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: ElseClause Properties | Improve this Doc View Source ElseBody The else's body. Declaration public StatementListSyntax ElseBody { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source ElseKeyword The 'else' keyword. Declaration public SyntaxToken ElseKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddElseBodyStatements(StatementSyntax[]) Declaration public ElseClauseSyntax AddElseBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description ElseClauseSyntax | Improve this Doc View Source Update(SyntaxToken, StatementListSyntax) Declaration public ElseClauseSyntax Update(SyntaxToken elseKeyword, StatementListSyntax elseBody) Parameters Type Name Description SyntaxToken elseKeyword StatementListSyntax elseBody Returns Type Description ElseClauseSyntax | Improve this Doc View Source WithElseBody(StatementListSyntax) Declaration public ElseClauseSyntax WithElseBody(StatementListSyntax elseBody) Parameters Type Name Description StatementListSyntax elseBody Returns Type Description ElseClauseSyntax | Improve this Doc View Source WithElseKeyword(SyntaxToken) Declaration public ElseClauseSyntax WithElseKeyword(SyntaxToken elseKeyword) Parameters Type Name Description SyntaxToken elseKeyword Returns Type Description ElseClauseSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.html",
    "title": "Class ElseIfClauseSyntax | Loretta",
    "keywords": "Class ElseIfClauseSyntax Represents an elseif clause. Inheritance Object SyntaxNode LuaSyntaxNode ElseIfClauseSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ElseIfClauseSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: ElseIfClause Properties | Improve this Doc View Source Body The elseif body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source Condition The condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source ElseIfKeyword The 'elseif' keyword. Declaration public SyntaxToken ElseIfKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ThenKeyword The 'then' keyword. Declaration public SyntaxToken ThenKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public ElseIfClauseSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax) Declaration public ElseIfClauseSyntax Update(SyntaxToken elseIfKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, StatementListSyntax body) Parameters Type Name Description SyntaxToken elseIfKeyword ExpressionSyntax condition SyntaxToken thenKeyword StatementListSyntax body Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public ElseIfClauseSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public ElseIfClauseSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source WithElseIfKeyword(SyntaxToken) Declaration public ElseIfClauseSyntax WithElseIfKeyword(SyntaxToken elseIfKeyword) Parameters Type Name Description SyntaxToken elseIfKeyword Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source WithThenKeyword(SyntaxToken) Declaration public ElseIfClauseSyntax WithThenKeyword(SyntaxToken thenKeyword) Parameters Type Name Description SyntaxToken thenKeyword Returns Type Description ElseIfClauseSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.html",
    "title": "Class ElseIfExpressionClauseSyntax | Loretta",
    "keywords": "Class ElseIfExpressionClauseSyntax Represents an elseif clause in an if expression. Inheritance Object SyntaxNode LuaSyntaxNode ElseIfExpressionClauseSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ElseIfExpressionClauseSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: ElseIfExpressionClause Properties | Improve this Doc View Source Condition The elseif's condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source ElseIfKeyword The 'elseif' keyword. Declaration public SyntaxToken ElseIfKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ThenKeyword The 'then' keyword. Declaration public SyntaxToken ThenKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Value The value to be returned if the condition is true. Declaration public ExpressionSyntax Value { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax) Declaration public ElseIfExpressionClauseSyntax Update(SyntaxToken elseIfKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, ExpressionSyntax value) Parameters Type Name Description SyntaxToken elseIfKeyword ExpressionSyntax condition SyntaxToken thenKeyword ExpressionSyntax value Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public ElseIfExpressionClauseSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source WithElseIfKeyword(SyntaxToken) Declaration public ElseIfExpressionClauseSyntax WithElseIfKeyword(SyntaxToken elseIfKeyword) Parameters Type Name Description SyntaxToken elseIfKeyword Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source WithThenKeyword(SyntaxToken) Declaration public ElseIfExpressionClauseSyntax WithThenKeyword(SyntaxToken thenKeyword) Parameters Type Name Description SyntaxToken thenKeyword Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source WithValue(ExpressionSyntax) Declaration public ElseIfExpressionClauseSyntax WithValue(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description ElseIfExpressionClauseSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax.html",
    "title": "Class EmptyStatementSyntax | Loretta",
    "keywords": "Class EmptyStatementSyntax An empty statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax EmptyStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class EmptyStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: EmptyStatement Properties | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public EmptyStatementSyntax Update(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description EmptyStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public EmptyStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description EmptyStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.EqualsTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.EqualsTypeSyntax.html",
    "title": "Class EqualsTypeSyntax | Loretta",
    "keywords": "Class EqualsTypeSyntax This node represents the default type value of a type parameter. Inheritance Object SyntaxNode LuaSyntaxNode EqualsTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class EqualsTypeSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: EqualsType Properties | Improve this Doc View Source EqualsToken Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the type value. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax) Declaration public EqualsTypeSyntax Update(SyntaxToken equalsToken, TypeSyntax type) Parameters Type Name Description SyntaxToken equalsToken TypeSyntax type Returns Type Description EqualsTypeSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public EqualsTypeSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description EqualsTypeSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public EqualsTypeSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description EqualsTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax.html",
    "title": "Class EqualsValuesClauseSyntax | Loretta",
    "keywords": "Class EqualsValuesClauseSyntax Represents the values being assigned to the names in an assignment or variable declaration. Inheritance Object SyntaxNode LuaSyntaxNode EqualsValuesClauseSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class EqualsValuesClauseSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: EqualsValuesClause Properties | Improve this Doc View Source EqualsToken The equals token. Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Values The list of values being assigned. Declaration public SeparatedSyntaxList<ExpressionSyntax> Values { get; } Property Value Type Description SeparatedSyntaxList < ExpressionSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddValues(ExpressionSyntax[]) Declaration public EqualsValuesClauseSyntax AddValues(params ExpressionSyntax[] items) Parameters Type Name Description ExpressionSyntax [] items Returns Type Description EqualsValuesClauseSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>) Declaration public EqualsValuesClauseSyntax Update(SyntaxToken equalsToken, SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SyntaxToken equalsToken SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description EqualsValuesClauseSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public EqualsValuesClauseSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description EqualsValuesClauseSyntax | Improve this Doc View Source WithValues(SeparatedSyntaxList<ExpressionSyntax>) Declaration public EqualsValuesClauseSyntax WithValues(SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description EqualsValuesClauseSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.html",
    "title": "Class ExpressionKeyedTableFieldSyntax | Loretta",
    "keywords": "Class ExpressionKeyedTableFieldSyntax Represents a table field whose key is an expression. Inheritance Object SyntaxNode LuaSyntaxNode TableFieldSyntax ExpressionKeyedTableFieldSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ExpressionKeyedTableFieldSyntax : TableFieldSyntax Remarks This node is associated with the following syntax kinds: ExpressionKeyedTableField Properties | Improve this Doc View Source CloseBracketToken The closing bracket token. Declaration public SyntaxToken CloseBracketToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EqualsToken The equals token. Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Key The table field's key. Declaration public ExpressionSyntax Key { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OpenBracketToken The opening bracket token. Declaration public SyntaxToken OpenBracketToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Value The field's value. Declaration public ExpressionSyntax Value { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax) Declaration public ExpressionKeyedTableFieldSyntax Update(SyntaxToken openBracketToken, ExpressionSyntax key, SyntaxToken closeBracketToken, SyntaxToken equalsToken, ExpressionSyntax value) Parameters Type Name Description SyntaxToken openBracketToken ExpressionSyntax key SyntaxToken closeBracketToken SyntaxToken equalsToken ExpressionSyntax value Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source WithCloseBracketToken(SyntaxToken) Declaration public ExpressionKeyedTableFieldSyntax WithCloseBracketToken(SyntaxToken closeBracketToken) Parameters Type Name Description SyntaxToken closeBracketToken Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public ExpressionKeyedTableFieldSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source WithKey(ExpressionSyntax) Declaration public ExpressionKeyedTableFieldSyntax WithKey(ExpressionSyntax key) Parameters Type Name Description ExpressionSyntax key Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source WithOpenBracketToken(SyntaxToken) Declaration public ExpressionKeyedTableFieldSyntax WithOpenBracketToken(SyntaxToken openBracketToken) Parameters Type Name Description SyntaxToken openBracketToken Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source WithValue(ExpressionSyntax) Declaration public ExpressionKeyedTableFieldSyntax WithValue(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description ExpressionKeyedTableFieldSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax.html",
    "title": "Class ExpressionListFunctionArgumentSyntax | Loretta",
    "keywords": "Class ExpressionListFunctionArgumentSyntax Represents a list of expressions being passed as a function's arguments. Inheritance Object SyntaxNode LuaSyntaxNode FunctionArgumentSyntax ExpressionListFunctionArgumentSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ExpressionListFunctionArgumentSyntax : FunctionArgumentSyntax Remarks This node is associated with the following syntax kinds: ExpressionListFunctionArgument Properties | Improve this Doc View Source CloseParenthesisToken The argument list's closing parenthesis token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expressions The list of expressions. Declaration public SeparatedSyntaxList<ExpressionSyntax> Expressions { get; } Property Value Type Description SeparatedSyntaxList < ExpressionSyntax > | Improve this Doc View Source OpenParenthesisToken The argument list's opening parenthesis token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddExpressions(ExpressionSyntax[]) Declaration public ExpressionListFunctionArgumentSyntax AddExpressions(params ExpressionSyntax[] items) Parameters Type Name Description ExpressionSyntax [] items Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken) Declaration public ExpressionListFunctionArgumentSyntax Update(SyntaxToken openParenthesisToken, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken closeParenthesisToken Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public ExpressionListFunctionArgumentSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source WithExpressions(SeparatedSyntaxList<ExpressionSyntax>) Declaration public ExpressionListFunctionArgumentSyntax WithExpressions(SeparatedSyntaxList<ExpressionSyntax> expressions) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > expressions Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public ExpressionListFunctionArgumentSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description ExpressionListFunctionArgumentSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax.html",
    "title": "Class ExpressionStatementSyntax | Loretta",
    "keywords": "Class ExpressionStatementSyntax An expression as a statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax ExpressionStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ExpressionStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: ExpressionStatement Properties | Improve this Doc View Source Expression The function call expression. Declaration public ExpressionSyntax Expression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(ExpressionSyntax, SyntaxToken) Declaration public ExpressionStatementSyntax Update(ExpressionSyntax expression, SyntaxToken semicolonToken) Parameters Type Name Description ExpressionSyntax expression SyntaxToken semicolonToken Returns Type Description ExpressionStatementSyntax | Improve this Doc View Source WithExpression(ExpressionSyntax) Declaration public ExpressionStatementSyntax WithExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description ExpressionStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public ExpressionStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description ExpressionStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax.html",
    "title": "Class ExpressionSyntax | Loretta",
    "keywords": "Class ExpressionSyntax The base class for expressions. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax AnonymousFunctionExpressionSyntax BinaryExpressionSyntax IfExpressionSyntax LiteralExpressionSyntax PrefixExpressionSyntax TableConstructorExpressionSyntax TypeCastExpressionSyntax UnaryExpressionSyntax VarArgExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class ExpressionSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax.html",
    "title": "Class FunctionArgumentSyntax | Loretta",
    "keywords": "Class FunctionArgumentSyntax The base class for function arguments. Inheritance Object SyntaxNode LuaSyntaxNode FunctionArgumentSyntax ExpressionListFunctionArgumentSyntax StringFunctionArgumentSyntax TableConstructorFunctionArgumentSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class FunctionArgumentSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax.html",
    "title": "Class FunctionCallExpressionSyntax | Loretta",
    "keywords": "Class FunctionCallExpressionSyntax Represents a function call expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax FunctionCallExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class FunctionCallExpressionSyntax : PrefixExpressionSyntax Remarks This node is associated with the following syntax kinds: FunctionCallExpression Properties | Improve this Doc View Source Argument The function's arguments. Declaration public FunctionArgumentSyntax Argument { get; } Property Value Type Description FunctionArgumentSyntax | Improve this Doc View Source Expression The expression returning the function to be called. Declaration public PrefixExpressionSyntax Expression { get; } Property Value Type Description PrefixExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(PrefixExpressionSyntax, FunctionArgumentSyntax) Declaration public FunctionCallExpressionSyntax Update(PrefixExpressionSyntax expression, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression FunctionArgumentSyntax argument Returns Type Description FunctionCallExpressionSyntax | Improve this Doc View Source WithArgument(FunctionArgumentSyntax) Declaration public FunctionCallExpressionSyntax WithArgument(FunctionArgumentSyntax argument) Parameters Type Name Description FunctionArgumentSyntax argument Returns Type Description FunctionCallExpressionSyntax | Improve this Doc View Source WithExpression(PrefixExpressionSyntax) Declaration public FunctionCallExpressionSyntax WithExpression(PrefixExpressionSyntax expression) Parameters Type Name Description PrefixExpressionSyntax expression Returns Type Description FunctionCallExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.html",
    "title": "Class FunctionDeclarationStatementSyntax | Loretta",
    "keywords": "Class FunctionDeclarationStatementSyntax Represents a function declaration statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax FunctionDeclarationStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class FunctionDeclarationStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: FunctionDeclarationStatement Properties | Improve this Doc View Source Body The function's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source FunctionKeyword The 'function' keyword. Declaration public SyntaxToken FunctionKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name The function's name. Declaration public FunctionNameSyntax Name { get; } Property Value Type Description FunctionNameSyntax | Improve this Doc View Source Parameters The function's parameters. Declaration public ParameterListSyntax Parameters { get; } Property Value Type Description ParameterListSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source TypeBinding The function's (optional) return type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax | Improve this Doc View Source TypeParameterList Gets the type parameter list for this function (if any). Declaration public TypeParameterListSyntax TypeParameterList { get; } Property Value Type Description TypeParameterListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public FunctionDeclarationStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source AddParametersParameters(ParameterSyntax[]) Declaration public FunctionDeclarationStatementSyntax AddParametersParameters(params ParameterSyntax[] items) Parameters Type Name Description ParameterSyntax [] items Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source AddTypeParameterListNames(TypeParameterSyntax[]) Declaration public FunctionDeclarationStatementSyntax AddTypeParameterListNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source Update(SyntaxToken, FunctionNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public FunctionDeclarationStatementSyntax Update(SyntaxToken functionKeyword, FunctionNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken functionKeyword FunctionNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public FunctionDeclarationStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public FunctionDeclarationStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithFunctionKeyword(SyntaxToken) Declaration public FunctionDeclarationStatementSyntax WithFunctionKeyword(SyntaxToken functionKeyword) Parameters Type Name Description SyntaxToken functionKeyword Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithName(FunctionNameSyntax) Declaration public FunctionDeclarationStatementSyntax WithName(FunctionNameSyntax name) Parameters Type Name Description FunctionNameSyntax name Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithParameters(ParameterListSyntax) Declaration public FunctionDeclarationStatementSyntax WithParameters(ParameterListSyntax parameters) Parameters Type Name Description ParameterListSyntax parameters Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public FunctionDeclarationStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public FunctionDeclarationStatementSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source WithTypeParameterList(TypeParameterListSyntax) Declaration public FunctionDeclarationStatementSyntax WithTypeParameterList(TypeParameterListSyntax typeParameterList) Parameters Type Name Description TypeParameterListSyntax typeParameterList Returns Type Description FunctionDeclarationStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax.html",
    "title": "Class FunctionNameSyntax | Loretta",
    "keywords": "Class FunctionNameSyntax The base class for function name nodes. Inheritance Object SyntaxNode LuaSyntaxNode FunctionNameSyntax MemberFunctionNameSyntax MethodFunctionNameSyntax SimpleFunctionNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class FunctionNameSyntax : LuaSyntaxNode Properties | Improve this Doc View Source Name The member name. Declaration public abstract SyntaxToken Name { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source WithName(SyntaxToken) Declaration public FunctionNameSyntax WithName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description FunctionNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.FunctionTypeSyntax.html",
    "title": "Class FunctionTypeSyntax | Loretta",
    "keywords": "Class FunctionTypeSyntax This node represents a function type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax FunctionTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class FunctionTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: FunctionType Properties | Improve this Doc View Source CloseParenthesisToken Gets the ) token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source MinusGreaterThanToken Gets the -> token. Declaration public SyntaxToken MinusGreaterThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source OpenParenthesisToken Gets the ( token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Parameters Gets the list of the types of the function's parameters. Declaration public SeparatedSyntaxList<TypeSyntax> Parameters { get; } Property Value Type Description SeparatedSyntaxList < TypeSyntax > | Improve this Doc View Source ReturnType The return type of the function type. Declaration public TypeSyntax ReturnType { get; } Property Value Type Description TypeSyntax | Improve this Doc View Source TypeParameterList Gets the type parameter list for this function (if any). Declaration public TypeParameterListSyntax TypeParameterList { get; } Property Value Type Description TypeParameterListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddParameters(TypeSyntax[]) Declaration public FunctionTypeSyntax AddParameters(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description FunctionTypeSyntax | Improve this Doc View Source AddTypeParameterListNames(TypeParameterSyntax[]) Declaration public FunctionTypeSyntax AddTypeParameterListNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description FunctionTypeSyntax | Improve this Doc View Source Update(TypeParameterListSyntax, SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken, SyntaxToken, TypeSyntax) Declaration public FunctionTypeSyntax Update(TypeParameterListSyntax typeParameterList, SyntaxToken openParenthesisToken, SeparatedSyntaxList<TypeSyntax> parameters, SyntaxToken closeParenthesisToken, SyntaxToken minusGreaterThanToken, TypeSyntax returnType) Parameters Type Name Description TypeParameterListSyntax typeParameterList SyntaxToken openParenthesisToken SeparatedSyntaxList < TypeSyntax > parameters SyntaxToken closeParenthesisToken SyntaxToken minusGreaterThanToken TypeSyntax returnType Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public FunctionTypeSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithMinusGreaterThanToken(SyntaxToken) Declaration public FunctionTypeSyntax WithMinusGreaterThanToken(SyntaxToken minusGreaterThanToken) Parameters Type Name Description SyntaxToken minusGreaterThanToken Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public FunctionTypeSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithParameters(SeparatedSyntaxList<TypeSyntax>) Declaration public FunctionTypeSyntax WithParameters(SeparatedSyntaxList<TypeSyntax> parameters) Parameters Type Name Description SeparatedSyntaxList < TypeSyntax > parameters Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithReturnType(TypeSyntax) Declaration public FunctionTypeSyntax WithReturnType(TypeSyntax returnType) Parameters Type Name Description TypeSyntax returnType Returns Type Description FunctionTypeSyntax | Improve this Doc View Source WithTypeParameterList(TypeParameterListSyntax) Declaration public FunctionTypeSyntax WithTypeParameterList(TypeParameterListSyntax typeParameterList) Parameters Type Name Description TypeParameterListSyntax typeParameterList Returns Type Description FunctionTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.html",
    "title": "Class GenericForStatementSyntax | Loretta",
    "keywords": "Class GenericForStatementSyntax Represents a generic for loop statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax GenericForStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class GenericForStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: GenericForStatement Properties | Improve this Doc View Source Body The loop's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source DoKeyword The 'do' keyword. Declaration public SyntaxToken DoKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expressions The list of expressions. Declaration public SeparatedSyntaxList<ExpressionSyntax> Expressions { get; } Property Value Type Description SeparatedSyntaxList < ExpressionSyntax > | Improve this Doc View Source ForKeyword The 'for' keyword. Declaration public SyntaxToken ForKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifiers The list of loop variables. Declaration public SeparatedSyntaxList<TypedIdentifierNameSyntax> Identifiers { get; } Property Value Type Description SeparatedSyntaxList < TypedIdentifierNameSyntax > | Improve this Doc View Source InKeyword The 'in' keyword. Declaration public SyntaxToken InKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public GenericForStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description GenericForStatementSyntax | Improve this Doc View Source AddExpressions(ExpressionSyntax[]) Declaration public GenericForStatementSyntax AddExpressions(params ExpressionSyntax[] items) Parameters Type Name Description ExpressionSyntax [] items Returns Type Description GenericForStatementSyntax | Improve this Doc View Source AddIdentifiers(TypedIdentifierNameSyntax[]) Declaration public GenericForStatementSyntax AddIdentifiers(params TypedIdentifierNameSyntax[] items) Parameters Type Name Description TypedIdentifierNameSyntax [] items Returns Type Description GenericForStatementSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TypedIdentifierNameSyntax>, SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public GenericForStatementSyntax Update(SyntaxToken forKeyword, SeparatedSyntaxList<TypedIdentifierNameSyntax> identifiers, SyntaxToken inKeyword, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken forKeyword SeparatedSyntaxList < TypedIdentifierNameSyntax > identifiers SyntaxToken inKeyword SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public GenericForStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithDoKeyword(SyntaxToken) Declaration public GenericForStatementSyntax WithDoKeyword(SyntaxToken doKeyword) Parameters Type Name Description SyntaxToken doKeyword Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public GenericForStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithExpressions(SeparatedSyntaxList<ExpressionSyntax>) Declaration public GenericForStatementSyntax WithExpressions(SeparatedSyntaxList<ExpressionSyntax> expressions) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > expressions Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithForKeyword(SyntaxToken) Declaration public GenericForStatementSyntax WithForKeyword(SyntaxToken forKeyword) Parameters Type Name Description SyntaxToken forKeyword Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithIdentifiers(SeparatedSyntaxList<TypedIdentifierNameSyntax>) Declaration public GenericForStatementSyntax WithIdentifiers(SeparatedSyntaxList<TypedIdentifierNameSyntax> identifiers) Parameters Type Name Description SeparatedSyntaxList < TypedIdentifierNameSyntax > identifiers Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithInKeyword(SyntaxToken) Declaration public GenericForStatementSyntax WithInKeyword(SyntaxToken inKeyword) Parameters Type Name Description SyntaxToken inKeyword Returns Type Description GenericForStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public GenericForStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description GenericForStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.GenericTypePackSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.GenericTypePackSyntax.html",
    "title": "Class GenericTypePackSyntax | Loretta",
    "keywords": "Class GenericTypePackSyntax This node represents a generic type pack. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax GenericTypePackSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class GenericTypePackSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: GenericTypePack Properties | Improve this Doc View Source DotDotDotToken The ... token. Declaration public SyntaxToken DotDotDotToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifier The identifier token. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken) Declaration public GenericTypePackSyntax Update(SyntaxToken identifier, SyntaxToken dotDotDotToken) Parameters Type Name Description SyntaxToken identifier SyntaxToken dotDotDotToken Returns Type Description GenericTypePackSyntax | Improve this Doc View Source WithDotDotDotToken(SyntaxToken) Declaration public GenericTypePackSyntax WithDotDotDotToken(SyntaxToken dotDotDotToken) Parameters Type Name Description SyntaxToken dotDotDotToken Returns Type Description GenericTypePackSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public GenericTypePackSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description GenericTypePackSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.html",
    "title": "Class GotoLabelStatementSyntax | Loretta",
    "keywords": "Class GotoLabelStatementSyntax Represents a goto label statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax GotoLabelStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class GotoLabelStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: GotoLabelStatement Properties | Improve this Doc View Source Identifier The label name. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LeftDelimiterToken The delimiter on the left of the name. Declaration public SyntaxToken LeftDelimiterToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source RightDelimiterToken The delimiter on the right of the name. Declaration public SyntaxToken RightDelimiterToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken) Declaration public GotoLabelStatementSyntax Update(SyntaxToken leftDelimiterToken, SyntaxToken identifier, SyntaxToken rightDelimiterToken, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken leftDelimiterToken SyntaxToken identifier SyntaxToken rightDelimiterToken SyntaxToken semicolonToken Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public GotoLabelStatementSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source WithLeftDelimiterToken(SyntaxToken) Declaration public GotoLabelStatementSyntax WithLeftDelimiterToken(SyntaxToken leftDelimiterToken) Parameters Type Name Description SyntaxToken leftDelimiterToken Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source WithRightDelimiterToken(SyntaxToken) Declaration public GotoLabelStatementSyntax WithRightDelimiterToken(SyntaxToken rightDelimiterToken) Parameters Type Name Description SyntaxToken rightDelimiterToken Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public GotoLabelStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description GotoLabelStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax.html",
    "title": "Class GotoStatementSyntax | Loretta",
    "keywords": "Class GotoStatementSyntax Represents a goto statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax GotoStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class GotoStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: GotoStatement Properties | Improve this Doc View Source GotoKeyword The 'goto' keyword. Declaration public SyntaxToken GotoKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LabelName The name of the label being jumped to. Declaration public SyntaxToken LabelName { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, SyntaxToken) Declaration public GotoStatementSyntax Update(SyntaxToken gotoKeyword, SyntaxToken labelName, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken gotoKeyword SyntaxToken labelName SyntaxToken semicolonToken Returns Type Description GotoStatementSyntax | Improve this Doc View Source WithGotoKeyword(SyntaxToken) Declaration public GotoStatementSyntax WithGotoKeyword(SyntaxToken gotoKeyword) Parameters Type Name Description SyntaxToken gotoKeyword Returns Type Description GotoStatementSyntax | Improve this Doc View Source WithLabelName(SyntaxToken) Declaration public GotoStatementSyntax WithLabelName(SyntaxToken labelName) Parameters Type Name Description SyntaxToken labelName Returns Type Description GotoStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public GotoStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description GotoStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.html",
    "title": "Namespace Loretta.CodeAnalysis.Lua.Syntax | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Lua.Syntax Classes AnonymousFunctionExpressionSyntax Represents an anonymous function expression. ArrayTypeSyntax This node represents an array type. AssignmentStatementSyntax Represents an assignment statement. BinaryExpressionSyntax Represents a binary expression. BreakStatementSyntax Represents a break statement. CompilationUnitSyntax The node containing all of the file's contents. CompositeTypeNameSyntax This node represents a composite name (.T) CompoundAssignmentStatementSyntax ContinueStatementSyntax Represents a continue statement. DoStatementSyntax Represents a do statement. ElementAccessExpressionSyntax ElseClauseSyntax Represents an else clause. ElseIfClauseSyntax Represents an elseif clause. ElseIfExpressionClauseSyntax Represents an elseif clause in an if expression. EmptyStatementSyntax An empty statement. EqualsTypeSyntax This node represents the default type value of a type parameter. EqualsValuesClauseSyntax Represents the values being assigned to the names in an assignment or variable declaration. ExpressionKeyedTableFieldSyntax Represents a table field whose key is an expression. ExpressionListFunctionArgumentSyntax Represents a list of expressions being passed as a function's arguments. ExpressionStatementSyntax An expression as a statement. ExpressionSyntax The base class for expressions. FunctionArgumentSyntax The base class for function arguments. FunctionCallExpressionSyntax Represents a function call expression. FunctionDeclarationStatementSyntax Represents a function declaration statement. FunctionNameSyntax The base class for function name nodes. FunctionTypeSyntax This node represents a function type. GenericForStatementSyntax Represents a generic for loop statement. GenericTypePackSyntax This node represents a generic type pack. GotoLabelStatementSyntax Represents a goto label statement. GotoStatementSyntax Represents a goto statement. IdentifierKeyedTableFieldSyntax Represents a table field whose key is an identifier. IdentifierNameSyntax A name expression. IfExpressionSyntax Represents Luau's if expression. IfStatementSyntax Represents an if statement. IntersectionTypeSyntax This node represents an intersection type. LiteralExpressionSyntax Represents a literal expression. LiteralTypeSyntax Represents a literal-based singleton type. LocalDeclarationNameSyntax Represents a variable name in a LocalVariableDeclarationStatementSyntax node. LocalFunctionDeclarationStatementSyntax Represents a local function declaration statement. LocalVariableDeclarationStatementSyntax Represents a local variable declaration statement. MemberAccessExpressionSyntax MemberFunctionNameSyntax Represents a function name which is a member. MethodCallExpressionSyntax Represents a method call (obj:method args...) expression. MethodFunctionNameSyntax Represents a method-style function name syntax. NamedParameterSyntax Represents a named function parameter. NilableTypeSyntax This node represents a nilable type. NumericForStatementSyntax Represents a numeric for statement. ParameterListSyntax Represents a function declaration's parameter list. ParameterSyntax The base type for parameter nodes. ParenthesizedExpressionSyntax ParenthesizedTypeSyntax This node represents a parenthesized type. PrefixExpressionSyntax The base node for prefix expressions (expressions that can be called as functions, have methods called on them and/or have members/elements accessed on them). RepeatUntilStatementSyntax ReturnStatementSyntax Represents a return statement. SimpleFunctionNameSyntax Represents a function name which is only an identifier. SimpleTypeNameSyntax This node reperesents a simple name (T). SkippedTokensTriviaSyntax StatementListSyntax Represents a block of code. StatementSyntax The base class for statements. StringFunctionArgumentSyntax Represents a string being passed as a function call's argument. StructuredTriviaSyntax It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it. TableBasedTypeSyntax This node represents a table based type. TableConstructorExpressionSyntax Represents a table constructor expression. TableConstructorFunctionArgumentSyntax Represents a table being passed as a function call's arguments. TableFieldSyntax The base class for table fields. TableTypeElementSyntax This node represents a type inside of a table type. TableTypeIndexerSyntax This node represents a table type indexer. TableTypePropertySyntax This node represents a table type property. TableTypeSyntax This node represents a table type. TypeArgumentListSyntax This node represents a type argument list. TypeBindingSyntax The node representing a type annotation TypeCastExpressionSyntax This node represents a type cast expression. TypeDeclarationStatementSyntax Represents a type declaration statement. TypedIdentifierNameSyntax This node represents an identifier name with a type binding. TypeNameSyntax This node represents a type's name. TypeofTypeSyntax This node represents a typeof type. TypePackSyntax This node represents a type pack. TypeParameterListSyntax This node represents a type parameter list. TypeParameterSyntax This node represents a type parameter. TypeSyntax The base node for type annotations UnaryExpressionSyntax Represents an unary expression. UnionTypeSyntax This node represents a union type. UnkeyedTableFieldSyntax Represents a table field without a key. VarArgExpressionSyntax Represents a vararg expression. VarArgParameterSyntax Represents a vararg function parameter. VariableAttributeSyntax Represents a variable attribute syntax. VariableExpressionSyntax The base class for variable expressions (values that can be assigned to). VariadicTypePackSyntax This node represents a variadic type pack. WhileStatementSyntax Represents a while statement."
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax.html",
    "title": "Class IdentifierKeyedTableFieldSyntax | Loretta",
    "keywords": "Class IdentifierKeyedTableFieldSyntax Represents a table field whose key is an identifier. Inheritance Object SyntaxNode LuaSyntaxNode TableFieldSyntax IdentifierKeyedTableFieldSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class IdentifierKeyedTableFieldSyntax : TableFieldSyntax Remarks This node is associated with the following syntax kinds: IdentifierKeyedTableField Properties | Improve this Doc View Source EqualsToken The equals token. Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifier The table field's key. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Value The table field's value. Declaration public ExpressionSyntax Value { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, ExpressionSyntax) Declaration public IdentifierKeyedTableFieldSyntax Update(SyntaxToken identifier, SyntaxToken equalsToken, ExpressionSyntax value) Parameters Type Name Description SyntaxToken identifier SyntaxToken equalsToken ExpressionSyntax value Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public IdentifierKeyedTableFieldSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public IdentifierKeyedTableFieldSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source WithValue(ExpressionSyntax) Declaration public IdentifierKeyedTableFieldSyntax WithValue(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description IdentifierKeyedTableFieldSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax.html",
    "title": "Class IdentifierNameSyntax | Loretta",
    "keywords": "Class IdentifierNameSyntax A name expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax VariableExpressionSyntax IdentifierNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class IdentifierNameSyntax : VariableExpressionSyntax Remarks This node is associated with the following syntax kinds: IdentifierName Properties | Improve this Doc View Source Identifier The identifier. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name This identifier's name. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public IdentifierNameSyntax Update(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description IdentifierNameSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public IdentifierNameSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description IdentifierNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.html",
    "title": "Class IfExpressionSyntax | Loretta",
    "keywords": "Class IfExpressionSyntax Represents Luau's if expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax IfExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class IfExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: IfExpression Properties | Improve this Doc View Source Condition The if's condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source ElseIfClauses The elseif clauses. Declaration public SyntaxList<ElseIfExpressionClauseSyntax> ElseIfClauses { get; } Property Value Type Description SyntaxList < ElseIfExpressionClauseSyntax > | Improve this Doc View Source ElseKeyword The 'else' keyword. Declaration public SyntaxToken ElseKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source FalseValue The value that will be returned if none of the previous conditions are true. Declaration public ExpressionSyntax FalseValue { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source IfKeyword The 'if' keyword. Declaration public SyntaxToken IfKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ThenKeyword The 'then' keyword. Declaration public SyntaxToken ThenKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source TrueValue The value that will be returned if condition is true. Declaration public ExpressionSyntax TrueValue { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddElseIfClauses(ElseIfExpressionClauseSyntax[]) Declaration public IfExpressionSyntax AddElseIfClauses(params ElseIfExpressionClauseSyntax[] items) Parameters Type Name Description ElseIfExpressionClauseSyntax [] items Returns Type Description IfExpressionSyntax | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxList<ElseIfExpressionClauseSyntax>, SyntaxToken, ExpressionSyntax) Declaration public IfExpressionSyntax Update(SyntaxToken ifKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, ExpressionSyntax trueValue, SyntaxList<ElseIfExpressionClauseSyntax> elseIfClauses, SyntaxToken elseKeyword, ExpressionSyntax falseValue) Parameters Type Name Description SyntaxToken ifKeyword ExpressionSyntax condition SyntaxToken thenKeyword ExpressionSyntax trueValue SyntaxList < ElseIfExpressionClauseSyntax > elseIfClauses SyntaxToken elseKeyword ExpressionSyntax falseValue Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public IfExpressionSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithElseIfClauses(SyntaxList<ElseIfExpressionClauseSyntax>) Declaration public IfExpressionSyntax WithElseIfClauses(SyntaxList<ElseIfExpressionClauseSyntax> elseIfClauses) Parameters Type Name Description SyntaxList < ElseIfExpressionClauseSyntax > elseIfClauses Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithElseKeyword(SyntaxToken) Declaration public IfExpressionSyntax WithElseKeyword(SyntaxToken elseKeyword) Parameters Type Name Description SyntaxToken elseKeyword Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithFalseValue(ExpressionSyntax) Declaration public IfExpressionSyntax WithFalseValue(ExpressionSyntax falseValue) Parameters Type Name Description ExpressionSyntax falseValue Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithIfKeyword(SyntaxToken) Declaration public IfExpressionSyntax WithIfKeyword(SyntaxToken ifKeyword) Parameters Type Name Description SyntaxToken ifKeyword Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithThenKeyword(SyntaxToken) Declaration public IfExpressionSyntax WithThenKeyword(SyntaxToken thenKeyword) Parameters Type Name Description SyntaxToken thenKeyword Returns Type Description IfExpressionSyntax | Improve this Doc View Source WithTrueValue(ExpressionSyntax) Declaration public IfExpressionSyntax WithTrueValue(ExpressionSyntax trueValue) Parameters Type Name Description ExpressionSyntax trueValue Returns Type Description IfExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.html",
    "title": "Class IfStatementSyntax | Loretta",
    "keywords": "Class IfStatementSyntax Represents an if statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax IfStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class IfStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: IfStatement Properties | Improve this Doc View Source Body The if's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source Condition The if's condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source ElseClause The else clause. Declaration public ElseClauseSyntax ElseClause { get; } Property Value Type Description ElseClauseSyntax | Improve this Doc View Source ElseIfClauses The elseif clauses. Declaration public SyntaxList<ElseIfClauseSyntax> ElseIfClauses { get; } Property Value Type Description SyntaxList < ElseIfClauseSyntax > | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source IfKeyword The 'if' keyword. Declaration public SyntaxToken IfKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source ThenKeyword The 'then' keyword. Declaration public SyntaxToken ThenKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public IfStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description IfStatementSyntax | Improve this Doc View Source AddElseIfClauses(ElseIfClauseSyntax[]) Declaration public IfStatementSyntax AddElseIfClauses(params ElseIfClauseSyntax[] items) Parameters Type Name Description ElseIfClauseSyntax [] items Returns Type Description IfStatementSyntax | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxList<ElseIfClauseSyntax>, ElseClauseSyntax, SyntaxToken, SyntaxToken) Declaration public IfStatementSyntax Update(SyntaxToken ifKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, StatementListSyntax body, SyntaxList<ElseIfClauseSyntax> elseIfClauses, ElseClauseSyntax elseClause, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken ifKeyword ExpressionSyntax condition SyntaxToken thenKeyword StatementListSyntax body SyntaxList < ElseIfClauseSyntax > elseIfClauses ElseClauseSyntax elseClause SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description IfStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public IfStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description IfStatementSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public IfStatementSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description IfStatementSyntax | Improve this Doc View Source WithElseClause(ElseClauseSyntax) Declaration public IfStatementSyntax WithElseClause(ElseClauseSyntax elseClause) Parameters Type Name Description ElseClauseSyntax elseClause Returns Type Description IfStatementSyntax | Improve this Doc View Source WithElseIfClauses(SyntaxList<ElseIfClauseSyntax>) Declaration public IfStatementSyntax WithElseIfClauses(SyntaxList<ElseIfClauseSyntax> elseIfClauses) Parameters Type Name Description SyntaxList < ElseIfClauseSyntax > elseIfClauses Returns Type Description IfStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public IfStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description IfStatementSyntax | Improve this Doc View Source WithIfKeyword(SyntaxToken) Declaration public IfStatementSyntax WithIfKeyword(SyntaxToken ifKeyword) Parameters Type Name Description SyntaxToken ifKeyword Returns Type Description IfStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public IfStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description IfStatementSyntax | Improve this Doc View Source WithThenKeyword(SyntaxToken) Declaration public IfStatementSyntax WithThenKeyword(SyntaxToken thenKeyword) Parameters Type Name Description SyntaxToken thenKeyword Returns Type Description IfStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.IntersectionTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.IntersectionTypeSyntax.html",
    "title": "Class IntersectionTypeSyntax | Loretta",
    "keywords": "Class IntersectionTypeSyntax This node represents an intersection type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax IntersectionTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class IntersectionTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: IntersectionType Properties | Improve this Doc View Source AmpersandToken Gets the & operator token. Declaration public SyntaxToken AmpersandToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Left Gets the type on the left side of the operator. Declaration public TypeSyntax Left { get; } Property Value Type Description TypeSyntax | Improve this Doc View Source Right Gets the type on the right side of the operator. Declaration public TypeSyntax Right { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(TypeSyntax, SyntaxToken, TypeSyntax) Declaration public IntersectionTypeSyntax Update(TypeSyntax left, SyntaxToken ampersandToken, TypeSyntax right) Parameters Type Name Description TypeSyntax left SyntaxToken ampersandToken TypeSyntax right Returns Type Description IntersectionTypeSyntax | Improve this Doc View Source WithAmpersandToken(SyntaxToken) Declaration public IntersectionTypeSyntax WithAmpersandToken(SyntaxToken ampersandToken) Parameters Type Name Description SyntaxToken ampersandToken Returns Type Description IntersectionTypeSyntax | Improve this Doc View Source WithLeft(TypeSyntax) Declaration public IntersectionTypeSyntax WithLeft(TypeSyntax left) Parameters Type Name Description TypeSyntax left Returns Type Description IntersectionTypeSyntax | Improve this Doc View Source WithRight(TypeSyntax) Declaration public IntersectionTypeSyntax WithRight(TypeSyntax right) Parameters Type Name Description TypeSyntax right Returns Type Description IntersectionTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax.html",
    "title": "Class LiteralExpressionSyntax | Loretta",
    "keywords": "Class LiteralExpressionSyntax Represents a literal expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax LiteralExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LiteralExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: NumericalLiteralExpression StringLiteralExpression TrueLiteralExpression FalseLiteralExpression NilLiteralExpression HashStringLiteralExpression Properties | Improve this Doc View Source Token The literal token. Declaration public SyntaxToken Token { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public LiteralExpressionSyntax Update(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description LiteralExpressionSyntax | Improve this Doc View Source WithToken(SyntaxToken) Declaration public LiteralExpressionSyntax WithToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description LiteralExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.LiteralTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.LiteralTypeSyntax.html",
    "title": "Class LiteralTypeSyntax | Loretta",
    "keywords": "Class LiteralTypeSyntax Represents a literal-based singleton type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax LiteralTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LiteralTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: StringType TrueType FalseType NilType Properties | Improve this Doc View Source Token The literal token. Declaration public SyntaxToken Token { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public LiteralTypeSyntax Update(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description LiteralTypeSyntax | Improve this Doc View Source WithToken(SyntaxToken) Declaration public LiteralTypeSyntax WithToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description LiteralTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax.html",
    "title": "Class LocalDeclarationNameSyntax | Loretta",
    "keywords": "Class LocalDeclarationNameSyntax Represents a variable name in a LocalVariableDeclarationStatementSyntax node. Inheritance Object SyntaxNode LuaSyntaxNode LocalDeclarationNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LocalDeclarationNameSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: LocalDeclarationName Properties | Improve this Doc View Source Attribute The VariableAttributeSyntax containing the (optional) variable attribute. Declaration public VariableAttributeSyntax Attribute { get; } Property Value Type Description VariableAttributeSyntax | Improve this Doc View Source AttributeName The name of the attribute. Declaration public string AttributeName { get; } Property Value Type Description String | Improve this Doc View Source IdentifierName The IdentifierNameSyntax containing the name. Declaration public IdentifierNameSyntax IdentifierName { get; } Property Value Type Description IdentifierNameSyntax | Improve this Doc View Source Name The variable name. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeBinding The TypeBindingSyntax containing the (optional) type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(IdentifierNameSyntax, VariableAttributeSyntax, TypeBindingSyntax) Declaration public LocalDeclarationNameSyntax Update(IdentifierNameSyntax identifierName, VariableAttributeSyntax attribute, TypeBindingSyntax typeBinding) Parameters Type Name Description IdentifierNameSyntax identifierName VariableAttributeSyntax attribute TypeBindingSyntax typeBinding Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source WithAttribute(VariableAttributeSyntax) Declaration public LocalDeclarationNameSyntax WithAttribute(VariableAttributeSyntax attribute) Parameters Type Name Description VariableAttributeSyntax attribute Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source WithIdentifierName(IdentifierNameSyntax) Declaration public LocalDeclarationNameSyntax WithIdentifierName(IdentifierNameSyntax identifierName) Parameters Type Name Description IdentifierNameSyntax identifierName Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public LocalDeclarationNameSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description LocalDeclarationNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.html",
    "title": "Class LocalFunctionDeclarationStatementSyntax | Loretta",
    "keywords": "Class LocalFunctionDeclarationStatementSyntax Represents a local function declaration statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax LocalFunctionDeclarationStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LocalFunctionDeclarationStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: LocalFunctionDeclarationStatement Properties | Improve this Doc View Source Body The function's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source FunctionKeyword The 'function' keyword. Declaration public SyntaxToken FunctionKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LocalKeyword The 'local' keyword. Declaration public SyntaxToken LocalKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name The function's name. Declaration public IdentifierNameSyntax Name { get; } Property Value Type Description IdentifierNameSyntax | Improve this Doc View Source Parameters The parameter list. Declaration public ParameterListSyntax Parameters { get; } Property Value Type Description ParameterListSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source TypeBinding The function's (optional) return type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax | Improve this Doc View Source TypeParameterList Gets the type parameter list for this function (if any). Declaration public TypeParameterListSyntax TypeParameterList { get; } Property Value Type Description TypeParameterListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public LocalFunctionDeclarationStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source AddParametersParameters(ParameterSyntax[]) Declaration public LocalFunctionDeclarationStatementSyntax AddParametersParameters(params ParameterSyntax[] items) Parameters Type Name Description ParameterSyntax [] items Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source AddTypeParameterListNames(TypeParameterSyntax[]) Declaration public LocalFunctionDeclarationStatementSyntax AddTypeParameterListNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, IdentifierNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public LocalFunctionDeclarationStatementSyntax Update(SyntaxToken localKeyword, SyntaxToken functionKeyword, IdentifierNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken localKeyword SyntaxToken functionKeyword IdentifierNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public LocalFunctionDeclarationStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public LocalFunctionDeclarationStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithFunctionKeyword(SyntaxToken) Declaration public LocalFunctionDeclarationStatementSyntax WithFunctionKeyword(SyntaxToken functionKeyword) Parameters Type Name Description SyntaxToken functionKeyword Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithLocalKeyword(SyntaxToken) Declaration public LocalFunctionDeclarationStatementSyntax WithLocalKeyword(SyntaxToken localKeyword) Parameters Type Name Description SyntaxToken localKeyword Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithName(IdentifierNameSyntax) Declaration public LocalFunctionDeclarationStatementSyntax WithName(IdentifierNameSyntax name) Parameters Type Name Description IdentifierNameSyntax name Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithParameters(ParameterListSyntax) Declaration public LocalFunctionDeclarationStatementSyntax WithParameters(ParameterListSyntax parameters) Parameters Type Name Description ParameterListSyntax parameters Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public LocalFunctionDeclarationStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public LocalFunctionDeclarationStatementSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source WithTypeParameterList(TypeParameterListSyntax) Declaration public LocalFunctionDeclarationStatementSyntax WithTypeParameterList(TypeParameterListSyntax typeParameterList) Parameters Type Name Description TypeParameterListSyntax typeParameterList Returns Type Description LocalFunctionDeclarationStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.html",
    "title": "Class LocalVariableDeclarationStatementSyntax | Loretta",
    "keywords": "Class LocalVariableDeclarationStatementSyntax Represents a local variable declaration statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax LocalVariableDeclarationStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class LocalVariableDeclarationStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: LocalVariableDeclarationStatement Properties | Improve this Doc View Source EqualsValues The values being assigned to the names (if any). Declaration public EqualsValuesClauseSyntax EqualsValues { get; } Property Value Type Description EqualsValuesClauseSyntax | Improve this Doc View Source LocalKeyword The 'local' keyword. Declaration public SyntaxToken LocalKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Names The list of names being assigned to. Declaration public SeparatedSyntaxList<LocalDeclarationNameSyntax> Names { get; } Property Value Type Description SeparatedSyntaxList < LocalDeclarationNameSyntax > | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddNames(LocalDeclarationNameSyntax[]) Declaration public LocalVariableDeclarationStatementSyntax AddNames(params LocalDeclarationNameSyntax[] items) Parameters Type Name Description LocalDeclarationNameSyntax [] items Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<LocalDeclarationNameSyntax>, EqualsValuesClauseSyntax, SyntaxToken) Declaration public LocalVariableDeclarationStatementSyntax Update(SyntaxToken localKeyword, SeparatedSyntaxList<LocalDeclarationNameSyntax> names, EqualsValuesClauseSyntax equalsValues, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken localKeyword SeparatedSyntaxList < LocalDeclarationNameSyntax > names EqualsValuesClauseSyntax equalsValues SyntaxToken semicolonToken Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source WithEqualsValues(EqualsValuesClauseSyntax) Declaration public LocalVariableDeclarationStatementSyntax WithEqualsValues(EqualsValuesClauseSyntax equalsValues) Parameters Type Name Description EqualsValuesClauseSyntax equalsValues Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source WithLocalKeyword(SyntaxToken) Declaration public LocalVariableDeclarationStatementSyntax WithLocalKeyword(SyntaxToken localKeyword) Parameters Type Name Description SyntaxToken localKeyword Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source WithNames(SeparatedSyntaxList<LocalDeclarationNameSyntax>) Declaration public LocalVariableDeclarationStatementSyntax WithNames(SeparatedSyntaxList<LocalDeclarationNameSyntax> names) Parameters Type Name Description SeparatedSyntaxList < LocalDeclarationNameSyntax > names Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public LocalVariableDeclarationStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description LocalVariableDeclarationStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax.html",
    "title": "Class MemberAccessExpressionSyntax | Loretta",
    "keywords": "Class MemberAccessExpressionSyntax Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax VariableExpressionSyntax MemberAccessExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class MemberAccessExpressionSyntax : VariableExpressionSyntax Remarks This node is associated with the following syntax kinds: MemberAccessExpression Properties | Improve this Doc View Source DotSeparator The dot separating the expression and the identifier. Declaration public SyntaxToken DotSeparator { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The expression that contains the member being accessed. Declaration public PrefixExpressionSyntax Expression { get; } Property Value Type Description PrefixExpressionSyntax | Improve this Doc View Source MemberName The identifier representing the member name. Declaration public SyntaxToken MemberName { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(PrefixExpressionSyntax, SyntaxToken, SyntaxToken) Declaration public MemberAccessExpressionSyntax Update(PrefixExpressionSyntax expression, SyntaxToken dotSeparator, SyntaxToken memberName) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken dotSeparator SyntaxToken memberName Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source WithDotSeparator(SyntaxToken) Declaration public MemberAccessExpressionSyntax WithDotSeparator(SyntaxToken dotSeparator) Parameters Type Name Description SyntaxToken dotSeparator Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source WithExpression(PrefixExpressionSyntax) Declaration public MemberAccessExpressionSyntax WithExpression(PrefixExpressionSyntax expression) Parameters Type Name Description PrefixExpressionSyntax expression Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source WithMemberName(SyntaxToken) Declaration public MemberAccessExpressionSyntax WithMemberName(SyntaxToken memberName) Parameters Type Name Description SyntaxToken memberName Returns Type Description MemberAccessExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax.html",
    "title": "Class MemberFunctionNameSyntax | Loretta",
    "keywords": "Class MemberFunctionNameSyntax Represents a function name which is a member. Inheritance Object SyntaxNode LuaSyntaxNode FunctionNameSyntax MemberFunctionNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class MemberFunctionNameSyntax : FunctionNameSyntax Remarks This node is associated with the following syntax kinds: MemberFunctionName Properties | Improve this Doc View Source BaseName The base function name. Declaration public FunctionNameSyntax BaseName { get; } Property Value Type Description FunctionNameSyntax | Improve this Doc View Source DotToken The dot token. Declaration public SyntaxToken DotToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name The member name. Declaration public override SyntaxToken Name { get; } Property Value Type Description SyntaxToken Overrides FunctionNameSyntax.Name Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(FunctionNameSyntax, SyntaxToken, SyntaxToken) Declaration public MemberFunctionNameSyntax Update(FunctionNameSyntax baseName, SyntaxToken dotToken, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken dotToken SyntaxToken name Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source WithBaseName(FunctionNameSyntax) Declaration public MemberFunctionNameSyntax WithBaseName(FunctionNameSyntax baseName) Parameters Type Name Description FunctionNameSyntax baseName Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source WithDotToken(SyntaxToken) Declaration public MemberFunctionNameSyntax WithDotToken(SyntaxToken dotToken) Parameters Type Name Description SyntaxToken dotToken Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source WithName(SyntaxToken) Declaration public MemberFunctionNameSyntax WithName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description MemberFunctionNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.html",
    "title": "Class MethodCallExpressionSyntax | Loretta",
    "keywords": "Class MethodCallExpressionSyntax Represents a method call (obj:method args...) expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax MethodCallExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class MethodCallExpressionSyntax : PrefixExpressionSyntax Remarks This node is associated with the following syntax kinds: MethodCallExpression Properties | Improve this Doc View Source Argument The method call's arguments. Declaration public FunctionArgumentSyntax Argument { get; } Property Value Type Description FunctionArgumentSyntax | Improve this Doc View Source ColonToken The colon token. Declaration public SyntaxToken ColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The expression that contains the method being called. Declaration public PrefixExpressionSyntax Expression { get; } Property Value Type Description PrefixExpressionSyntax | Improve this Doc View Source Identifier The identifier containing the method name. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(PrefixExpressionSyntax, SyntaxToken, SyntaxToken, FunctionArgumentSyntax) Declaration public MethodCallExpressionSyntax Update(PrefixExpressionSyntax expression, SyntaxToken colonToken, SyntaxToken identifier, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken colonToken SyntaxToken identifier FunctionArgumentSyntax argument Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source WithArgument(FunctionArgumentSyntax) Declaration public MethodCallExpressionSyntax WithArgument(FunctionArgumentSyntax argument) Parameters Type Name Description FunctionArgumentSyntax argument Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source WithColonToken(SyntaxToken) Declaration public MethodCallExpressionSyntax WithColonToken(SyntaxToken colonToken) Parameters Type Name Description SyntaxToken colonToken Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source WithExpression(PrefixExpressionSyntax) Declaration public MethodCallExpressionSyntax WithExpression(PrefixExpressionSyntax expression) Parameters Type Name Description PrefixExpressionSyntax expression Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public MethodCallExpressionSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description MethodCallExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax.html",
    "title": "Class MethodFunctionNameSyntax | Loretta",
    "keywords": "Class MethodFunctionNameSyntax Represents a method-style function name syntax. Inheritance Object SyntaxNode LuaSyntaxNode FunctionNameSyntax MethodFunctionNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class MethodFunctionNameSyntax : FunctionNameSyntax Remarks This node is associated with the following syntax kinds: MethodFunctionName Properties | Improve this Doc View Source BaseName The base name for this method. Declaration public FunctionNameSyntax BaseName { get; } Property Value Type Description FunctionNameSyntax | Improve this Doc View Source ColonToken The colon token. Declaration public SyntaxToken ColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name The method name. Declaration public override SyntaxToken Name { get; } Property Value Type Description SyntaxToken Overrides FunctionNameSyntax.Name Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(FunctionNameSyntax, SyntaxToken, SyntaxToken) Declaration public MethodFunctionNameSyntax Update(FunctionNameSyntax baseName, SyntaxToken colonToken, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken colonToken SyntaxToken name Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source WithBaseName(FunctionNameSyntax) Declaration public MethodFunctionNameSyntax WithBaseName(FunctionNameSyntax baseName) Parameters Type Name Description FunctionNameSyntax baseName Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source WithColonToken(SyntaxToken) Declaration public MethodFunctionNameSyntax WithColonToken(SyntaxToken colonToken) Parameters Type Name Description SyntaxToken colonToken Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source WithName(SyntaxToken) Declaration public MethodFunctionNameSyntax WithName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description MethodFunctionNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax.html",
    "title": "Class NamedParameterSyntax | Loretta",
    "keywords": "Class NamedParameterSyntax Represents a named function parameter. Inheritance Object SyntaxNode LuaSyntaxNode ParameterSyntax NamedParameterSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class NamedParameterSyntax : ParameterSyntax Remarks This node is associated with the following syntax kinds: NamedParameter Properties | Improve this Doc View Source Identifier The name of the parameter. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name This parameter's name. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeBinding The TypeBindingSyntax containing the (optional) type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeBindingSyntax) Declaration public NamedParameterSyntax Update(SyntaxToken identifier, TypeBindingSyntax typeBinding) Parameters Type Name Description SyntaxToken identifier TypeBindingSyntax typeBinding Returns Type Description NamedParameterSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public NamedParameterSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description NamedParameterSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public NamedParameterSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description NamedParameterSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.NilableTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.NilableTypeSyntax.html",
    "title": "Class NilableTypeSyntax | Loretta",
    "keywords": "Class NilableTypeSyntax This node represents a nilable type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax NilableTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class NilableTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: NilableType Properties | Improve this Doc View Source QuestionToken Gets the ? token. Declaration public SyntaxToken QuestionToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the base type that's being made nilable. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(TypeSyntax, SyntaxToken) Declaration public NilableTypeSyntax Update(TypeSyntax type, SyntaxToken questionToken) Parameters Type Name Description TypeSyntax type SyntaxToken questionToken Returns Type Description NilableTypeSyntax | Improve this Doc View Source WithQuestionToken(SyntaxToken) Declaration public NilableTypeSyntax WithQuestionToken(SyntaxToken questionToken) Parameters Type Name Description SyntaxToken questionToken Returns Type Description NilableTypeSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public NilableTypeSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description NilableTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.html",
    "title": "Class NumericForStatementSyntax | Loretta",
    "keywords": "Class NumericForStatementSyntax Represents a numeric for statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax NumericForStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class NumericForStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: NumericForStatement Properties | Improve this Doc View Source Body The loop's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source DoKeyword The 'do' keyword. Declaration public SyntaxToken DoKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EqualsToken The equals token. Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source FinalValue The expression defining the final value of the loop variable. Declaration public ExpressionSyntax FinalValue { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source FinalValueCommaToken The comma separating the initial value from the final value. Declaration public SyntaxToken FinalValueCommaToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ForKeyword The 'for' keyword. Declaration public SyntaxToken ForKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifier The loop variable. Declaration public TypedIdentifierNameSyntax Identifier { get; } Property Value Type Description TypedIdentifierNameSyntax | Improve this Doc View Source InitialValue The expression defining the initial value of the loop variable. Declaration public ExpressionSyntax InitialValue { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source StepValue The expression defining the step value of the loop variable. May be None if there is no step. Declaration public ExpressionSyntax StepValue { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source StepValueCommaToken The comma separating the final value from the step value. May be None if there is no step. Declaration public SyntaxToken StepValueCommaToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public NumericForStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description NumericForStatementSyntax | Improve this Doc View Source Update(SyntaxToken, TypedIdentifierNameSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public NumericForStatementSyntax Update(SyntaxToken forKeyword, TypedIdentifierNameSyntax identifier, SyntaxToken equalsToken, ExpressionSyntax initialValue, SyntaxToken finalValueCommaToken, ExpressionSyntax finalValue, SyntaxToken stepValueCommaToken, ExpressionSyntax stepValue, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken forKeyword TypedIdentifierNameSyntax identifier SyntaxToken equalsToken ExpressionSyntax initialValue SyntaxToken finalValueCommaToken ExpressionSyntax finalValue SyntaxToken stepValueCommaToken ExpressionSyntax stepValue SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public NumericForStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithDoKeyword(SyntaxToken) Declaration public NumericForStatementSyntax WithDoKeyword(SyntaxToken doKeyword) Parameters Type Name Description SyntaxToken doKeyword Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public NumericForStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public NumericForStatementSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithFinalValue(ExpressionSyntax) Declaration public NumericForStatementSyntax WithFinalValue(ExpressionSyntax finalValue) Parameters Type Name Description ExpressionSyntax finalValue Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithFinalValueCommaToken(SyntaxToken) Declaration public NumericForStatementSyntax WithFinalValueCommaToken(SyntaxToken finalValueCommaToken) Parameters Type Name Description SyntaxToken finalValueCommaToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithForKeyword(SyntaxToken) Declaration public NumericForStatementSyntax WithForKeyword(SyntaxToken forKeyword) Parameters Type Name Description SyntaxToken forKeyword Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithIdentifier(TypedIdentifierNameSyntax) Declaration public NumericForStatementSyntax WithIdentifier(TypedIdentifierNameSyntax identifier) Parameters Type Name Description TypedIdentifierNameSyntax identifier Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithInitialValue(ExpressionSyntax) Declaration public NumericForStatementSyntax WithInitialValue(ExpressionSyntax initialValue) Parameters Type Name Description ExpressionSyntax initialValue Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public NumericForStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithStepValue(ExpressionSyntax) Declaration public NumericForStatementSyntax WithStepValue(ExpressionSyntax stepValue) Parameters Type Name Description ExpressionSyntax stepValue Returns Type Description NumericForStatementSyntax | Improve this Doc View Source WithStepValueCommaToken(SyntaxToken) Declaration public NumericForStatementSyntax WithStepValueCommaToken(SyntaxToken stepValueCommaToken) Parameters Type Name Description SyntaxToken stepValueCommaToken Returns Type Description NumericForStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax.html",
    "title": "Class ParameterListSyntax | Loretta",
    "keywords": "Class ParameterListSyntax Represents a function declaration's parameter list. Inheritance Object SyntaxNode LuaSyntaxNode ParameterListSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ParameterListSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: ParameterList Properties | Improve this Doc View Source CloseParenthesisToken The close parenthesis token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source OpenParenthesisToken The parameter list opening parenthesis. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Parameters The parameter list opening parenthesis. Declaration public SeparatedSyntaxList<ParameterSyntax> Parameters { get; } Property Value Type Description SeparatedSyntaxList < ParameterSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddParameters(ParameterSyntax[]) Declaration public ParameterListSyntax AddParameters(params ParameterSyntax[] items) Parameters Type Name Description ParameterSyntax [] items Returns Type Description ParameterListSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<ParameterSyntax>, SyntaxToken) Declaration public ParameterListSyntax Update(SyntaxToken openParenthesisToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < ParameterSyntax > parameters SyntaxToken closeParenthesisToken Returns Type Description ParameterListSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public ParameterListSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description ParameterListSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public ParameterListSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description ParameterListSyntax | Improve this Doc View Source WithParameters(SeparatedSyntaxList<ParameterSyntax>) Declaration public ParameterListSyntax WithParameters(SeparatedSyntaxList<ParameterSyntax> parameters) Parameters Type Name Description SeparatedSyntaxList < ParameterSyntax > parameters Returns Type Description ParameterListSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ParameterSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ParameterSyntax.html",
    "title": "Class ParameterSyntax | Loretta",
    "keywords": "Class ParameterSyntax The base type for parameter nodes. Inheritance Object SyntaxNode LuaSyntaxNode ParameterSyntax NamedParameterSyntax VarArgParameterSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class ParameterSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax.html",
    "title": "Class ParenthesizedExpressionSyntax | Loretta",
    "keywords": "Class ParenthesizedExpressionSyntax Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax ParenthesizedExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ParenthesizedExpressionSyntax : PrefixExpressionSyntax Remarks This node is associated with the following syntax kinds: ParenthesizedExpression Properties | Improve this Doc View Source CloseParenthesisToken The closing parenthesis token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The inner expression. Declaration public ExpressionSyntax Expression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OpenParenthesisToken The opening parenthesis token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public ParenthesizedExpressionSyntax Update(SyntaxToken openParenthesisToken, ExpressionSyntax expression, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken ExpressionSyntax expression SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedExpressionSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public ParenthesizedExpressionSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedExpressionSyntax | Improve this Doc View Source WithExpression(ExpressionSyntax) Declaration public ParenthesizedExpressionSyntax WithExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description ParenthesizedExpressionSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public ParenthesizedExpressionSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description ParenthesizedExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedTypeSyntax.html",
    "title": "Class ParenthesizedTypeSyntax | Loretta",
    "keywords": "Class ParenthesizedTypeSyntax This node represents a parenthesized type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax ParenthesizedTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ParenthesizedTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: ParenthesizedType Properties | Improve this Doc View Source CloseParenthesisToken Gets the ) token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source OpenParenthesisToken Gets the ( token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the type contained within the parenthesis. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax, SyntaxToken) Declaration public ParenthesizedTypeSyntax Update(SyntaxToken openParenthesisToken, TypeSyntax type, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken TypeSyntax type SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedTypeSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public ParenthesizedTypeSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedTypeSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public ParenthesizedTypeSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description ParenthesizedTypeSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public ParenthesizedTypeSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description ParenthesizedTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax.html",
    "title": "Class PrefixExpressionSyntax | Loretta",
    "keywords": "Class PrefixExpressionSyntax The base node for prefix expressions (expressions that can be called as functions, have methods called on them and/or have members/elements accessed on them). Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax FunctionCallExpressionSyntax MethodCallExpressionSyntax ParenthesizedExpressionSyntax VariableExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class PrefixExpressionSyntax : ExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.html",
    "title": "Class RepeatUntilStatementSyntax | Loretta",
    "keywords": "Class RepeatUntilStatementSyntax Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax RepeatUntilStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class RepeatUntilStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: RepeatUntilStatement Properties | Improve this Doc View Source Body The repeat until's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source Condition The repeat until's condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source RepeatKeyword The 'repeat' until keyword. Declaration public SyntaxToken RepeatKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source UntilKeyword The 'until' keyword. Declaration public SyntaxToken UntilKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public RepeatUntilStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source Update(SyntaxToken, StatementListSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public RepeatUntilStatementSyntax Update(SyntaxToken repeatKeyword, StatementListSyntax body, SyntaxToken untilKeyword, ExpressionSyntax condition, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken repeatKeyword StatementListSyntax body SyntaxToken untilKeyword ExpressionSyntax condition SyntaxToken semicolonToken Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public RepeatUntilStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public RepeatUntilStatementSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source WithRepeatKeyword(SyntaxToken) Declaration public RepeatUntilStatementSyntax WithRepeatKeyword(SyntaxToken repeatKeyword) Parameters Type Name Description SyntaxToken repeatKeyword Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public RepeatUntilStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source WithUntilKeyword(SyntaxToken) Declaration public RepeatUntilStatementSyntax WithUntilKeyword(SyntaxToken untilKeyword) Parameters Type Name Description SyntaxToken untilKeyword Returns Type Description RepeatUntilStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax.html",
    "title": "Class ReturnStatementSyntax | Loretta",
    "keywords": "Class ReturnStatementSyntax Represents a return statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax ReturnStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class ReturnStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: ReturnStatement Properties | Improve this Doc View Source Expressions The expressions being returned. Declaration public SeparatedSyntaxList<ExpressionSyntax> Expressions { get; } Property Value Type Description SeparatedSyntaxList < ExpressionSyntax > | Improve this Doc View Source ReturnKeyword The 'return' keyword. Declaration public SyntaxToken ReturnKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddExpressions(ExpressionSyntax[]) Declaration public ReturnStatementSyntax AddExpressions(params ExpressionSyntax[] items) Parameters Type Name Description ExpressionSyntax [] items Returns Type Description ReturnStatementSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken) Declaration public ReturnStatementSyntax Update(SyntaxToken returnKeyword, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken returnKeyword SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken semicolonToken Returns Type Description ReturnStatementSyntax | Improve this Doc View Source WithExpressions(SeparatedSyntaxList<ExpressionSyntax>) Declaration public ReturnStatementSyntax WithExpressions(SeparatedSyntaxList<ExpressionSyntax> expressions) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > expressions Returns Type Description ReturnStatementSyntax | Improve this Doc View Source WithReturnKeyword(SyntaxToken) Declaration public ReturnStatementSyntax WithReturnKeyword(SyntaxToken returnKeyword) Parameters Type Name Description SyntaxToken returnKeyword Returns Type Description ReturnStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public ReturnStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description ReturnStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax.html",
    "title": "Class SimpleFunctionNameSyntax | Loretta",
    "keywords": "Class SimpleFunctionNameSyntax Represents a function name which is only an identifier. Inheritance Object SyntaxNode LuaSyntaxNode FunctionNameSyntax SimpleFunctionNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class SimpleFunctionNameSyntax : FunctionNameSyntax Remarks This node is associated with the following syntax kinds: SimpleFunctionName Properties | Improve this Doc View Source Name The function name. Declaration public override SyntaxToken Name { get; } Property Value Type Description SyntaxToken Overrides FunctionNameSyntax.Name Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public SimpleFunctionNameSyntax Update(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description SimpleFunctionNameSyntax | Improve this Doc View Source WithName(SyntaxToken) Declaration public SimpleFunctionNameSyntax WithName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description SimpleFunctionNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.SimpleTypeNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.SimpleTypeNameSyntax.html",
    "title": "Class SimpleTypeNameSyntax | Loretta",
    "keywords": "Class SimpleTypeNameSyntax This node reperesents a simple name (T). Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TypeNameSyntax SimpleTypeNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class SimpleTypeNameSyntax : TypeNameSyntax Remarks This node is associated with the following syntax kinds: SimpleTypeName Properties | Improve this Doc View Source IdentifierToken Gets the name of the type. Declaration public SyntaxToken IdentifierToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source TypeArgumentList The type argument list for this generic type. Declaration public override TypeArgumentListSyntax TypeArgumentList { get; } Property Value Type Description TypeArgumentListSyntax Overrides TypeNameSyntax.TypeArgumentList Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTypeArgumentListArguments(TypeSyntax[]) Declaration public SimpleTypeNameSyntax AddTypeArgumentListArguments(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source Update(SyntaxToken, TypeArgumentListSyntax) Declaration public SimpleTypeNameSyntax Update(SyntaxToken identifierToken, TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description SyntaxToken identifierToken TypeArgumentListSyntax typeArgumentList Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source WithIdentifierToken(SyntaxToken) Declaration public SimpleTypeNameSyntax WithIdentifierToken(SyntaxToken identifierToken) Parameters Type Name Description SyntaxToken identifierToken Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source WithTypeArgumentList(TypeArgumentListSyntax) Declaration public SimpleTypeNameSyntax WithTypeArgumentList(TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeArgumentListSyntax typeArgumentList Returns Type Description SimpleTypeNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax.html",
    "title": "Class SkippedTokensTriviaSyntax | Loretta",
    "keywords": "Class SkippedTokensTriviaSyntax Inheritance Object SyntaxNode LuaSyntaxNode StructuredTriviaSyntax SkippedTokensTriviaSyntax Implements IFormattable IStructuredTriviaSyntax Inherited Members StructuredTriviaSyntax.ParentTrivia LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class SkippedTokensTriviaSyntax : StructuredTriviaSyntax, IStructuredTriviaSyntax Remarks This node is associated with the following syntax kinds: SkippedTokensTrivia Properties | Improve this Doc View Source Tokens Declaration public SyntaxTokenList Tokens { get; } Property Value Type Description SyntaxTokenList Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTokens(SyntaxToken[]) Declaration public SkippedTokensTriviaSyntax AddTokens(params SyntaxToken[] items) Parameters Type Name Description SyntaxToken [] items Returns Type Description SkippedTokensTriviaSyntax | Improve this Doc View Source Update(SyntaxTokenList) Declaration public SkippedTokensTriviaSyntax Update(SyntaxTokenList tokens) Parameters Type Name Description SyntaxTokenList tokens Returns Type Description SkippedTokensTriviaSyntax | Improve this Doc View Source WithTokens(SyntaxTokenList) Declaration public SkippedTokensTriviaSyntax WithTokens(SyntaxTokenList tokens) Parameters Type Name Description SyntaxTokenList tokens Returns Type Description SkippedTokensTriviaSyntax Implements IFormattable IStructuredTriviaSyntax Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax.html",
    "title": "Class StatementListSyntax | Loretta",
    "keywords": "Class StatementListSyntax Represents a block of code. Inheritance Object SyntaxNode LuaSyntaxNode StatementListSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class StatementListSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: StatementList Properties | Improve this Doc View Source Statements The list of statements contained within this block. Declaration public SyntaxList<StatementSyntax> Statements { get; } Property Value Type Description SyntaxList < StatementSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddStatements(StatementSyntax[]) Declaration public StatementListSyntax AddStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description StatementListSyntax | Improve this Doc View Source Update(SyntaxList<StatementSyntax>) Declaration public StatementListSyntax Update(SyntaxList<StatementSyntax> statements) Parameters Type Name Description SyntaxList < StatementSyntax > statements Returns Type Description StatementListSyntax | Improve this Doc View Source WithStatements(SyntaxList<StatementSyntax>) Declaration public StatementListSyntax WithStatements(SyntaxList<StatementSyntax> statements) Parameters Type Name Description SyntaxList < StatementSyntax > statements Returns Type Description StatementListSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax.html",
    "title": "Class StatementSyntax | Loretta",
    "keywords": "Class StatementSyntax The base class for statements. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax AssignmentStatementSyntax BreakStatementSyntax CompoundAssignmentStatementSyntax ContinueStatementSyntax DoStatementSyntax EmptyStatementSyntax ExpressionStatementSyntax FunctionDeclarationStatementSyntax GenericForStatementSyntax GotoLabelStatementSyntax GotoStatementSyntax IfStatementSyntax LocalFunctionDeclarationStatementSyntax LocalVariableDeclarationStatementSyntax NumericForStatementSyntax RepeatUntilStatementSyntax ReturnStatementSyntax TypeDeclarationStatementSyntax WhileStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class StatementSyntax : LuaSyntaxNode Properties | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public abstract SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public StatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description StatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax.html",
    "title": "Class StringFunctionArgumentSyntax | Loretta",
    "keywords": "Class StringFunctionArgumentSyntax Represents a string being passed as a function call's argument. Inheritance Object SyntaxNode LuaSyntaxNode FunctionArgumentSyntax StringFunctionArgumentSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class StringFunctionArgumentSyntax : FunctionArgumentSyntax Remarks This node is associated with the following syntax kinds: StringFunctionArgument Properties | Improve this Doc View Source Expression The string literal being passed as an argument. Declaration public LiteralExpressionSyntax Expression { get; } Property Value Type Description LiteralExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(LiteralExpressionSyntax) Declaration public StringFunctionArgumentSyntax Update(LiteralExpressionSyntax expression) Parameters Type Name Description LiteralExpressionSyntax expression Returns Type Description StringFunctionArgumentSyntax | Improve this Doc View Source WithExpression(LiteralExpressionSyntax) Declaration public StringFunctionArgumentSyntax WithExpression(LiteralExpressionSyntax expression) Parameters Type Name Description LiteralExpressionSyntax expression Returns Type Description StringFunctionArgumentSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.StructuredTriviaSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.StructuredTriviaSyntax.html",
    "title": "Class StructuredTriviaSyntax | Loretta",
    "keywords": "Class StructuredTriviaSyntax It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it. Inheritance Object SyntaxNode LuaSyntaxNode StructuredTriviaSyntax SkippedTokensTriviaSyntax Implements IFormattable IStructuredTriviaSyntax Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class StructuredTriviaSyntax : LuaSyntaxNode, IStructuredTriviaSyntax Properties | Improve this Doc View Source ParentTrivia Get parent trivia. Declaration public override SyntaxTrivia ParentTrivia { get; } Property Value Type Description SyntaxTrivia Overrides SyntaxNode.ParentTrivia Implements IFormattable IStructuredTriviaSyntax Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableBasedTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableBasedTypeSyntax.html",
    "title": "Class TableBasedTypeSyntax | Loretta",
    "keywords": "Class TableBasedTypeSyntax This node represents a table based type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TableBasedTypeSyntax ArrayTypeSyntax TableTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class TableBasedTypeSyntax : TypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax.html",
    "title": "Class TableConstructorExpressionSyntax | Loretta",
    "keywords": "Class TableConstructorExpressionSyntax Represents a table constructor expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax TableConstructorExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TableConstructorExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: TableConstructorExpression Properties | Improve this Doc View Source CloseBraceToken The closing brace token. Declaration public SyntaxToken CloseBraceToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Fields The list of fields. Declaration public SeparatedSyntaxList<TableFieldSyntax> Fields { get; } Property Value Type Description SeparatedSyntaxList < TableFieldSyntax > | Improve this Doc View Source OpenBraceToken The opening brace token. Declaration public SyntaxToken OpenBraceToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddFields(TableFieldSyntax[]) Declaration public TableConstructorExpressionSyntax AddFields(params TableFieldSyntax[] items) Parameters Type Name Description TableFieldSyntax [] items Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TableFieldSyntax>, SyntaxToken) Declaration public TableConstructorExpressionSyntax Update(SyntaxToken openBraceToken, SeparatedSyntaxList<TableFieldSyntax> fields, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken SeparatedSyntaxList < TableFieldSyntax > fields SyntaxToken closeBraceToken Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source WithCloseBraceToken(SyntaxToken) Declaration public TableConstructorExpressionSyntax WithCloseBraceToken(SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken closeBraceToken Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source WithFields(SeparatedSyntaxList<TableFieldSyntax>) Declaration public TableConstructorExpressionSyntax WithFields(SeparatedSyntaxList<TableFieldSyntax> fields) Parameters Type Name Description SeparatedSyntaxList < TableFieldSyntax > fields Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source WithOpenBraceToken(SyntaxToken) Declaration public TableConstructorExpressionSyntax WithOpenBraceToken(SyntaxToken openBraceToken) Parameters Type Name Description SyntaxToken openBraceToken Returns Type Description TableConstructorExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax.html",
    "title": "Class TableConstructorFunctionArgumentSyntax | Loretta",
    "keywords": "Class TableConstructorFunctionArgumentSyntax Represents a table being passed as a function call's arguments. Inheritance Object SyntaxNode LuaSyntaxNode FunctionArgumentSyntax TableConstructorFunctionArgumentSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TableConstructorFunctionArgumentSyntax : FunctionArgumentSyntax Remarks This node is associated with the following syntax kinds: TableConstructorFunctionArgument Properties | Improve this Doc View Source TableConstructor The actual table constructor. Declaration public TableConstructorExpressionSyntax TableConstructor { get; } Property Value Type Description TableConstructorExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTableConstructorFields(TableFieldSyntax[]) Declaration public TableConstructorFunctionArgumentSyntax AddTableConstructorFields(params TableFieldSyntax[] items) Parameters Type Name Description TableFieldSyntax [] items Returns Type Description TableConstructorFunctionArgumentSyntax | Improve this Doc View Source Update(TableConstructorExpressionSyntax) Declaration public TableConstructorFunctionArgumentSyntax Update(TableConstructorExpressionSyntax tableConstructor) Parameters Type Name Description TableConstructorExpressionSyntax tableConstructor Returns Type Description TableConstructorFunctionArgumentSyntax | Improve this Doc View Source WithTableConstructor(TableConstructorExpressionSyntax) Declaration public TableConstructorFunctionArgumentSyntax WithTableConstructor(TableConstructorExpressionSyntax tableConstructor) Parameters Type Name Description TableConstructorExpressionSyntax tableConstructor Returns Type Description TableConstructorFunctionArgumentSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableFieldSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableFieldSyntax.html",
    "title": "Class TableFieldSyntax | Loretta",
    "keywords": "Class TableFieldSyntax The base class for table fields. Inheritance Object SyntaxNode LuaSyntaxNode TableFieldSyntax ExpressionKeyedTableFieldSyntax IdentifierKeyedTableFieldSyntax UnkeyedTableFieldSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class TableFieldSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeElementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeElementSyntax.html",
    "title": "Class TableTypeElementSyntax | Loretta",
    "keywords": "Class TableTypeElementSyntax This node represents a type inside of a table type. Inheritance Object SyntaxNode LuaSyntaxNode TableTypeElementSyntax TableTypeIndexerSyntax TableTypePropertySyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class TableTypeElementSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeIndexerSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeIndexerSyntax.html",
    "title": "Class TableTypeIndexerSyntax | Loretta",
    "keywords": "Class TableTypeIndexerSyntax This node represents a table type indexer. Inheritance Object SyntaxNode LuaSyntaxNode TableTypeElementSyntax TableTypeIndexerSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TableTypeIndexerSyntax : TableTypeElementSyntax Remarks This node is associated with the following syntax kinds: TableTypeIndexer Properties | Improve this Doc View Source CloseBracketToken The close bracket token. Declaration public SyntaxToken CloseBracketToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ColonToken The colon token. Declaration public SyntaxToken ColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source IndexType The type's index Declaration public TypeSyntax IndexType { get; } Property Value Type Description TypeSyntax | Improve this Doc View Source OpenBracketToken The open bracket token. Declaration public SyntaxToken OpenBracketToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ValueType The type's value Declaration public TypeSyntax ValueType { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, TypeSyntax) Declaration public TableTypeIndexerSyntax Update(SyntaxToken openBracketToken, TypeSyntax indexType, SyntaxToken closeBracketToken, SyntaxToken colonToken, TypeSyntax valueType) Parameters Type Name Description SyntaxToken openBracketToken TypeSyntax indexType SyntaxToken closeBracketToken SyntaxToken colonToken TypeSyntax valueType Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source WithCloseBracketToken(SyntaxToken) Declaration public TableTypeIndexerSyntax WithCloseBracketToken(SyntaxToken closeBracketToken) Parameters Type Name Description SyntaxToken closeBracketToken Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source WithColonToken(SyntaxToken) Declaration public TableTypeIndexerSyntax WithColonToken(SyntaxToken colonToken) Parameters Type Name Description SyntaxToken colonToken Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source WithIndexType(TypeSyntax) Declaration public TableTypeIndexerSyntax WithIndexType(TypeSyntax indexType) Parameters Type Name Description TypeSyntax indexType Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source WithOpenBracketToken(SyntaxToken) Declaration public TableTypeIndexerSyntax WithOpenBracketToken(SyntaxToken openBracketToken) Parameters Type Name Description SyntaxToken openBracketToken Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source WithValueType(TypeSyntax) Declaration public TableTypeIndexerSyntax WithValueType(TypeSyntax valueType) Parameters Type Name Description TypeSyntax valueType Returns Type Description TableTypeIndexerSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypePropertySyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypePropertySyntax.html",
    "title": "Class TableTypePropertySyntax | Loretta",
    "keywords": "Class TableTypePropertySyntax This node represents a table type property. Inheritance Object SyntaxNode LuaSyntaxNode TableTypeElementSyntax TableTypePropertySyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TableTypePropertySyntax : TableTypeElementSyntax Remarks This node is associated with the following syntax kinds: TableTypeProperty Properties | Improve this Doc View Source ColonToken The colon token. Declaration public SyntaxToken ColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifier The type's index Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ValueType The type's value Declaration public TypeSyntax ValueType { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, TypeSyntax) Declaration public TableTypePropertySyntax Update(SyntaxToken identifier, SyntaxToken colonToken, TypeSyntax valueType) Parameters Type Name Description SyntaxToken identifier SyntaxToken colonToken TypeSyntax valueType Returns Type Description TableTypePropertySyntax | Improve this Doc View Source WithColonToken(SyntaxToken) Declaration public TableTypePropertySyntax WithColonToken(SyntaxToken colonToken) Parameters Type Name Description SyntaxToken colonToken Returns Type Description TableTypePropertySyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public TableTypePropertySyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description TableTypePropertySyntax | Improve this Doc View Source WithValueType(TypeSyntax) Declaration public TableTypePropertySyntax WithValueType(TypeSyntax valueType) Parameters Type Name Description TypeSyntax valueType Returns Type Description TableTypePropertySyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TableTypeSyntax.html",
    "title": "Class TableTypeSyntax | Loretta",
    "keywords": "Class TableTypeSyntax This node represents a table type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TableBasedTypeSyntax TableTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TableTypeSyntax : TableBasedTypeSyntax Remarks This node is associated with the following syntax kinds: TableType Properties | Improve this Doc View Source CloseBraceToken Gets the } token. Declaration public SyntaxToken CloseBraceToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Elements Gets the list of table properties and/or a single indexer. Declaration public SeparatedSyntaxList<TableTypeElementSyntax> Elements { get; } Property Value Type Description SeparatedSyntaxList < TableTypeElementSyntax > | Improve this Doc View Source OpenBraceToken Gets the { token. Declaration public SyntaxToken OpenBraceToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddElements(TableTypeElementSyntax[]) Declaration public TableTypeSyntax AddElements(params TableTypeElementSyntax[] items) Parameters Type Name Description TableTypeElementSyntax [] items Returns Type Description TableTypeSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TableTypeElementSyntax>, SyntaxToken) Declaration public TableTypeSyntax Update(SyntaxToken openBraceToken, SeparatedSyntaxList<TableTypeElementSyntax> elements, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken SeparatedSyntaxList < TableTypeElementSyntax > elements SyntaxToken closeBraceToken Returns Type Description TableTypeSyntax | Improve this Doc View Source WithCloseBraceToken(SyntaxToken) Declaration public TableTypeSyntax WithCloseBraceToken(SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken closeBraceToken Returns Type Description TableTypeSyntax | Improve this Doc View Source WithElements(SeparatedSyntaxList<TableTypeElementSyntax>) Declaration public TableTypeSyntax WithElements(SeparatedSyntaxList<TableTypeElementSyntax> elements) Parameters Type Name Description SeparatedSyntaxList < TableTypeElementSyntax > elements Returns Type Description TableTypeSyntax | Improve this Doc View Source WithOpenBraceToken(SyntaxToken) Declaration public TableTypeSyntax WithOpenBraceToken(SyntaxToken openBraceToken) Parameters Type Name Description SyntaxToken openBraceToken Returns Type Description TableTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeArgumentListSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeArgumentListSyntax.html",
    "title": "Class TypeArgumentListSyntax | Loretta",
    "keywords": "Class TypeArgumentListSyntax This node represents a type argument list. Inheritance Object SyntaxNode LuaSyntaxNode TypeArgumentListSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeArgumentListSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: TypeArgumentList Properties | Improve this Doc View Source Arguments A list of types. Declaration public SeparatedSyntaxList<TypeSyntax> Arguments { get; } Property Value Type Description SeparatedSyntaxList < TypeSyntax > | Improve this Doc View Source GreaterThanToken Gets the > token. Declaration public SyntaxToken GreaterThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LessThanToken Gets the < token. Declaration public SyntaxToken LessThanToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddArguments(TypeSyntax[]) Declaration public TypeArgumentListSyntax AddArguments(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken) Declaration public TypeArgumentListSyntax Update(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeSyntax> arguments, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SeparatedSyntaxList < TypeSyntax > arguments SyntaxToken greaterThanToken Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source WithArguments(SeparatedSyntaxList<TypeSyntax>) Declaration public TypeArgumentListSyntax WithArguments(SeparatedSyntaxList<TypeSyntax> arguments) Parameters Type Name Description SeparatedSyntaxList < TypeSyntax > arguments Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source WithGreaterThanToken(SyntaxToken) Declaration public TypeArgumentListSyntax WithGreaterThanToken(SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken greaterThanToken Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source WithLessThanToken(SyntaxToken) Declaration public TypeArgumentListSyntax WithLessThanToken(SyntaxToken lessThanToken) Parameters Type Name Description SyntaxToken lessThanToken Returns Type Description TypeArgumentListSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeBindingSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeBindingSyntax.html",
    "title": "Class TypeBindingSyntax | Loretta",
    "keywords": "Class TypeBindingSyntax The node representing a type annotation Inheritance Object SyntaxNode LuaSyntaxNode TypeBindingSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeBindingSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: TypeBinding Properties | Improve this Doc View Source ColonToken Gets the : token. Declaration public SyntaxToken ColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the type of the annotation. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax) Declaration public TypeBindingSyntax Update(SyntaxToken colonToken, TypeSyntax type) Parameters Type Name Description SyntaxToken colonToken TypeSyntax type Returns Type Description TypeBindingSyntax | Improve this Doc View Source WithColonToken(SyntaxToken) Declaration public TypeBindingSyntax WithColonToken(SyntaxToken colonToken) Parameters Type Name Description SyntaxToken colonToken Returns Type Description TypeBindingSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public TypeBindingSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description TypeBindingSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeCastExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeCastExpressionSyntax.html",
    "title": "Class TypeCastExpressionSyntax | Loretta",
    "keywords": "Class TypeCastExpressionSyntax This node represents a type cast expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax TypeCastExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeCastExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: TypeCastExpression Properties | Improve this Doc View Source ColonColonToken Gets the :: operator token. Declaration public SyntaxToken ColonColonToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression Gets the expression being cast to another type. Declaration public ExpressionSyntax Expression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source Type Gets the type the expression is being cast to. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(ExpressionSyntax, SyntaxToken, TypeSyntax) Declaration public TypeCastExpressionSyntax Update(ExpressionSyntax expression, SyntaxToken colonColonToken, TypeSyntax type) Parameters Type Name Description ExpressionSyntax expression SyntaxToken colonColonToken TypeSyntax type Returns Type Description TypeCastExpressionSyntax | Improve this Doc View Source WithColonColonToken(SyntaxToken) Declaration public TypeCastExpressionSyntax WithColonColonToken(SyntaxToken colonColonToken) Parameters Type Name Description SyntaxToken colonColonToken Returns Type Description TypeCastExpressionSyntax | Improve this Doc View Source WithExpression(ExpressionSyntax) Declaration public TypeCastExpressionSyntax WithExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description TypeCastExpressionSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public TypeCastExpressionSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description TypeCastExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeDeclarationStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeDeclarationStatementSyntax.html",
    "title": "Class TypeDeclarationStatementSyntax | Loretta",
    "keywords": "Class TypeDeclarationStatementSyntax Represents a type declaration statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax TypeDeclarationStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeDeclarationStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: TypeDeclarationStatement Properties | Improve this Doc View Source EqualsToken The equals token of the type. Declaration public SyntaxToken EqualsToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source ExportKeyword The 'export' keyword. Declaration public SyntaxToken ExportKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name Represents the type's name. Declaration public SyntaxToken Name { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source Type Represents the declared type. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax | Improve this Doc View Source TypeKeyword The 'type' keyword. Declaration public SyntaxToken TypeKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source TypeParameterList The type parameter list for this generic type. Declaration public TypeParameterListSyntax TypeParameterList { get; } Property Value Type Description TypeParameterListSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTypeParameterListNames(TypeParameterSyntax[]) Declaration public TypeDeclarationStatementSyntax AddTypeParameterListNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, SyntaxToken, TypeParameterListSyntax, SyntaxToken, TypeSyntax, SyntaxToken) Declaration public TypeDeclarationStatementSyntax Update(SyntaxToken exportKeyword, SyntaxToken typeKeyword, SyntaxToken name, TypeParameterListSyntax typeParameterList, SyntaxToken equalsToken, TypeSyntax type, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken exportKeyword SyntaxToken typeKeyword SyntaxToken name TypeParameterListSyntax typeParameterList SyntaxToken equalsToken TypeSyntax type SyntaxToken semicolonToken Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithEqualsToken(SyntaxToken) Declaration public TypeDeclarationStatementSyntax WithEqualsToken(SyntaxToken equalsToken) Parameters Type Name Description SyntaxToken equalsToken Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithExportKeyword(SyntaxToken) Declaration public TypeDeclarationStatementSyntax WithExportKeyword(SyntaxToken exportKeyword) Parameters Type Name Description SyntaxToken exportKeyword Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithName(SyntaxToken) Declaration public TypeDeclarationStatementSyntax WithName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public TypeDeclarationStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public TypeDeclarationStatementSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithTypeKeyword(SyntaxToken) Declaration public TypeDeclarationStatementSyntax WithTypeKeyword(SyntaxToken typeKeyword) Parameters Type Name Description SyntaxToken typeKeyword Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source WithTypeParameterList(TypeParameterListSyntax) Declaration public TypeDeclarationStatementSyntax WithTypeParameterList(TypeParameterListSyntax typeParameterList) Parameters Type Name Description TypeParameterListSyntax typeParameterList Returns Type Description TypeDeclarationStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax.html",
    "title": "Class TypedIdentifierNameSyntax | Loretta",
    "keywords": "Class TypedIdentifierNameSyntax This node represents an identifier name with a type binding. Inheritance Object SyntaxNode LuaSyntaxNode TypedIdentifierNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypedIdentifierNameSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: TypedIdentifierName Properties | Improve this Doc View Source IdentifierName The identifier. Declaration public IdentifierNameSyntax IdentifierName { get; } Property Value Type Description IdentifierNameSyntax | Improve this Doc View Source Name This identifier's name. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source TypeBinding The type binding containing the type (if any). Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(IdentifierNameSyntax, TypeBindingSyntax) Declaration public TypedIdentifierNameSyntax Update(IdentifierNameSyntax identifierName, TypeBindingSyntax typeBinding) Parameters Type Name Description IdentifierNameSyntax identifierName TypeBindingSyntax typeBinding Returns Type Description TypedIdentifierNameSyntax | Improve this Doc View Source WithIdentifierName(IdentifierNameSyntax) Declaration public TypedIdentifierNameSyntax WithIdentifierName(IdentifierNameSyntax identifierName) Parameters Type Name Description IdentifierNameSyntax identifierName Returns Type Description TypedIdentifierNameSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public TypedIdentifierNameSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description TypedIdentifierNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeNameSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeNameSyntax.html",
    "title": "Class TypeNameSyntax | Loretta",
    "keywords": "Class TypeNameSyntax This node represents a type's name. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TypeNameSyntax CompositeTypeNameSyntax SimpleTypeNameSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class TypeNameSyntax : TypeSyntax Properties | Improve this Doc View Source TypeArgumentList The type argument list for this generic type. Declaration public abstract TypeArgumentListSyntax TypeArgumentList { get; } Property Value Type Description TypeArgumentListSyntax Methods | Improve this Doc View Source AddTypeArgumentListArguments(TypeSyntax[]) Declaration public TypeNameSyntax AddTypeArgumentListArguments(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description TypeNameSyntax | Improve this Doc View Source WithTypeArgumentList(TypeArgumentListSyntax) Declaration public TypeNameSyntax WithTypeArgumentList(TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeArgumentListSyntax typeArgumentList Returns Type Description TypeNameSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeofTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeofTypeSyntax.html",
    "title": "Class TypeofTypeSyntax | Loretta",
    "keywords": "Class TypeofTypeSyntax This node represents a typeof type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TypeofTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeofTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: TypeofType Properties | Improve this Doc View Source CloseParenthesisToken The close parenthesis token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Expression The typeof call's expression Declaration public ExpressionSyntax Expression { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OpenParenthesisToken The open parenthesis token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source TypeofKeyword The typeof keyword. Declaration public SyntaxToken TypeofKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public TypeofTypeSyntax Update(SyntaxToken typeofKeyword, SyntaxToken openParenthesisToken, ExpressionSyntax expression, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken typeofKeyword SyntaxToken openParenthesisToken ExpressionSyntax expression SyntaxToken closeParenthesisToken Returns Type Description TypeofTypeSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public TypeofTypeSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description TypeofTypeSyntax | Improve this Doc View Source WithExpression(ExpressionSyntax) Declaration public TypeofTypeSyntax WithExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description TypeofTypeSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public TypeofTypeSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description TypeofTypeSyntax | Improve this Doc View Source WithTypeofKeyword(SyntaxToken) Declaration public TypeofTypeSyntax WithTypeofKeyword(SyntaxToken typeofKeyword) Parameters Type Name Description SyntaxToken typeofKeyword Returns Type Description TypeofTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypePackSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypePackSyntax.html",
    "title": "Class TypePackSyntax | Loretta",
    "keywords": "Class TypePackSyntax This node represents a type pack. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax TypePackSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypePackSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: TypePack Properties | Improve this Doc View Source CloseParenthesisToken Gets the ) token. Declaration public SyntaxToken CloseParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source OpenParenthesisToken Gets the ( token. Declaration public SyntaxToken OpenParenthesisToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Types Gets the list of the types of the pack's elements. Declaration public SeparatedSyntaxList<TypeSyntax> Types { get; } Property Value Type Description SeparatedSyntaxList < TypeSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddTypes(TypeSyntax[]) Declaration public TypePackSyntax AddTypes(params TypeSyntax[] items) Parameters Type Name Description TypeSyntax [] items Returns Type Description TypePackSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken) Declaration public TypePackSyntax Update(SyntaxToken openParenthesisToken, SeparatedSyntaxList<TypeSyntax> types, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < TypeSyntax > types SyntaxToken closeParenthesisToken Returns Type Description TypePackSyntax | Improve this Doc View Source WithCloseParenthesisToken(SyntaxToken) Declaration public TypePackSyntax WithCloseParenthesisToken(SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken closeParenthesisToken Returns Type Description TypePackSyntax | Improve this Doc View Source WithOpenParenthesisToken(SyntaxToken) Declaration public TypePackSyntax WithOpenParenthesisToken(SyntaxToken openParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken Returns Type Description TypePackSyntax | Improve this Doc View Source WithTypes(SeparatedSyntaxList<TypeSyntax>) Declaration public TypePackSyntax WithTypes(SeparatedSyntaxList<TypeSyntax> types) Parameters Type Name Description SeparatedSyntaxList < TypeSyntax > types Returns Type Description TypePackSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeParameterListSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeParameterListSyntax.html",
    "title": "Class TypeParameterListSyntax | Loretta",
    "keywords": "Class TypeParameterListSyntax This node represents a type parameter list. Inheritance Object SyntaxNode LuaSyntaxNode TypeParameterListSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeParameterListSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: TypeParameterList Properties | Improve this Doc View Source GreaterThanToken Gets the > token. Declaration public SyntaxToken GreaterThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LessThanToken Gets the < token. Declaration public SyntaxToken LessThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Names A list of types. Declaration public SeparatedSyntaxList<TypeParameterSyntax> Names { get; } Property Value Type Description SeparatedSyntaxList < TypeParameterSyntax > Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddNames(TypeParameterSyntax[]) Declaration public TypeParameterListSyntax AddNames(params TypeParameterSyntax[] items) Parameters Type Name Description TypeParameterSyntax [] items Returns Type Description TypeParameterListSyntax | Improve this Doc View Source Update(SyntaxToken, SeparatedSyntaxList<TypeParameterSyntax>, SyntaxToken) Declaration public TypeParameterListSyntax Update(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeParameterSyntax> names, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SeparatedSyntaxList < TypeParameterSyntax > names SyntaxToken greaterThanToken Returns Type Description TypeParameterListSyntax | Improve this Doc View Source WithGreaterThanToken(SyntaxToken) Declaration public TypeParameterListSyntax WithGreaterThanToken(SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken greaterThanToken Returns Type Description TypeParameterListSyntax | Improve this Doc View Source WithLessThanToken(SyntaxToken) Declaration public TypeParameterListSyntax WithLessThanToken(SyntaxToken lessThanToken) Parameters Type Name Description SyntaxToken lessThanToken Returns Type Description TypeParameterListSyntax | Improve this Doc View Source WithNames(SeparatedSyntaxList<TypeParameterSyntax>) Declaration public TypeParameterListSyntax WithNames(SeparatedSyntaxList<TypeParameterSyntax> names) Parameters Type Name Description SeparatedSyntaxList < TypeParameterSyntax > names Returns Type Description TypeParameterListSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeParameterSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeParameterSyntax.html",
    "title": "Class TypeParameterSyntax | Loretta",
    "keywords": "Class TypeParameterSyntax This node represents a type parameter. Inheritance Object SyntaxNode LuaSyntaxNode TypeParameterSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class TypeParameterSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: TypeParameter Properties | Improve this Doc View Source DotDotDotToken Gets the ... token (if this type parameter is a type pack). Declaration public SyntaxToken DotDotDotToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EqualsType Declaration public EqualsTypeSyntax EqualsType { get; } Property Value Type Description EqualsTypeSyntax | Improve this Doc View Source Identifier Gets the type parameter name identifier token. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, EqualsTypeSyntax) Declaration public TypeParameterSyntax Update(SyntaxToken identifier, SyntaxToken dotDotDotToken, EqualsTypeSyntax equalsType) Parameters Type Name Description SyntaxToken identifier SyntaxToken dotDotDotToken EqualsTypeSyntax equalsType Returns Type Description TypeParameterSyntax | Improve this Doc View Source WithDotDotDotToken(SyntaxToken) Declaration public TypeParameterSyntax WithDotDotDotToken(SyntaxToken dotDotDotToken) Parameters Type Name Description SyntaxToken dotDotDotToken Returns Type Description TypeParameterSyntax | Improve this Doc View Source WithEqualsType(EqualsTypeSyntax) Declaration public TypeParameterSyntax WithEqualsType(EqualsTypeSyntax equalsType) Parameters Type Name Description EqualsTypeSyntax equalsType Returns Type Description TypeParameterSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public TypeParameterSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description TypeParameterSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.TypeSyntax.html",
    "title": "Class TypeSyntax | Loretta",
    "keywords": "Class TypeSyntax The base node for type annotations Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax FunctionTypeSyntax GenericTypePackSyntax IntersectionTypeSyntax LiteralTypeSyntax NilableTypeSyntax ParenthesizedTypeSyntax TableBasedTypeSyntax TypeNameSyntax TypeofTypeSyntax TypePackSyntax UnionTypeSyntax VariadicTypePackSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class TypeSyntax : LuaSyntaxNode Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax.html",
    "title": "Class UnaryExpressionSyntax | Loretta",
    "keywords": "Class UnaryExpressionSyntax Represents an unary expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax UnaryExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class UnaryExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: BitwiseNotExpression LengthExpression LogicalNotExpression UnaryMinusExpression Properties | Improve this Doc View Source Operand The operand expression. Declaration public ExpressionSyntax Operand { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source OperatorToken The operator token. Declaration public SyntaxToken OperatorToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax) Declaration public UnaryExpressionSyntax Update(SyntaxToken operatorToken, ExpressionSyntax operand) Parameters Type Name Description SyntaxToken operatorToken ExpressionSyntax operand Returns Type Description UnaryExpressionSyntax | Improve this Doc View Source WithOperand(ExpressionSyntax) Declaration public UnaryExpressionSyntax WithOperand(ExpressionSyntax operand) Parameters Type Name Description ExpressionSyntax operand Returns Type Description UnaryExpressionSyntax | Improve this Doc View Source WithOperatorToken(SyntaxToken) Declaration public UnaryExpressionSyntax WithOperatorToken(SyntaxToken operatorToken) Parameters Type Name Description SyntaxToken operatorToken Returns Type Description UnaryExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.UnionTypeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.UnionTypeSyntax.html",
    "title": "Class UnionTypeSyntax | Loretta",
    "keywords": "Class UnionTypeSyntax This node represents a union type. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax UnionTypeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class UnionTypeSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: UnionType Properties | Improve this Doc View Source Left Gets the type on the left side of the operator. Declaration public TypeSyntax Left { get; } Property Value Type Description TypeSyntax | Improve this Doc View Source PipeToken Gets the | operator token. Declaration public SyntaxToken PipeToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Right Gets the type on the right side of the operator. Declaration public TypeSyntax Right { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(TypeSyntax, SyntaxToken, TypeSyntax) Declaration public UnionTypeSyntax Update(TypeSyntax left, SyntaxToken pipeToken, TypeSyntax right) Parameters Type Name Description TypeSyntax left SyntaxToken pipeToken TypeSyntax right Returns Type Description UnionTypeSyntax | Improve this Doc View Source WithLeft(TypeSyntax) Declaration public UnionTypeSyntax WithLeft(TypeSyntax left) Parameters Type Name Description TypeSyntax left Returns Type Description UnionTypeSyntax | Improve this Doc View Source WithPipeToken(SyntaxToken) Declaration public UnionTypeSyntax WithPipeToken(SyntaxToken pipeToken) Parameters Type Name Description SyntaxToken pipeToken Returns Type Description UnionTypeSyntax | Improve this Doc View Source WithRight(TypeSyntax) Declaration public UnionTypeSyntax WithRight(TypeSyntax right) Parameters Type Name Description TypeSyntax right Returns Type Description UnionTypeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax.html",
    "title": "Class UnkeyedTableFieldSyntax | Loretta",
    "keywords": "Class UnkeyedTableFieldSyntax Represents a table field without a key. Inheritance Object SyntaxNode LuaSyntaxNode TableFieldSyntax UnkeyedTableFieldSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class UnkeyedTableFieldSyntax : TableFieldSyntax Remarks This node is associated with the following syntax kinds: UnkeyedTableField Properties | Improve this Doc View Source Value The table field's value. Declaration public ExpressionSyntax Value { get; } Property Value Type Description ExpressionSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(ExpressionSyntax) Declaration public UnkeyedTableFieldSyntax Update(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description UnkeyedTableFieldSyntax | Improve this Doc View Source WithValue(ExpressionSyntax) Declaration public UnkeyedTableFieldSyntax WithValue(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description UnkeyedTableFieldSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax.html",
    "title": "Class VarArgExpressionSyntax | Loretta",
    "keywords": "Class VarArgExpressionSyntax Represents a vararg expression. Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax VarArgExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class VarArgExpressionSyntax : ExpressionSyntax Remarks This node is associated with the following syntax kinds: VarArgExpression Properties | Improve this Doc View Source VarArgToken The vararg token. Declaration public SyntaxToken VarArgToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken) Declaration public VarArgExpressionSyntax Update(SyntaxToken varArgToken) Parameters Type Name Description SyntaxToken varArgToken Returns Type Description VarArgExpressionSyntax | Improve this Doc View Source WithVarArgToken(SyntaxToken) Declaration public VarArgExpressionSyntax WithVarArgToken(SyntaxToken varArgToken) Parameters Type Name Description SyntaxToken varArgToken Returns Type Description VarArgExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax.html",
    "title": "Class VarArgParameterSyntax | Loretta",
    "keywords": "Class VarArgParameterSyntax Represents a vararg function parameter. Inheritance Object SyntaxNode LuaSyntaxNode ParameterSyntax VarArgParameterSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class VarArgParameterSyntax : ParameterSyntax Remarks This node is associated with the following syntax kinds: VarArgParameter Properties | Improve this Doc View Source TypeBinding The TypeBindingSyntax containing the (optional) type. Declaration public TypeBindingSyntax TypeBinding { get; } Property Value Type Description TypeBindingSyntax | Improve this Doc View Source VarArgToken The vararg token. Declaration public SyntaxToken VarArgToken { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeBindingSyntax) Declaration public VarArgParameterSyntax Update(SyntaxToken varArgToken, TypeBindingSyntax typeBinding) Parameters Type Name Description SyntaxToken varArgToken TypeBindingSyntax typeBinding Returns Type Description VarArgParameterSyntax | Improve this Doc View Source WithTypeBinding(TypeBindingSyntax) Declaration public VarArgParameterSyntax WithTypeBinding(TypeBindingSyntax typeBinding) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description VarArgParameterSyntax | Improve this Doc View Source WithVarArgToken(SyntaxToken) Declaration public VarArgParameterSyntax WithVarArgToken(SyntaxToken varArgToken) Parameters Type Name Description SyntaxToken varArgToken Returns Type Description VarArgParameterSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax.html",
    "title": "Class VariableAttributeSyntax | Loretta",
    "keywords": "Class VariableAttributeSyntax Represents a variable attribute syntax. Inheritance Object SyntaxNode LuaSyntaxNode VariableAttributeSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class VariableAttributeSyntax : LuaSyntaxNode Remarks This node is associated with the following syntax kinds: VariableAttribute Properties | Improve this Doc View Source GreaterThanToken The trailing > token. Declaration public SyntaxToken GreaterThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Identifier The attribute name identifier token. Declaration public SyntaxToken Identifier { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source LessThanToken The leading < token. Declaration public SyntaxToken LessThanToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Name The name of the attribute. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, SyntaxToken, SyntaxToken) Declaration public VariableAttributeSyntax Update(SyntaxToken lessThanToken, SyntaxToken identifier, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SyntaxToken identifier SyntaxToken greaterThanToken Returns Type Description VariableAttributeSyntax | Improve this Doc View Source WithGreaterThanToken(SyntaxToken) Declaration public VariableAttributeSyntax WithGreaterThanToken(SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken greaterThanToken Returns Type Description VariableAttributeSyntax | Improve this Doc View Source WithIdentifier(SyntaxToken) Declaration public VariableAttributeSyntax WithIdentifier(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description VariableAttributeSyntax | Improve this Doc View Source WithLessThanToken(SyntaxToken) Declaration public VariableAttributeSyntax WithLessThanToken(SyntaxToken lessThanToken) Parameters Type Name Description SyntaxToken lessThanToken Returns Type Description VariableAttributeSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.VariableExpressionSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.VariableExpressionSyntax.html",
    "title": "Class VariableExpressionSyntax | Loretta",
    "keywords": "Class VariableExpressionSyntax The base class for variable expressions (values that can be assigned to). Inheritance Object SyntaxNode LuaSyntaxNode ExpressionSyntax PrefixExpressionSyntax VariableExpressionSyntax ElementAccessExpressionSyntax IdentifierNameSyntax MemberAccessExpressionSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Accept<TResult>(LuaSyntaxVisitor<TResult>) LuaSyntaxNode.Accept(LuaSyntaxVisitor) LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public abstract class VariableExpressionSyntax : PrefixExpressionSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.VariadicTypePackSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.VariadicTypePackSyntax.html",
    "title": "Class VariadicTypePackSyntax | Loretta",
    "keywords": "Class VariadicTypePackSyntax This node represents a variadic type pack. Inheritance Object SyntaxNode LuaSyntaxNode TypeSyntax VariadicTypePackSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class VariadicTypePackSyntax : TypeSyntax Remarks This node is associated with the following syntax kinds: VariadicTypePack Properties | Improve this Doc View Source DotDotDotToken The ... token. Declaration public SyntaxToken DotDotDotToken { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source Type Gets the type the expression is being cast to. Declaration public TypeSyntax Type { get; } Property Value Type Description TypeSyntax Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source Update(SyntaxToken, TypeSyntax) Declaration public VariadicTypePackSyntax Update(SyntaxToken dotDotDotToken, TypeSyntax type) Parameters Type Name Description SyntaxToken dotDotDotToken TypeSyntax type Returns Type Description VariadicTypePackSyntax | Improve this Doc View Source WithDotDotDotToken(SyntaxToken) Declaration public VariadicTypePackSyntax WithDotDotDotToken(SyntaxToken dotDotDotToken) Parameters Type Name Description SyntaxToken dotDotDotToken Returns Type Description VariadicTypePackSyntax | Improve this Doc View Source WithType(TypeSyntax) Declaration public VariadicTypePackSyntax WithType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description VariadicTypePackSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.html",
    "title": "Class WhileStatementSyntax | Loretta",
    "keywords": "Class WhileStatementSyntax Represents a while statement. Inheritance Object SyntaxNode LuaSyntaxNode StatementSyntax WhileStatementSyntax Implements IFormattable Inherited Members LuaSyntaxNode.Kind() LuaSyntaxNode.Language LuaSyntaxNode.GetLeadingTrivia() LuaSyntaxNode.GetTrailingTrivia() LuaSyntaxNode.DeserializeFrom(Stream, CancellationToken) LuaSyntaxNode.GetLocation() LuaSyntaxNode.GetDiagnostics() LuaSyntaxNode.GetFirstToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.GetLastToken(Boolean, Boolean, Boolean, Boolean) LuaSyntaxNode.FindToken(Int32, Boolean) LuaSyntaxNode.FindTrivia(Int32, Func<SyntaxTrivia, Boolean>) LuaSyntaxNode.FindTrivia(Int32, Boolean) SyntaxNode.RawKind SyntaxNode.SyntaxTree SyntaxNode.FullSpan SyntaxNode.Span SyntaxNode.SpanStart SyntaxNode.ToString() SyntaxNode.ToFullString() SyntaxNode.WriteTo(TextWriter) SyntaxNode.GetText(Encoding, SourceHashAlgorithm) SyntaxNode.IsEquivalentTo(SyntaxNode) SyntaxNode.IsIncrementallyIdenticalTo(SyntaxNode) SyntaxNode.IsMissing SyntaxNode.IsPartOfStructuredTrivia() SyntaxNode.IsStructuredTrivia SyntaxNode.HasStructuredTrivia SyntaxNode.ContainsSkippedText SyntaxNode.ContainsDirectives SyntaxNode.ContainsDiagnostics SyntaxNode.Contains(SyntaxNode) SyntaxNode.HasLeadingTrivia SyntaxNode.HasTrailingTrivia SyntaxNode.GetReference() SyntaxNode.Parent SyntaxNode.ParentTrivia SyntaxNode.ChildNodesAndTokens() SyntaxNode.ChildThatContainsPosition(Int32) SyntaxNode.ChildNodes() SyntaxNode.Ancestors(Boolean) SyntaxNode.AncestorsAndSelf(Boolean) SyntaxNode.FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) SyntaxNode.FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) SyntaxNode.DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindNode(TextSpan, Boolean, Boolean) SyntaxNode.ChildTokens() SyntaxNode.DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) SyntaxNode.DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) SyntaxNode.ContainsAnnotations SyntaxNode.HasAnnotations(String) SyntaxNode.HasAnnotations(IEnumerable<String>) SyntaxNode.HasAnnotation(SyntaxAnnotation) SyntaxNode.GetAnnotations(String) SyntaxNode.GetAnnotations(IEnumerable<String>) SyntaxNode.GetAnnotatedNodesAndTokens(String) SyntaxNode.GetAnnotatedNodesAndTokens(String[]) SyntaxNode.GetAnnotatedNodesAndTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(SyntaxAnnotation) SyntaxNode.GetAnnotatedNodes(String) SyntaxNode.GetAnnotatedTokens(SyntaxAnnotation) SyntaxNode.GetAnnotatedTokens(String) SyntaxNode.GetAnnotatedTrivia(String) SyntaxNode.GetAnnotatedTrivia(String[]) SyntaxNode.GetAnnotatedTrivia(SyntaxAnnotation) SyntaxNode.CopyAnnotationsTo<T>(T) SyntaxNode.IsEquivalentTo(SyntaxNode, Boolean) SyntaxNode.SerializeTo(Stream, CancellationToken) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Lua.Syntax Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public sealed class WhileStatementSyntax : StatementSyntax Remarks This node is associated with the following syntax kinds: WhileStatement Properties | Improve this Doc View Source Body The while's body. Declaration public StatementListSyntax Body { get; } Property Value Type Description StatementListSyntax | Improve this Doc View Source Condition The while's condition. Declaration public ExpressionSyntax Condition { get; } Property Value Type Description ExpressionSyntax | Improve this Doc View Source DoKeyword The 'do' keyword. Declaration public SyntaxToken DoKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source EndKeyword The 'end' keyword. Declaration public SyntaxToken EndKeyword { get; } Property Value Type Description SyntaxToken | Improve this Doc View Source SemicolonToken The semicolon at the end of the statement (if any). Declaration public override SyntaxToken SemicolonToken { get; } Property Value Type Description SyntaxToken Overrides StatementSyntax.SemicolonToken | Improve this Doc View Source WhileKeyword The 'while' keyword. Declaration public SyntaxToken WhileKeyword { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Accept(LuaSyntaxVisitor) Declaration public override void Accept(LuaSyntaxVisitor visitor) Parameters Type Name Description LuaSyntaxVisitor visitor Overrides LuaSyntaxNode.Accept(LuaSyntaxVisitor) | Improve this Doc View Source Accept<TResult>(LuaSyntaxVisitor<TResult>) Declaration public override TResult Accept<TResult>(LuaSyntaxVisitor<TResult> visitor) Parameters Type Name Description LuaSyntaxVisitor <TResult> visitor Returns Type Description TResult Type Parameters Name Description TResult Overrides Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>) | Improve this Doc View Source AddBodyStatements(StatementSyntax[]) Declaration public WhileStatementSyntax AddBodyStatements(params StatementSyntax[] items) Parameters Type Name Description StatementSyntax [] items Returns Type Description WhileStatementSyntax | Improve this Doc View Source Update(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Declaration public WhileStatementSyntax Update(SyntaxToken whileKeyword, ExpressionSyntax condition, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken whileKeyword ExpressionSyntax condition SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithBody(StatementListSyntax) Declaration public WhileStatementSyntax WithBody(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithCondition(ExpressionSyntax) Declaration public WhileStatementSyntax WithCondition(ExpressionSyntax condition) Parameters Type Name Description ExpressionSyntax condition Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithDoKeyword(SyntaxToken) Declaration public WhileStatementSyntax WithDoKeyword(SyntaxToken doKeyword) Parameters Type Name Description SyntaxToken doKeyword Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithEndKeyword(SyntaxToken) Declaration public WhileStatementSyntax WithEndKeyword(SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken endKeyword Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithSemicolonToken(SyntaxToken) Declaration public WhileStatementSyntax WithSemicolonToken(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description WhileStatementSyntax | Improve this Doc View Source WithWhileKeyword(SyntaxToken) Declaration public WhileStatementSyntax WithWhileKeyword(SyntaxToken whileKeyword) Parameters Type Name Description SyntaxToken whileKeyword Returns Type Description WhileStatementSyntax Implements IFormattable Extension Methods LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.Lua.SyntaxExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SyntaxExtensions.html",
    "title": "Class SyntaxExtensions | Loretta",
    "keywords": "Class SyntaxExtensions Extension methods for the Lua syntax. Inheritance Object SyntaxExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class SyntaxExtensions Methods | Improve this Doc View Source NormalizeWhitespace(SyntaxToken, String, Boolean) Creates a new syntax token with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static SyntaxToken NormalizeWhitespace(this SyntaxToken token, string indentation, bool elasticTrivia) Parameters Type Name Description SyntaxToken token The token to normalize. String indentation A sequence of whitespace characters that defines a single level of indentation. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description SyntaxToken | Improve this Doc View Source NormalizeWhitespace(SyntaxToken, String, String, Boolean) Creates a new syntax token with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static SyntaxToken NormalizeWhitespace(this SyntaxToken token, string indentation = \" \", string eol = \"\\r\\n\", bool elasticTrivia = false) Parameters Type Name Description SyntaxToken token The token to normalize. String indentation An optional sequence of whitespace characters that defines a single level of indentation. String eol An optional sequence of whitespace characters used for end of line. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description SyntaxToken | Improve this Doc View Source NormalizeWhitespace(SyntaxTriviaList, String, Boolean) Creates a new syntax trivia list with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static SyntaxTriviaList NormalizeWhitespace(this SyntaxTriviaList list, string indentation, bool elasticTrivia) Parameters Type Name Description SyntaxTriviaList list The trivia list to normalize. String indentation A sequence of whitespace characters that defines a single level of indentation. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description SyntaxTriviaList | Improve this Doc View Source NormalizeWhitespace(SyntaxTriviaList, String, String, Boolean) Creates a new syntax trivia list with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static SyntaxTriviaList NormalizeWhitespace(this SyntaxTriviaList list, string indentation = \" \", string eol = \"\\r\\n\", bool elasticTrivia = false) Parameters Type Name Description SyntaxTriviaList list The trivia list to normalize. String indentation An optional sequence of whitespace characters that defines a single level of indentation. String eol An optional sequence of whitespace characters used for end of line. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description SyntaxTriviaList | Improve this Doc View Source ToSyntaxTriviaList(IEnumerable<SyntaxTrivia>) Creates a SyntaxTriviaList from an of SyntaxTrivia . Declaration public static SyntaxTriviaList ToSyntaxTriviaList(this IEnumerable<SyntaxTrivia> sequence) Parameters Type Name Description IEnumerable < SyntaxTrivia > sequence Returns Type Description SyntaxTriviaList"
  },
  "api/Loretta.CodeAnalysis.Lua.SyntaxFactory.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SyntaxFactory.html",
    "title": "Class SyntaxFactory | Loretta",
    "keywords": "Class SyntaxFactory A class containing factory methods for constructing syntax nodes, tokens and trivia. Inheritance Object SyntaxFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class SyntaxFactory Properties | Improve this Doc View Source CarriageReturn A trivia with kind EndOfLineTrivia containing a single carriage return character. Declaration public static SyntaxTrivia CarriageReturn { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source CarriageReturnLineFeed A trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters. Declaration public static SyntaxTrivia CarriageReturnLineFeed { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticCarriageReturn An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticCarriageReturn { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticCarriageReturnLineFeed An elastic trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticCarriageReturnLineFeed { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticLineFeed An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticLineFeed { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticMarker An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included automatically by factory methods when trivia is not specified. Syntax formatting will replace elastic markers with appropriate trivia. Declaration public static SyntaxTrivia ElasticMarker { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticSpace An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticSpace { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source ElasticTab An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticTab { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source LineFeed A trivia with kind EndOfLineTrivia containing a single line feed character. Declaration public static SyntaxTrivia LineFeed { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source Space A trivia with kind WhitespaceTrivia containing a single space character. Declaration public static SyntaxTrivia Space { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source Tab A trivia with kind WhitespaceTrivia containing a single tab character. Declaration public static SyntaxTrivia Tab { get; } Property Value Type Description SyntaxTrivia Methods | Improve this Doc View Source AnonymousFunctionExpression(ParameterListSyntax, StatementListSyntax) Creates a new AnonymousFunctionExpressionSyntax instance. Declaration public static AnonymousFunctionExpressionSyntax AnonymousFunctionExpression(ParameterListSyntax parameters, StatementListSyntax body) Parameters Type Name Description ParameterListSyntax parameters StatementListSyntax body Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source AnonymousFunctionExpression(TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax) Creates a new AnonymousFunctionExpressionSyntax instance. Declaration public static AnonymousFunctionExpressionSyntax AnonymousFunctionExpression(TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body) Parameters Type Name Description TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source AnonymousFunctionExpression(SyntaxToken, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken) Creates a new AnonymousFunctionExpressionSyntax node. Declaration public static AnonymousFunctionExpressionSyntax AnonymousFunctionExpression(SyntaxToken functionKeyword, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword) Parameters Type Name Description SyntaxToken functionKeyword TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword Returns Type Description AnonymousFunctionExpressionSyntax | Improve this Doc View Source AreEquivalent(SyntaxNode, SyntaxNode, Boolean) Determines if two syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, bool topLevel) Parameters Type Name Description SyntaxNode oldNode The old node. SyntaxNode newNode The new node. Boolean topLevel If true then the nodes are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean | Improve this Doc View Source AreEquivalent(SyntaxNode, SyntaxNode, Nullable<Func<SyntaxKind, Boolean>>) Determines if two syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent(SyntaxNode oldNode, SyntaxNode newNode, Func<SyntaxKind, bool>? ignoreChildNode = null) Parameters Type Name Description SyntaxNode oldNode The old node. SyntaxNode newNode The new node. Nullable < Func < SyntaxKind , Boolean >> ignoreChildNode If specified called for every child syntax node (not token) that is visited during the comparison. If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded. Returns Type Description Boolean | Improve this Doc View Source AreEquivalent(SyntaxToken, SyntaxToken) Determines if two syntax tokens are the same, disregarding trivia differences. Declaration public static bool AreEquivalent(SyntaxToken oldToken, SyntaxToken newToken) Parameters Type Name Description SyntaxToken oldToken The old token. SyntaxToken newToken The new token. Returns Type Description Boolean | Improve this Doc View Source AreEquivalent(SyntaxTokenList, SyntaxTokenList) Determines if two lists of tokens are the same, disregarding trivia differences. Declaration public static bool AreEquivalent(SyntaxTokenList oldList, SyntaxTokenList newList) Parameters Type Name Description SyntaxTokenList oldList The old token list. SyntaxTokenList newList The new token list. Returns Type Description Boolean | Improve this Doc View Source AreEquivalent(SyntaxTree, SyntaxTree, Boolean) Determines if two trees are the same, disregarding trivia differences. Declaration public static bool AreEquivalent(SyntaxTree oldTree, SyntaxTree newTree, bool topLevel) Parameters Type Name Description SyntaxTree oldTree The original tree. SyntaxTree newTree The new tree. Boolean topLevel If true then the trees are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean | Improve this Doc View Source AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, Boolean) Determines if two lists of syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, bool topLevel) where TNode : SyntaxNode Parameters Type Name Description SeparatedSyntaxList <TNode> oldList The old list. SeparatedSyntaxList <TNode> newList The new list. Boolean topLevel If true then the nodes are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source AreEquivalent<TNode>(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>, Nullable<Func<SyntaxKind, Boolean>>) Determines if two lists of syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent<TNode>(SeparatedSyntaxList<TNode> oldList, SeparatedSyntaxList<TNode> newList, Func<SyntaxKind, bool>? ignoreChildNode = null) where TNode : SyntaxNode Parameters Type Name Description SeparatedSyntaxList <TNode> oldList The old list. SeparatedSyntaxList <TNode> newList The new list. Nullable < Func < SyntaxKind , Boolean >> ignoreChildNode If specified called for every child syntax node (not token) that is visited during the comparison. If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded. Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, Boolean) Determines if two lists of syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, bool topLevel) where TNode : LuaSyntaxNode Parameters Type Name Description SyntaxList <TNode> oldList The old list. SyntaxList <TNode> newList The new list. Boolean topLevel If true then the nodes are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source AreEquivalent<TNode>(SyntaxList<TNode>, SyntaxList<TNode>, Nullable<Func<SyntaxKind, Boolean>>) Determines if two lists of syntax nodes are the same, disregarding trivia differences. Declaration public static bool AreEquivalent<TNode>(SyntaxList<TNode> oldList, SyntaxList<TNode> newList, Func<SyntaxKind, bool>? ignoreChildNode = null) where TNode : SyntaxNode Parameters Type Name Description SyntaxList <TNode> oldList The old list. SyntaxList <TNode> newList The new list. Nullable < Func < SyntaxKind , Boolean >> ignoreChildNode If specified called for every child syntax node (not token) that is visited during the comparison. If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded. Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source ArrayType(TypeSyntax) Creates a new ArrayTypeSyntax instance. Declaration public static ArrayTypeSyntax ArrayType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description ArrayTypeSyntax | Improve this Doc View Source ArrayType(SyntaxToken, TypeSyntax, SyntaxToken) Creates a new ArrayTypeSyntax node. Declaration public static ArrayTypeSyntax ArrayType(SyntaxToken openBraceToken, TypeSyntax type, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken TypeSyntax type SyntaxToken closeBraceToken Returns Type Description ArrayTypeSyntax | Improve this Doc View Source AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax>, EqualsValuesClauseSyntax) Creates a new AssignmentStatementSyntax instance. Declaration public static AssignmentStatementSyntax AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax> variables, EqualsValuesClauseSyntax equalsValues) Parameters Type Name Description SeparatedSyntaxList < PrefixExpressionSyntax > variables EqualsValuesClauseSyntax equalsValues Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax>, EqualsValuesClauseSyntax, SyntaxToken) Creates a new AssignmentStatementSyntax node. Declaration public static AssignmentStatementSyntax AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax> variables, EqualsValuesClauseSyntax equalsValues, SyntaxToken semicolonToken) Parameters Type Name Description SeparatedSyntaxList < PrefixExpressionSyntax > variables EqualsValuesClauseSyntax equalsValues SyntaxToken semicolonToken Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax>, SeparatedSyntaxList<ExpressionSyntax>) Creates a new AssignmentStatementSyntax node. Declaration public static AssignmentStatementSyntax AssignmentStatement(SeparatedSyntaxList<PrefixExpressionSyntax> variables, SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SeparatedSyntaxList < PrefixExpressionSyntax > variables SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description AssignmentStatementSyntax | Improve this Doc View Source BadToken(SyntaxTriviaList, String, SyntaxTriviaList) Creates a token with kind BadToken. Declaration public static SyntaxToken BadToken(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the bad token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source BinaryExpression(SyntaxKind, ExpressionSyntax, SyntaxToken, ExpressionSyntax) Creates a new BinaryExpressionSyntax node. Declaration public static BinaryExpressionSyntax BinaryExpression(SyntaxKind kind, ExpressionSyntax left, SyntaxToken operatorToken, ExpressionSyntax right) Parameters Type Name Description SyntaxKind kind ExpressionSyntax left SyntaxToken operatorToken ExpressionSyntax right Returns Type Description BinaryExpressionSyntax | Improve this Doc View Source BreakStatement() Creates a new BreakStatementSyntax instance. Declaration public static BreakStatementSyntax BreakStatement() Returns Type Description BreakStatementSyntax | Improve this Doc View Source BreakStatement(SyntaxToken, SyntaxToken) Creates a new BreakStatementSyntax node. Declaration public static BreakStatementSyntax BreakStatement(SyntaxToken breakKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken breakKeyword SyntaxToken semicolonToken Returns Type Description BreakStatementSyntax | Improve this Doc View Source Comment(String) Creates a trivia with kind either SingleLineCommentTrivia or MultiLineCommentTrivia containing the specified text. Declaration public static SyntaxTrivia Comment(string text) Parameters Type Name Description String text The entire text of the comment including the leading '--' or '//' token for single line comments or stop or start tokens for multiline comments. Returns Type Description SyntaxTrivia | Improve this Doc View Source CompilationUnit(StatementListSyntax) Creates a new CompilationUnitSyntax instance. Declaration public static CompilationUnitSyntax CompilationUnit(StatementListSyntax statements) Parameters Type Name Description StatementListSyntax statements Returns Type Description CompilationUnitSyntax | Improve this Doc View Source CompilationUnit(StatementListSyntax, SyntaxToken) Creates a new CompilationUnitSyntax node. Declaration public static CompilationUnitSyntax CompilationUnit(StatementListSyntax statements, SyntaxToken endOfFileToken) Parameters Type Name Description StatementListSyntax statements SyntaxToken endOfFileToken Returns Type Description CompilationUnitSyntax | Improve this Doc View Source CompositeTypeName(TypeNameSyntax, SyntaxToken) Creates a new CompositeTypeNameSyntax instance. Declaration public static CompositeTypeNameSyntax CompositeTypeName(TypeNameSyntax base, SyntaxToken identifierToken) Parameters Type Name Description TypeNameSyntax base SyntaxToken identifierToken Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source CompositeTypeName(TypeNameSyntax, SyntaxToken, TypeArgumentListSyntax) Creates a new CompositeTypeNameSyntax instance. Declaration public static CompositeTypeNameSyntax CompositeTypeName(TypeNameSyntax base, SyntaxToken identifierToken, TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeNameSyntax base SyntaxToken identifierToken TypeArgumentListSyntax typeArgumentList Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source CompositeTypeName(TypeNameSyntax, SyntaxToken, SyntaxToken, TypeArgumentListSyntax) Creates a new CompositeTypeNameSyntax node. Declaration public static CompositeTypeNameSyntax CompositeTypeName(TypeNameSyntax base, SyntaxToken dotToken, SyntaxToken identifierToken, TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description TypeNameSyntax base SyntaxToken dotToken SyntaxToken identifierToken TypeArgumentListSyntax typeArgumentList Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source CompositeTypeName(TypeNameSyntax, String) Creates a new CompositeTypeNameSyntax instance. Declaration public static CompositeTypeNameSyntax CompositeTypeName(TypeNameSyntax base, string identifierToken) Parameters Type Name Description TypeNameSyntax base String identifierToken Returns Type Description CompositeTypeNameSyntax | Improve this Doc View Source CompoundAssignmentStatement(SyntaxKind, PrefixExpressionSyntax, ExpressionSyntax) Creates a new CompoundAssignmentStatementSyntax instance. Declaration public static CompoundAssignmentStatementSyntax CompoundAssignmentStatement(SyntaxKind kind, PrefixExpressionSyntax variable, ExpressionSyntax expression) Parameters Type Name Description SyntaxKind kind PrefixExpressionSyntax variable ExpressionSyntax expression Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source CompoundAssignmentStatement(SyntaxKind, PrefixExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Creates a new CompoundAssignmentStatementSyntax node. Declaration public static CompoundAssignmentStatementSyntax CompoundAssignmentStatement(SyntaxKind kind, PrefixExpressionSyntax variable, SyntaxToken assignmentOperatorToken, ExpressionSyntax expression, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxKind kind PrefixExpressionSyntax variable SyntaxToken assignmentOperatorToken ExpressionSyntax expression SyntaxToken semicolonToken Returns Type Description CompoundAssignmentStatementSyntax | Improve this Doc View Source ContinueStatement() Creates a new ContinueStatementSyntax instance. Declaration public static ContinueStatementSyntax ContinueStatement() Returns Type Description ContinueStatementSyntax | Improve this Doc View Source ContinueStatement(SyntaxToken, SyntaxToken) Creates a new ContinueStatementSyntax node. Declaration public static ContinueStatementSyntax ContinueStatement(SyntaxToken continueKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken continueKeyword SyntaxToken semicolonToken Returns Type Description ContinueStatementSyntax | Improve this Doc View Source DoStatement(StatementListSyntax) Creates a new DoStatementSyntax instance. Declaration public static DoStatementSyntax DoStatement(StatementListSyntax body) Parameters Type Name Description StatementListSyntax body Returns Type Description DoStatementSyntax | Improve this Doc View Source DoStatement(SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new DoStatementSyntax node. Declaration public static DoStatementSyntax DoStatement(SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description DoStatementSyntax | Improve this Doc View Source ElasticEndOfLine(String) Creates a trivia with kind EndOfLineTrivia containing the specified text. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticEndOfLine(string text) Parameters Type Name Description String text The text of the end of line. Any text can be specified here, however only carriage return and line feed characters are recognized by the parser as end of line. Returns Type Description SyntaxTrivia | Improve this Doc View Source ElasticWhitespace(String) Creates a trivia with kind WhitespaceTrivia containing the specified text. Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not preserved during formatting. Declaration public static SyntaxTrivia ElasticWhitespace(string text) Parameters Type Name Description String text The text of the whitespace. Any text can be specified here, however only specific whitespace characters are recognized by the parser. Returns Type Description SyntaxTrivia | Improve this Doc View Source ElementAccessExpression(PrefixExpressionSyntax, ExpressionSyntax) Creates a new ElementAccessExpressionSyntax instance. Declaration public static ElementAccessExpressionSyntax ElementAccessExpression(PrefixExpressionSyntax expression, ExpressionSyntax keyExpression) Parameters Type Name Description PrefixExpressionSyntax expression ExpressionSyntax keyExpression Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source ElementAccessExpression(PrefixExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Creates a new ElementAccessExpressionSyntax node. Declaration public static ElementAccessExpressionSyntax ElementAccessExpression(PrefixExpressionSyntax expression, SyntaxToken openBracketToken, ExpressionSyntax keyExpression, SyntaxToken closeBracketToken) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken openBracketToken ExpressionSyntax keyExpression SyntaxToken closeBracketToken Returns Type Description ElementAccessExpressionSyntax | Improve this Doc View Source ElseClause(StatementListSyntax) Creates a new ElseClauseSyntax instance. Declaration public static ElseClauseSyntax ElseClause(StatementListSyntax elseBody) Parameters Type Name Description StatementListSyntax elseBody Returns Type Description ElseClauseSyntax | Improve this Doc View Source ElseClause(SyntaxToken, StatementListSyntax) Creates a new ElseClauseSyntax comment. Declaration public static ElseClauseSyntax ElseClause(SyntaxToken elseKeyword, StatementListSyntax elseBody) Parameters Type Name Description SyntaxToken elseKeyword StatementListSyntax elseBody Returns Type Description ElseClauseSyntax | Improve this Doc View Source ElseIfClause(ExpressionSyntax, StatementListSyntax) Creates a new ElseIfClauseSyntax instance. Declaration public static ElseIfClauseSyntax ElseIfClause(ExpressionSyntax condition, StatementListSyntax body) Parameters Type Name Description ExpressionSyntax condition StatementListSyntax body Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source ElseIfClause(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax) Creates a new ElseIfClauseSyntax node. Declaration public static ElseIfClauseSyntax ElseIfClause(SyntaxToken elseIfKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, StatementListSyntax body) Parameters Type Name Description SyntaxToken elseIfKeyword ExpressionSyntax condition SyntaxToken thenKeyword StatementListSyntax body Returns Type Description ElseIfClauseSyntax | Improve this Doc View Source ElseIfExpressionClause(ExpressionSyntax, ExpressionSyntax) Creates a new ElseIfExpressionClauseSyntax instance. Declaration public static ElseIfExpressionClauseSyntax ElseIfExpressionClause(ExpressionSyntax condition, ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax condition ExpressionSyntax value Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source ElseIfExpressionClause(SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax) Declaration public static ElseIfExpressionClauseSyntax ElseIfExpressionClause(SyntaxToken elseIfKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, ExpressionSyntax value) Parameters Type Name Description SyntaxToken elseIfKeyword ExpressionSyntax condition SyntaxToken thenKeyword ExpressionSyntax value Returns Type Description ElseIfExpressionClauseSyntax | Improve this Doc View Source EmptyStatement() Creates a new EmptyStatementSyntax instance. Declaration public static EmptyStatementSyntax EmptyStatement() Returns Type Description EmptyStatementSyntax | Improve this Doc View Source EmptyStatement(SyntaxToken) Creates a new EmptyStatementSyntax node. Declaration public static EmptyStatementSyntax EmptyStatement(SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken semicolonToken Returns Type Description EmptyStatementSyntax | Improve this Doc View Source EndOfLine(String) Creates a trivia with kind EndOfLineTrivia containing the specified text. Declaration public static SyntaxTrivia EndOfLine(string text) Parameters Type Name Description String text The text of the end of line. Any text can be specified here, however only carriage return and line feed characters are recognized by the parser as end of line. Returns Type Description SyntaxTrivia | Improve this Doc View Source EqualsType(TypeSyntax) Creates a new EqualsTypeSyntax instance. Declaration public static EqualsTypeSyntax EqualsType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description EqualsTypeSyntax | Improve this Doc View Source EqualsType(SyntaxToken, TypeSyntax) Creates a new EqualsTypeSyntax node. Declaration public static EqualsTypeSyntax EqualsType(SyntaxToken equalsToken, TypeSyntax type) Parameters Type Name Description SyntaxToken equalsToken TypeSyntax type Returns Type Description EqualsTypeSyntax | Improve this Doc View Source EqualsValuesClause(SeparatedSyntaxList<ExpressionSyntax>) Creates a new EqualsValuesClauseSyntax instance. Declaration public static EqualsValuesClauseSyntax EqualsValuesClause(SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description EqualsValuesClauseSyntax | Improve this Doc View Source EqualsValuesClause(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>) Creates a new EqualsValuesClauseSyntax node. Declaration public static EqualsValuesClauseSyntax EqualsValuesClause(SyntaxToken equalsToken, SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SyntaxToken equalsToken SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description EqualsValuesClauseSyntax | Improve this Doc View Source ExpressionKeyedTableField(ExpressionSyntax, ExpressionSyntax) Creates a new ExpressionKeyedTableFieldSyntax instance. Declaration public static ExpressionKeyedTableFieldSyntax ExpressionKeyedTableField(ExpressionSyntax key, ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax key ExpressionSyntax value Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source ExpressionKeyedTableField(SyntaxToken, ExpressionSyntax, SyntaxToken, SyntaxToken, ExpressionSyntax) Creates a new ExpressionKeyedTableFieldSyntax node. Declaration public static ExpressionKeyedTableFieldSyntax ExpressionKeyedTableField(SyntaxToken openBracketToken, ExpressionSyntax key, SyntaxToken closeBracketToken, SyntaxToken equalsToken, ExpressionSyntax value) Parameters Type Name Description SyntaxToken openBracketToken ExpressionSyntax key SyntaxToken closeBracketToken SyntaxToken equalsToken ExpressionSyntax value Returns Type Description ExpressionKeyedTableFieldSyntax | Improve this Doc View Source ExpressionListFunctionArgument(SeparatedSyntaxList<ExpressionSyntax>) Creates a new ExpressionListFunctionArgumentSyntax instance. Declaration public static ExpressionListFunctionArgumentSyntax ExpressionListFunctionArgument(SeparatedSyntaxList<ExpressionSyntax> expressions = default(SeparatedSyntaxList<ExpressionSyntax>)) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > expressions Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source ExpressionListFunctionArgument(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken) Creates a new ExpressionListFunctionArgumentSyntax node. Declaration public static ExpressionListFunctionArgumentSyntax ExpressionListFunctionArgument(SyntaxToken openParenthesisToken, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken closeParenthesisToken Returns Type Description ExpressionListFunctionArgumentSyntax | Improve this Doc View Source ExpressionStatement(ExpressionSyntax) Creates a new ExpressionStatementSyntax instance. Declaration public static ExpressionStatementSyntax ExpressionStatement(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description ExpressionStatementSyntax | Improve this Doc View Source ExpressionStatement(ExpressionSyntax, SyntaxToken) Creates a new ExpressionStatementSyntax node. Declaration public static ExpressionStatementSyntax ExpressionStatement(ExpressionSyntax expression, SyntaxToken semicolonToken) Parameters Type Name Description ExpressionSyntax expression SyntaxToken semicolonToken Returns Type Description ExpressionStatementSyntax | Improve this Doc View Source FunctionCallExpression(PrefixExpressionSyntax, FunctionArgumentSyntax) Creates a new FunctionCallExpressionSyntax node. Declaration public static FunctionCallExpressionSyntax FunctionCallExpression(PrefixExpressionSyntax expression, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression FunctionArgumentSyntax argument Returns Type Description FunctionCallExpressionSyntax | Improve this Doc View Source FunctionDeclarationStatement(FunctionNameSyntax, ParameterListSyntax, StatementListSyntax) Creates a new FunctionDeclarationStatementSyntax instance. Declaration public static FunctionDeclarationStatementSyntax FunctionDeclarationStatement(FunctionNameSyntax name, ParameterListSyntax parameters, StatementListSyntax body) Parameters Type Name Description FunctionNameSyntax name ParameterListSyntax parameters StatementListSyntax body Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source FunctionDeclarationStatement(FunctionNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax) Creates a new FunctionDeclarationStatementSyntax instance. Declaration public static FunctionDeclarationStatementSyntax FunctionDeclarationStatement(FunctionNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body) Parameters Type Name Description FunctionNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source FunctionDeclarationStatement(SyntaxToken, FunctionNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new FunctionDeclarationStatementSyntax node. Declaration public static FunctionDeclarationStatementSyntax FunctionDeclarationStatement(SyntaxToken functionKeyword, FunctionNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken functionKeyword FunctionNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description FunctionDeclarationStatementSyntax | Improve this Doc View Source FunctionType(TypeParameterListSyntax, SeparatedSyntaxList<TypeSyntax>, TypeSyntax) Creates a new FunctionTypeSyntax instance. Declaration public static FunctionTypeSyntax FunctionType(TypeParameterListSyntax typeParameterList, SeparatedSyntaxList<TypeSyntax> parameters, TypeSyntax returnType) Parameters Type Name Description TypeParameterListSyntax typeParameterList SeparatedSyntaxList < TypeSyntax > parameters TypeSyntax returnType Returns Type Description FunctionTypeSyntax | Improve this Doc View Source FunctionType(TypeParameterListSyntax, SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken, SyntaxToken, TypeSyntax) Creates a new FunctionTypeSyntax node. Declaration public static FunctionTypeSyntax FunctionType(TypeParameterListSyntax typeParameterList, SyntaxToken openParenthesisToken, SeparatedSyntaxList<TypeSyntax> parameters, SyntaxToken closeParenthesisToken, SyntaxToken minusGreaterThanToken, TypeSyntax returnType) Parameters Type Name Description TypeParameterListSyntax typeParameterList SyntaxToken openParenthesisToken SeparatedSyntaxList < TypeSyntax > parameters SyntaxToken closeParenthesisToken SyntaxToken minusGreaterThanToken TypeSyntax returnType Returns Type Description FunctionTypeSyntax | Improve this Doc View Source FunctionType(TypeSyntax) Creates a new FunctionTypeSyntax instance. Declaration public static FunctionTypeSyntax FunctionType(TypeSyntax returnType) Parameters Type Name Description TypeSyntax returnType Returns Type Description FunctionTypeSyntax | Improve this Doc View Source GenericForStatement(SeparatedSyntaxList<TypedIdentifierNameSyntax>, SeparatedSyntaxList<ExpressionSyntax>, StatementListSyntax) Creates a new GenericForStatementSyntax instance. Declaration public static GenericForStatementSyntax GenericForStatement(SeparatedSyntaxList<TypedIdentifierNameSyntax> identifiers, SeparatedSyntaxList<ExpressionSyntax> expressions, StatementListSyntax body) Parameters Type Name Description SeparatedSyntaxList < TypedIdentifierNameSyntax > identifiers SeparatedSyntaxList < ExpressionSyntax > expressions StatementListSyntax body Returns Type Description GenericForStatementSyntax | Improve this Doc View Source GenericForStatement(SyntaxToken, SeparatedSyntaxList<TypedIdentifierNameSyntax>, SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new GenericForStatementSyntax node. Declaration public static GenericForStatementSyntax GenericForStatement(SyntaxToken forKeyword, SeparatedSyntaxList<TypedIdentifierNameSyntax> identifiers, SyntaxToken inKeyword, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken forKeyword SeparatedSyntaxList < TypedIdentifierNameSyntax > identifiers SyntaxToken inKeyword SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description GenericForStatementSyntax | Improve this Doc View Source GenericTypePack(SyntaxToken) Creates a new GenericTypePackSyntax instance. Declaration public static GenericTypePackSyntax GenericTypePack(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description GenericTypePackSyntax | Improve this Doc View Source GenericTypePack(SyntaxToken, SyntaxToken) Creates a new GenericTypePackSyntax node. Declaration public static GenericTypePackSyntax GenericTypePack(SyntaxToken identifier, SyntaxToken dotDotDotToken) Parameters Type Name Description SyntaxToken identifier SyntaxToken dotDotDotToken Returns Type Description GenericTypePackSyntax | Improve this Doc View Source GenericTypePack(String) Creates a new GenericTypePackSyntax instance. Declaration public static GenericTypePackSyntax GenericTypePack(string identifier) Parameters Type Name Description String identifier Returns Type Description GenericTypePackSyntax | Improve this Doc View Source GotoLabelStatement(SyntaxToken) Creates a new GotoLabelStatementSyntax instance. Declaration public static GotoLabelStatementSyntax GotoLabelStatement(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source GotoLabelStatement(SyntaxToken, SyntaxToken, SyntaxToken, SyntaxToken) Creates a new GotoLabelStatementSyntax node. Declaration public static GotoLabelStatementSyntax GotoLabelStatement(SyntaxToken leftDelimiterToken, SyntaxToken identifier, SyntaxToken rightDelimiterToken, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken leftDelimiterToken SyntaxToken identifier SyntaxToken rightDelimiterToken SyntaxToken semicolonToken Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source GotoLabelStatement(String) Creates a new GotoLabelStatementSyntax instance. Declaration public static GotoLabelStatementSyntax GotoLabelStatement(string identifier) Parameters Type Name Description String identifier Returns Type Description GotoLabelStatementSyntax | Improve this Doc View Source GotoStatement(SyntaxToken) Creates a new GotoStatementSyntax instance. Declaration public static GotoStatementSyntax GotoStatement(SyntaxToken labelName) Parameters Type Name Description SyntaxToken labelName Returns Type Description GotoStatementSyntax | Improve this Doc View Source GotoStatement(SyntaxToken, SyntaxToken, SyntaxToken) Creates a new GotoStatementSyntax node. Declaration public static GotoStatementSyntax GotoStatement(SyntaxToken gotoKeyword, SyntaxToken labelName, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken gotoKeyword SyntaxToken labelName SyntaxToken semicolonToken Returns Type Description GotoStatementSyntax | Improve this Doc View Source GotoStatement(String) Creates a new GotoStatementSyntax instance. Declaration public static GotoStatementSyntax GotoStatement(string labelName) Parameters Type Name Description String labelName Returns Type Description GotoStatementSyntax | Improve this Doc View Source HashLiteral(SyntaxTriviaList, String, UInt32, SyntaxTriviaList) Creates a FiveM hash string literal token with kind HashStringLiteralToken from the text and corresponding string value. Declaration public static SyntaxToken HashLiteral(SyntaxTriviaList leading, string text, uint value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal, including quotes and escape sequences. UInt32 value The hash value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source HashLiteral(String) Creates a FiveM hash string literal token with kind HashStringLiteralToken and formats the provided string as a Lua string and calculates the hash from it. Declaration public static SyntaxToken HashLiteral(string stringValue) Parameters Type Name Description String stringValue The actual value of the string without any escapes. Returns Type Description SyntaxToken | Improve this Doc View Source HashLiteral(String, UInt32) Creates a FiveM hash string literal token with kind HashStringLiteralToken from the text and corresponding string value. Declaration public static SyntaxToken HashLiteral(string text, uint value) Parameters Type Name Description String text The raw text of the literal, including quotes and escape sequences. UInt32 value The hash value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Identifier(SyntaxTriviaList, SyntaxKind, String, SyntaxTriviaList) Creates a token with kind IdentifierToken containing the specified text. Declaration public static SyntaxToken Identifier(SyntaxTriviaList leading, SyntaxKind contextualKind, string text, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. SyntaxKind contextualKind An alternative SyntaxKind that can be inferred for this token in special contexts. These are usually keywords. String text The raw text of the identifier name, including any escapes or leading '@' character. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Identifier(SyntaxTriviaList, String, SyntaxTriviaList) Creates a token with kind IdentifierToken containing the specified text. Declaration public static SyntaxToken Identifier(SyntaxTriviaList leading, string text, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The text of the identifier name. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Identifier(String) Creates a token with kind IdentifierToken containing the specified text. The text of the identifier name. Declaration public static SyntaxToken Identifier(string text) Parameters Type Name Description String text Returns Type Description SyntaxToken | Improve this Doc View Source IdentifierKeyedTableField(SyntaxToken, ExpressionSyntax) Creates a new IdentifierKeyedTableFieldSyntax instance. Declaration public static IdentifierKeyedTableFieldSyntax IdentifierKeyedTableField(SyntaxToken identifier, ExpressionSyntax value) Parameters Type Name Description SyntaxToken identifier ExpressionSyntax value Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source IdentifierKeyedTableField(SyntaxToken, SyntaxToken, ExpressionSyntax) Creates a new IdentifierKeyedTableFieldSyntax node. Declaration public static IdentifierKeyedTableFieldSyntax IdentifierKeyedTableField(SyntaxToken identifier, SyntaxToken equalsToken, ExpressionSyntax value) Parameters Type Name Description SyntaxToken identifier SyntaxToken equalsToken ExpressionSyntax value Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source IdentifierKeyedTableField(String, ExpressionSyntax) Creates a new IdentifierKeyedTableFieldSyntax instance. Declaration public static IdentifierKeyedTableFieldSyntax IdentifierKeyedTableField(string identifier, ExpressionSyntax value) Parameters Type Name Description String identifier ExpressionSyntax value Returns Type Description IdentifierKeyedTableFieldSyntax | Improve this Doc View Source IdentifierName(SyntaxToken) Creates a new IdentifierNameSyntax node. Declaration public static IdentifierNameSyntax IdentifierName(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description IdentifierNameSyntax | Improve this Doc View Source IdentifierName(String) Creates an IdentifierNameSyntax node. Declaration public static IdentifierNameSyntax IdentifierName(string name) Parameters Type Name Description String name The identifier name. Returns Type Description IdentifierNameSyntax | Improve this Doc View Source IfExpression(ExpressionSyntax, ExpressionSyntax, ExpressionSyntax) Creates a new IfExpressionSyntax instance. Declaration public static IfExpressionSyntax IfExpression(ExpressionSyntax condition, ExpressionSyntax trueValue, ExpressionSyntax falseValue) Parameters Type Name Description ExpressionSyntax condition ExpressionSyntax trueValue ExpressionSyntax falseValue Returns Type Description IfExpressionSyntax | Improve this Doc View Source IfExpression(ExpressionSyntax, ExpressionSyntax, SyntaxList<ElseIfExpressionClauseSyntax>, ExpressionSyntax) Creates a new IfExpressionSyntax instance. Declaration public static IfExpressionSyntax IfExpression(ExpressionSyntax condition, ExpressionSyntax trueValue, SyntaxList<ElseIfExpressionClauseSyntax> elseIfClauses, ExpressionSyntax falseValue) Parameters Type Name Description ExpressionSyntax condition ExpressionSyntax trueValue SyntaxList < ElseIfExpressionClauseSyntax > elseIfClauses ExpressionSyntax falseValue Returns Type Description IfExpressionSyntax | Improve this Doc View Source IfExpression(SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxList<ElseIfExpressionClauseSyntax>, SyntaxToken, ExpressionSyntax) Creates a new IfExpressionSyntax node. Declaration public static IfExpressionSyntax IfExpression(SyntaxToken ifKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, ExpressionSyntax trueValue, SyntaxList<ElseIfExpressionClauseSyntax> elseIfClauses, SyntaxToken elseKeyword, ExpressionSyntax falseValue) Parameters Type Name Description SyntaxToken ifKeyword ExpressionSyntax condition SyntaxToken thenKeyword ExpressionSyntax trueValue SyntaxList < ElseIfExpressionClauseSyntax > elseIfClauses SyntaxToken elseKeyword ExpressionSyntax falseValue Returns Type Description IfExpressionSyntax | Improve this Doc View Source IfStatement(ExpressionSyntax, StatementListSyntax) Creates a new IfStatementSyntax instance. Declaration public static IfStatementSyntax IfStatement(ExpressionSyntax condition, StatementListSyntax body) Parameters Type Name Description ExpressionSyntax condition StatementListSyntax body Returns Type Description IfStatementSyntax | Improve this Doc View Source IfStatement(ExpressionSyntax, StatementListSyntax, SyntaxList<ElseIfClauseSyntax>, ElseClauseSyntax) Creates a new IfStatementSyntax instance. Declaration public static IfStatementSyntax IfStatement(ExpressionSyntax condition, StatementListSyntax body, SyntaxList<ElseIfClauseSyntax> elseIfClauses, ElseClauseSyntax elseClause) Parameters Type Name Description ExpressionSyntax condition StatementListSyntax body SyntaxList < ElseIfClauseSyntax > elseIfClauses ElseClauseSyntax elseClause Returns Type Description IfStatementSyntax | Improve this Doc View Source IfStatement(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxList<ElseIfClauseSyntax>, ElseClauseSyntax, SyntaxToken, SyntaxToken) Creates a new IfStatementSyntax comment. Declaration public static IfStatementSyntax IfStatement(SyntaxToken ifKeyword, ExpressionSyntax condition, SyntaxToken thenKeyword, StatementListSyntax body, SyntaxList<ElseIfClauseSyntax> elseIfClauses, ElseClauseSyntax elseClause, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken ifKeyword ExpressionSyntax condition SyntaxToken thenKeyword StatementListSyntax body SyntaxList < ElseIfClauseSyntax > elseIfClauses ElseClauseSyntax elseClause SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description IfStatementSyntax | Improve this Doc View Source IntersectionType(TypeSyntax, TypeSyntax) Creates a new IntersectionTypeSyntax instance. Declaration public static IntersectionTypeSyntax IntersectionType(TypeSyntax left, TypeSyntax right) Parameters Type Name Description TypeSyntax left TypeSyntax right Returns Type Description IntersectionTypeSyntax | Improve this Doc View Source IntersectionType(TypeSyntax, SyntaxToken, TypeSyntax) Creates a new IntersectionTypeSyntax node. Declaration public static IntersectionTypeSyntax IntersectionType(TypeSyntax left, SyntaxToken ampersandToken, TypeSyntax right) Parameters Type Name Description TypeSyntax left SyntaxToken ampersandToken TypeSyntax right Returns Type Description IntersectionTypeSyntax | Improve this Doc View Source List<TNode>() Creates an empty list of syntax nodes. Declaration public static SyntaxList<TNode> List<TNode>() where TNode : SyntaxNode Returns Type Description SyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source List<TNode>(IEnumerable<TNode>) Creates a list of syntax nodes. Declaration public static SyntaxList<TNode> List<TNode>(IEnumerable<TNode> nodes) where TNode : SyntaxNode Parameters Type Name Description IEnumerable <TNode> nodes A sequence of element nodes. Returns Type Description SyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source Literal(SyntaxTriviaList, String, Double, SyntaxTriviaList) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value. Declaration public static SyntaxToken Literal(SyntaxTriviaList leading, string text, double value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal. Double value The 8-byte floating point value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(SyntaxTriviaList, String, Int64, SyntaxTriviaList) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value. Declaration public static SyntaxToken Literal(SyntaxTriviaList leading, string text, long value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal. Int64 value The 8-byte signed integer value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(SyntaxTriviaList, String, Complex, SyntaxTriviaList) Creates a token with kind NumericLiteralToken from the text and corresponding complex value. Declaration public static SyntaxToken Literal(SyntaxTriviaList leading, string text, Complex value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal. Complex value The complex value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(SyntaxTriviaList, String, String, SyntaxTriviaList) Creates a token with kind StringLiteralToken from the text and corresponding string value. Declaration public static SyntaxToken Literal(SyntaxTriviaList leading, string text, string value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal, including quotes and escape sequences. String value The string value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(SyntaxTriviaList, String, UInt64, SyntaxTriviaList) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value. Declaration public static SyntaxToken Literal(SyntaxTriviaList leading, string text, ulong value, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. String text The raw text of the literal. UInt64 value The 8-byte unsigned integer value to be represented by the returned token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(Double) Creates a token with kind NumericLiteralToken from an 8-byte floating point value. Declaration public static SyntaxToken Literal(double value) Parameters Type Name Description Double value The 8-byte floating point value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(Int64) Creates a token with kind NumericLiteralToken from an 8-byte integer value. Declaration public static SyntaxToken Literal(long value) Parameters Type Name Description Int64 value The 8-byte signed integer value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(Complex) Creates a token with kind NumericLiteralToken from a complex value. Declaration public static SyntaxToken Literal(Complex value) Parameters Type Name Description Complex value The complex value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String) Creates a token with kind StringLiteralToken from a string value. Declaration public static SyntaxToken Literal(string value) Parameters Type Name Description String value The string value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String, Double) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value. Declaration public static SyntaxToken Literal(string text, double value) Parameters Type Name Description String text The raw text of the literal. Double value The 8-byte floating point value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String, Int64) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value. Declaration public static SyntaxToken Literal(string text, long value) Parameters Type Name Description String text The raw text of the literal. Int64 value The 8-byte signed integer value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String, Complex) Creates a token with kind NumericLiteralToken from the text and corresponding complex value. Declaration public static SyntaxToken Literal(string text, Complex value) Parameters Type Name Description String text The raw text of the literal. Complex value The complex value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String, String) Creates a token with kind StringLiteralToken from the text and corresponding string value. Declaration public static SyntaxToken Literal(string text, string value) Parameters Type Name Description String text The raw text of the literal, including quotes and escape sequences. String value The string value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(String, UInt64) Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte signed integer value. Declaration public static SyntaxToken Literal(string text, ulong value) Parameters Type Name Description String text The raw text of the literal. UInt64 value The 8-byte unsigned integer value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source Literal(UInt64) Creates a token with kind NumericLiteralToken from an 8-byte integer value. Declaration public static SyntaxToken Literal(ulong value) Parameters Type Name Description UInt64 value The 8-byte unsigned integer value to be represented by the returned token. Returns Type Description SyntaxToken | Improve this Doc View Source LiteralExpression(SyntaxKind) Creates a new LiteralExpressionSyntax instance. Declaration public static LiteralExpressionSyntax LiteralExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description LiteralExpressionSyntax | Improve this Doc View Source LiteralExpression(SyntaxKind, SyntaxToken) Creates a new LiteralExpressionSyntax node. Declaration public static LiteralExpressionSyntax LiteralExpression(SyntaxKind kind, SyntaxToken token) Parameters Type Name Description SyntaxKind kind SyntaxToken token Returns Type Description LiteralExpressionSyntax | Improve this Doc View Source LiteralType(SyntaxKind) Creates a new LiteralTypeSyntax instance. Declaration public static LiteralTypeSyntax LiteralType(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description LiteralTypeSyntax | Improve this Doc View Source LiteralType(SyntaxKind, SyntaxToken) Creates a new LiteralTypeSyntax node. Declaration public static LiteralTypeSyntax LiteralType(SyntaxKind kind, SyntaxToken token) Parameters Type Name Description SyntaxKind kind SyntaxToken token Returns Type Description LiteralTypeSyntax | Improve this Doc View Source LocalDeclarationName(IdentifierNameSyntax) Creates a new LocalDeclarationNameSyntax instance. Declaration public static LocalDeclarationNameSyntax LocalDeclarationName(IdentifierNameSyntax identifierName) Parameters Type Name Description IdentifierNameSyntax identifierName Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source LocalDeclarationName(IdentifierNameSyntax, VariableAttributeSyntax) Creates a new LocalDeclarationNameSyntax node. Declaration public static LocalDeclarationNameSyntax LocalDeclarationName(IdentifierNameSyntax identifierName, VariableAttributeSyntax attribute) Parameters Type Name Description IdentifierNameSyntax identifierName VariableAttributeSyntax attribute Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source LocalDeclarationName(IdentifierNameSyntax, VariableAttributeSyntax, TypeBindingSyntax) Creates a new LocalDeclarationNameSyntax node. Declaration public static LocalDeclarationNameSyntax LocalDeclarationName(IdentifierNameSyntax identifierName, VariableAttributeSyntax attribute, TypeBindingSyntax typeBinding) Parameters Type Name Description IdentifierNameSyntax identifierName VariableAttributeSyntax attribute TypeBindingSyntax typeBinding Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source LocalDeclarationName(String) Creates a new LocalDeclarationNameSyntax instance. Declaration public static LocalDeclarationNameSyntax LocalDeclarationName(string identifierName) Parameters Type Name Description String identifierName Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source LocalDeclarationName(String, VariableAttributeSyntax) Creates a new LocalDeclarationNameSyntax node. Declaration public static LocalDeclarationNameSyntax LocalDeclarationName(string name, VariableAttributeSyntax attribute) Parameters Type Name Description String name VariableAttributeSyntax attribute Returns Type Description LocalDeclarationNameSyntax | Improve this Doc View Source LocalFunctionDeclarationStatement(IdentifierNameSyntax, ParameterListSyntax, StatementListSyntax) Creates a new LocalFunctionDeclarationStatementSyntax instance. Declaration public static LocalFunctionDeclarationStatementSyntax LocalFunctionDeclarationStatement(IdentifierNameSyntax name, ParameterListSyntax parameters, StatementListSyntax body) Parameters Type Name Description IdentifierNameSyntax name ParameterListSyntax parameters StatementListSyntax body Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source LocalFunctionDeclarationStatement(IdentifierNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax) Creates a new LocalFunctionDeclarationStatementSyntax instance. Declaration public static LocalFunctionDeclarationStatementSyntax LocalFunctionDeclarationStatement(IdentifierNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body) Parameters Type Name Description IdentifierNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source LocalFunctionDeclarationStatement(SyntaxToken, SyntaxToken, IdentifierNameSyntax, ParameterListSyntax, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new LocalFunctionDeclarationStatementSyntax node. Declaration public static LocalFunctionDeclarationStatementSyntax LocalFunctionDeclarationStatement(SyntaxToken localKeyword, SyntaxToken functionKeyword, IdentifierNameSyntax name, ParameterListSyntax parameters, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken localKeyword SyntaxToken functionKeyword IdentifierNameSyntax name ParameterListSyntax parameters StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source LocalFunctionDeclarationStatement(SyntaxToken, SyntaxToken, IdentifierNameSyntax, TypeParameterListSyntax, ParameterListSyntax, TypeBindingSyntax, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new LocalFunctionDeclarationStatementSyntax node. Declaration public static LocalFunctionDeclarationStatementSyntax LocalFunctionDeclarationStatement(SyntaxToken localKeyword, SyntaxToken functionKeyword, IdentifierNameSyntax name, TypeParameterListSyntax typeParameterList, ParameterListSyntax parameters, TypeBindingSyntax typeBinding, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken localKeyword SyntaxToken functionKeyword IdentifierNameSyntax name TypeParameterListSyntax typeParameterList ParameterListSyntax parameters TypeBindingSyntax typeBinding StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source LocalFunctionDeclarationStatement(String, ParameterListSyntax, StatementListSyntax) Creates a new LocalFunctionDeclarationStatementSyntax instance. Declaration public static LocalFunctionDeclarationStatementSyntax LocalFunctionDeclarationStatement(string name, ParameterListSyntax parameters, StatementListSyntax body) Parameters Type Name Description String name ParameterListSyntax parameters StatementListSyntax body Returns Type Description LocalFunctionDeclarationStatementSyntax | Improve this Doc View Source LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax>) Creates a new LocalVariableDeclarationStatementSyntax instance. Declaration public static LocalVariableDeclarationStatementSyntax LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax> names) Parameters Type Name Description SeparatedSyntaxList < LocalDeclarationNameSyntax > names Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax>, EqualsValuesClauseSyntax) Creates a new LocalVariableDeclarationStatementSyntax instance. Declaration public static LocalVariableDeclarationStatementSyntax LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax> names, EqualsValuesClauseSyntax equalsValues) Parameters Type Name Description SeparatedSyntaxList < LocalDeclarationNameSyntax > names EqualsValuesClauseSyntax equalsValues Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax>, SeparatedSyntaxList<ExpressionSyntax>) Creates a new LocalVariableDeclarationStatementSyntax node. Declaration public static LocalVariableDeclarationStatementSyntax LocalVariableDeclarationStatement(SeparatedSyntaxList<LocalDeclarationNameSyntax> names, SeparatedSyntaxList<ExpressionSyntax> values) Parameters Type Name Description SeparatedSyntaxList < LocalDeclarationNameSyntax > names SeparatedSyntaxList < ExpressionSyntax > values Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source LocalVariableDeclarationStatement(SyntaxToken, SeparatedSyntaxList<LocalDeclarationNameSyntax>, EqualsValuesClauseSyntax, SyntaxToken) Creates a new LocalVariableDeclarationStatementSyntax node. Declaration public static LocalVariableDeclarationStatementSyntax LocalVariableDeclarationStatement(SyntaxToken localKeyword, SeparatedSyntaxList<LocalDeclarationNameSyntax> names, EqualsValuesClauseSyntax equalsValues, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken localKeyword SeparatedSyntaxList < LocalDeclarationNameSyntax > names EqualsValuesClauseSyntax equalsValues SyntaxToken semicolonToken Returns Type Description LocalVariableDeclarationStatementSyntax | Improve this Doc View Source MemberAccessExpression(PrefixExpressionSyntax, SyntaxToken) Creates a new MemberAccessExpressionSyntax instance. Declaration public static MemberAccessExpressionSyntax MemberAccessExpression(PrefixExpressionSyntax expression, SyntaxToken memberName) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken memberName Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source MemberAccessExpression(PrefixExpressionSyntax, SyntaxToken, SyntaxToken) Creates a new MemberAccessExpressionSyntax node. Declaration public static MemberAccessExpressionSyntax MemberAccessExpression(PrefixExpressionSyntax expression, SyntaxToken dotSeparator, SyntaxToken memberName) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken dotSeparator SyntaxToken memberName Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source MemberAccessExpression(PrefixExpressionSyntax, String) Creates a new MemberAccessExpressionSyntax instance. Declaration public static MemberAccessExpressionSyntax MemberAccessExpression(PrefixExpressionSyntax expression, string memberName) Parameters Type Name Description PrefixExpressionSyntax expression String memberName Returns Type Description MemberAccessExpressionSyntax | Improve this Doc View Source MemberFunctionName(FunctionNameSyntax, SyntaxToken) Creates a new MemberFunctionNameSyntax instance. Declaration public static MemberFunctionNameSyntax MemberFunctionName(FunctionNameSyntax baseName, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken name Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source MemberFunctionName(FunctionNameSyntax, SyntaxToken, SyntaxToken) Creates a new MemberFunctionNameSyntax node. Declaration public static MemberFunctionNameSyntax MemberFunctionName(FunctionNameSyntax baseName, SyntaxToken dotToken, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken dotToken SyntaxToken name Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source MemberFunctionName(FunctionNameSyntax, String) Creates a new MemberFunctionNameSyntax instance. Declaration public static MemberFunctionNameSyntax MemberFunctionName(FunctionNameSyntax baseName, string name) Parameters Type Name Description FunctionNameSyntax baseName String name Returns Type Description MemberFunctionNameSyntax | Improve this Doc View Source MethodCallExpression(PrefixExpressionSyntax, SyntaxToken, FunctionArgumentSyntax) Creates a new MethodCallExpressionSyntax instance. Declaration public static MethodCallExpressionSyntax MethodCallExpression(PrefixExpressionSyntax expression, SyntaxToken identifier, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken identifier FunctionArgumentSyntax argument Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source MethodCallExpression(PrefixExpressionSyntax, SyntaxToken, SyntaxToken, FunctionArgumentSyntax) Creates a new MethodCallExpressionSyntax node. Declaration public static MethodCallExpressionSyntax MethodCallExpression(PrefixExpressionSyntax expression, SyntaxToken colonToken, SyntaxToken identifier, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression SyntaxToken colonToken SyntaxToken identifier FunctionArgumentSyntax argument Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source MethodCallExpression(PrefixExpressionSyntax, String, FunctionArgumentSyntax) Creates a new MethodCallExpressionSyntax instance. Declaration public static MethodCallExpressionSyntax MethodCallExpression(PrefixExpressionSyntax expression, string identifier, FunctionArgumentSyntax argument) Parameters Type Name Description PrefixExpressionSyntax expression String identifier FunctionArgumentSyntax argument Returns Type Description MethodCallExpressionSyntax | Improve this Doc View Source MethodFunctionName(FunctionNameSyntax, SyntaxToken) Creates a new MethodFunctionNameSyntax instance. Declaration public static MethodFunctionNameSyntax MethodFunctionName(FunctionNameSyntax baseName, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken name Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source MethodFunctionName(FunctionNameSyntax, SyntaxToken, SyntaxToken) Creates a new MethodFunctionNameSyntax node. Declaration public static MethodFunctionNameSyntax MethodFunctionName(FunctionNameSyntax baseName, SyntaxToken colonToken, SyntaxToken name) Parameters Type Name Description FunctionNameSyntax baseName SyntaxToken colonToken SyntaxToken name Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source MethodFunctionName(FunctionNameSyntax, String) Creates a new MethodFunctionNameSyntax instance. Declaration public static MethodFunctionNameSyntax MethodFunctionName(FunctionNameSyntax baseName, string name) Parameters Type Name Description FunctionNameSyntax baseName String name Returns Type Description MethodFunctionNameSyntax | Improve this Doc View Source MissingToken(SyntaxKind) Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an expected token is not found. A missing token has no text and normally has associated diagnostics. Declaration public static SyntaxToken MissingToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind A syntax kind value for a token. These have the suffix Token or Keyword. Returns Type Description SyntaxToken | Improve this Doc View Source MissingToken(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList) Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an expected token is not found. A missing token has no text and normally has associated diagnostics. Declaration public static SyntaxToken MissingToken(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. SyntaxKind kind A syntax kind value for a token. These have the suffix Token or Keyword. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source NamedParameter(SyntaxToken) Creates a new NamedParameterSyntax instance. Declaration public static NamedParameterSyntax NamedParameter(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description NamedParameterSyntax | Improve this Doc View Source NamedParameter(SyntaxToken, TypeBindingSyntax) Creates a new NamedParameterSyntax node. Declaration public static NamedParameterSyntax NamedParameter(SyntaxToken identifier, TypeBindingSyntax typeBinding) Parameters Type Name Description SyntaxToken identifier TypeBindingSyntax typeBinding Returns Type Description NamedParameterSyntax | Improve this Doc View Source NamedParameter(String) Creates a new NamedParameterSyntax instance. Declaration public static NamedParameterSyntax NamedParameter(string identifier) Parameters Type Name Description String identifier Returns Type Description NamedParameterSyntax | Improve this Doc View Source NilableType(TypeSyntax) Creates a new NilableTypeSyntax instance. Declaration public static NilableTypeSyntax NilableType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description NilableTypeSyntax | Improve this Doc View Source NilableType(TypeSyntax, SyntaxToken) Creates a new NilableTypeSyntax node. Declaration public static NilableTypeSyntax NilableType(TypeSyntax type, SyntaxToken questionToken) Parameters Type Name Description TypeSyntax type SyntaxToken questionToken Returns Type Description NilableTypeSyntax | Improve this Doc View Source NodeOrTokenList() Creates an empty SyntaxNodeOrTokenList . Declaration public static SyntaxNodeOrTokenList NodeOrTokenList() Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source NodeOrTokenList(IEnumerable<SyntaxNodeOrToken>) Create a SyntaxNodeOrTokenList from a sequence of SyntaxNodeOrToken . Declaration public static SyntaxNodeOrTokenList NodeOrTokenList(IEnumerable<SyntaxNodeOrToken> nodesAndTokens) Parameters Type Name Description IEnumerable < SyntaxNodeOrToken > nodesAndTokens The sequence of nodes and tokens Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source NodeOrTokenList(SyntaxNodeOrToken[]) Create a SyntaxNodeOrTokenList from one or more SyntaxNodeOrToken . Declaration public static SyntaxNodeOrTokenList NodeOrTokenList(params SyntaxNodeOrToken[] nodesAndTokens) Parameters Type Name Description SyntaxNodeOrToken [] nodesAndTokens The nodes and tokens Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source NumericForStatement(IdentifierNameSyntax, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax, StatementListSyntax) Creates a new NumericForStatementSyntax node. Declaration public static NumericForStatementSyntax NumericForStatement(IdentifierNameSyntax identifier, ExpressionSyntax initialValue, ExpressionSyntax finalValue, ExpressionSyntax stepValue, StatementListSyntax body) Parameters Type Name Description IdentifierNameSyntax identifier ExpressionSyntax initialValue ExpressionSyntax finalValue ExpressionSyntax stepValue StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(TypedIdentifierNameSyntax, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax, StatementListSyntax) Creates a new NumericForStatementSyntax instance. Declaration public static NumericForStatementSyntax NumericForStatement(TypedIdentifierNameSyntax identifier, ExpressionSyntax initialValue, ExpressionSyntax finalValue, ExpressionSyntax stepValue, StatementListSyntax body) Parameters Type Name Description TypedIdentifierNameSyntax identifier ExpressionSyntax initialValue ExpressionSyntax finalValue ExpressionSyntax stepValue StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(TypedIdentifierNameSyntax, ExpressionSyntax, ExpressionSyntax, StatementListSyntax) Creates a new NumericForStatementSyntax instance. Declaration public static NumericForStatementSyntax NumericForStatement(TypedIdentifierNameSyntax identifier, ExpressionSyntax initialValue, ExpressionSyntax finalValue, StatementListSyntax body) Parameters Type Name Description TypedIdentifierNameSyntax identifier ExpressionSyntax initialValue ExpressionSyntax finalValue StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(SyntaxToken, IdentifierNameSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new NumericForStatementSyntax node. Declaration public static NumericForStatementSyntax NumericForStatement(SyntaxToken forKeyword, IdentifierNameSyntax identifier, SyntaxToken equalsToken, ExpressionSyntax initialValue, SyntaxToken finalValueCommaToken, ExpressionSyntax finalValue, SyntaxToken stepValueCommaToken, ExpressionSyntax stepValue, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken forKeyword IdentifierNameSyntax identifier SyntaxToken equalsToken ExpressionSyntax initialValue SyntaxToken finalValueCommaToken ExpressionSyntax finalValue SyntaxToken stepValueCommaToken ExpressionSyntax stepValue SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(SyntaxToken, TypedIdentifierNameSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new NumericForStatementSyntax node. Declaration public static NumericForStatementSyntax NumericForStatement(SyntaxToken forKeyword, TypedIdentifierNameSyntax identifier, SyntaxToken equalsToken, ExpressionSyntax initialValue, SyntaxToken finalValueCommaToken, ExpressionSyntax finalValue, SyntaxToken stepValueCommaToken, ExpressionSyntax stepValue, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken forKeyword TypedIdentifierNameSyntax identifier SyntaxToken equalsToken ExpressionSyntax initialValue SyntaxToken finalValueCommaToken ExpressionSyntax finalValue SyntaxToken stepValueCommaToken ExpressionSyntax stepValue SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(String, ExpressionSyntax, ExpressionSyntax, ExpressionSyntax, StatementListSyntax) Creates a new NumericForStatementSyntax node. Declaration public static NumericForStatementSyntax NumericForStatement(string identifier, ExpressionSyntax initialValue, ExpressionSyntax finalValue, ExpressionSyntax stepValue, StatementListSyntax body) Parameters Type Name Description String identifier ExpressionSyntax initialValue ExpressionSyntax finalValue ExpressionSyntax stepValue StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source NumericForStatement(String, ExpressionSyntax, ExpressionSyntax, StatementListSyntax) Creates a new NumericForStatementSyntax instance. Declaration public static NumericForStatementSyntax NumericForStatement(string identifier, ExpressionSyntax initialValue, ExpressionSyntax finalValue, StatementListSyntax body) Parameters Type Name Description String identifier ExpressionSyntax initialValue ExpressionSyntax finalValue StatementListSyntax body Returns Type Description NumericForStatementSyntax | Improve this Doc View Source ParameterList(SeparatedSyntaxList<ParameterSyntax>) Creates a new ParameterListSyntax instance. Declaration public static ParameterListSyntax ParameterList(SeparatedSyntaxList<ParameterSyntax> parameters = default(SeparatedSyntaxList<ParameterSyntax>)) Parameters Type Name Description SeparatedSyntaxList < ParameterSyntax > parameters Returns Type Description ParameterListSyntax | Improve this Doc View Source ParameterList(SyntaxToken, SeparatedSyntaxList<ParameterSyntax>, SyntaxToken) Creates a new ParameterListSyntax node. Declaration public static ParameterListSyntax ParameterList(SyntaxToken openParenthesisToken, SeparatedSyntaxList<ParameterSyntax> parameters, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < ParameterSyntax > parameters SyntaxToken closeParenthesisToken Returns Type Description ParameterListSyntax | Improve this Doc View Source ParenthesizedExpression(ExpressionSyntax) Creates a new ParenthesizedExpressionSyntax instance. Declaration public static ParenthesizedExpressionSyntax ParenthesizedExpression(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description ParenthesizedExpressionSyntax | Improve this Doc View Source ParenthesizedExpression(SyntaxToken, ExpressionSyntax, SyntaxToken) Declaration public static ParenthesizedExpressionSyntax ParenthesizedExpression(SyntaxToken openParenthesisToken, ExpressionSyntax expression, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken ExpressionSyntax expression SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedExpressionSyntax | Improve this Doc View Source ParenthesizedType(TypeSyntax) Creates a new ParenthesizedTypeSyntax instance. Declaration public static ParenthesizedTypeSyntax ParenthesizedType(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description ParenthesizedTypeSyntax | Improve this Doc View Source ParenthesizedType(SyntaxToken, TypeSyntax, SyntaxToken) Creates a new ParenthesizedTypeSyntax node. Declaration public static ParenthesizedTypeSyntax ParenthesizedType(SyntaxToken openParenthesisToken, TypeSyntax type, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken TypeSyntax type SyntaxToken closeParenthesisToken Returns Type Description ParenthesizedTypeSyntax | Improve this Doc View Source ParseCompilationUnit(SourceText, LuaParseOptions) Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a SyntaxTree instance, use ParseText(SourceText, LuaParseOptions, String, CancellationToken) instead. Declaration public static CompilationUnitSyntax ParseCompilationUnit(SourceText text, LuaParseOptions options = null) Parameters Type Name Description SourceText text The text of the compilation unit. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Returns Type Description CompilationUnitSyntax | Improve this Doc View Source ParseCompilationUnit(String, Int32, LuaParseOptions) Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a SyntaxTree instance, use ParseText(String, LuaParseOptions, String, Encoding, CancellationToken) instead. Declaration public static CompilationUnitSyntax ParseCompilationUnit(string text, int offset = 0, LuaParseOptions options = null) Parameters Type Name Description String text The text of the compilation unit. Int32 offset Optional offset into text. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Returns Type Description CompilationUnitSyntax | Improve this Doc View Source ParseExpression(SourceText, LuaParseOptions, Boolean) Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions. Declaration public static ExpressionSyntax ParseExpression(SourceText text, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description SourceText text The text of the expression. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText True if extra tokens in the input should be treated as an error Returns Type Description ExpressionSyntax | Improve this Doc View Source ParseExpression(String, Int32, LuaParseOptions, Boolean) Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions. Declaration public static ExpressionSyntax ParseExpression(string text, int offset = 0, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description String text The text of the expression. Int32 offset Optional offset into text. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText True if extra tokens in the input should be treated as an error Returns Type Description ExpressionSyntax | Improve this Doc View Source ParseLeadingTrivia(SourceText, LuaParseOptions) Parse a list of trivia rules for leading trivia. Declaration public static SyntaxTriviaList ParseLeadingTrivia(SourceText text, LuaParseOptions options) Parameters Type Name Description SourceText text LuaParseOptions options Returns Type Description SyntaxTriviaList | Improve this Doc View Source ParseLeadingTrivia(String, LuaParseOptions, Int32) Parse a list of trivia rules for leading trivia. Declaration public static SyntaxTriviaList ParseLeadingTrivia(string text, LuaParseOptions options, int offset = 0) Parameters Type Name Description String text LuaParseOptions options Int32 offset Returns Type Description SyntaxTriviaList | Improve this Doc View Source ParseStatement(SourceText, LuaParseOptions, Boolean) Parse a StatementSyntaxNode using grammar rule for statements. Declaration public static StatementSyntax ParseStatement(SourceText text, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description SourceText text The text of the statement. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText True if extra tokens in the input should be treated as an error Returns Type Description StatementSyntax | Improve this Doc View Source ParseStatement(String, Int32, LuaParseOptions, Boolean) Parse a StatementSyntaxNode using grammar rule for statements. Declaration public static StatementSyntax ParseStatement(string text, int offset = 0, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description String text The text of the statement. Int32 offset Optional offset into text. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText True if extra tokens in the input should be treated as an error Returns Type Description StatementSyntax | Improve this Doc View Source ParseSyntaxTree(SourceText, ParseOptions, String, CancellationToken) Produces a syntax tree by parsing the source text. Declaration public static SyntaxTree ParseSyntaxTree(SourceText text, ParseOptions options = null, string path = \"\", CancellationToken cancellationToken = null) Parameters Type Name Description SourceText text ParseOptions options String path CancellationToken cancellationToken Returns Type Description SyntaxTree | Improve this Doc View Source ParseSyntaxTree(String, ParseOptions, String, Encoding, CancellationToken) Produces a syntax tree by parsing the source text. Declaration public static SyntaxTree ParseSyntaxTree(string text, ParseOptions options = null, string path = \"\", Encoding encoding = null, CancellationToken cancellationToken = null) Parameters Type Name Description String text ParseOptions options String path Encoding encoding CancellationToken cancellationToken Returns Type Description SyntaxTree | Improve this Doc View Source ParseToken(SourceText, LuaParseOptions) Parse a Lua language token. Declaration public static SyntaxToken ParseToken(SourceText text, LuaParseOptions options = null) Parameters Type Name Description SourceText text The text of the token including leading and trailing trivia. LuaParseOptions options Parse options. Returns Type Description SyntaxToken | Improve this Doc View Source ParseToken(String, Int32, LuaParseOptions) Parse a Lua language token. Declaration public static SyntaxToken ParseToken(string text, int offset = 0, LuaParseOptions options = null) Parameters Type Name Description String text The text of the token including leading and trailing trivia. Int32 offset Optional offset into text. LuaParseOptions options Parse options. Returns Type Description SyntaxToken | Improve this Doc View Source ParseTokens(SourceText, Int32, LuaParseOptions) Parse a sequence of Lua language tokens. Declaration public static IEnumerable<SyntaxToken> ParseTokens(SourceText text, int initialTokenPosition = 0, LuaParseOptions options = null) Parameters Type Name Description SourceText text The text of all the tokens. Int32 initialTokenPosition An integer to use as the starting position of the first token. LuaParseOptions options Parse options. Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source ParseTokens(String, Int32, Int32, LuaParseOptions) Parse a sequence of Lua language tokens. Declaration public static IEnumerable<SyntaxToken> ParseTokens(string text, int offset = 0, int initialTokenPosition = 0, LuaParseOptions options = null) Parameters Type Name Description String text The text of all the tokens. Int32 offset Optional offset into text. Int32 initialTokenPosition An integer to use as the starting position of the first token. LuaParseOptions options Parse options. Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source ParseTrailingTrivia(SourceText, LuaParseOptions) Parse a list of trivia using the parsing rules for trailing trivia. Declaration public static SyntaxTriviaList ParseTrailingTrivia(SourceText text, LuaParseOptions options) Parameters Type Name Description SourceText text LuaParseOptions options Returns Type Description SyntaxTriviaList | Improve this Doc View Source ParseTrailingTrivia(String, LuaParseOptions, Int32) Parse a list of trivia using the parsing rules for trailing trivia. Declaration public static SyntaxTriviaList ParseTrailingTrivia(string text, LuaParseOptions options, int offset = 0) Parameters Type Name Description String text LuaParseOptions options Int32 offset Returns Type Description SyntaxTriviaList | Improve this Doc View Source ParseType(SourceText, LuaParseOptions, Boolean) Parse a TypeSyntax using the grammar rule for types. Declaration public static TypeSyntax ParseType(SourceText text, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description SourceText text The text of the type. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText Whether all text should be consumed and an error generated if it's not. Returns Type Description TypeSyntax | Improve this Doc View Source ParseType(String, Int32, LuaParseOptions, Boolean) Parse a TypeSyntax using the grammar rule for types. Declaration public static TypeSyntax ParseType(string text, int offset = 0, LuaParseOptions options = null, bool consumeFullText = true) Parameters Type Name Description String text The text of the type. Int32 offset Optional offset into text. LuaParseOptions options The optional parse options to use. If no options are specified default options are used. Boolean consumeFullText Whether all text should be consumed and an error generated if it's not. Returns Type Description TypeSyntax | Improve this Doc View Source RepeatUntilStatement(StatementListSyntax, ExpressionSyntax) Creates a new RepeatUntilStatementSyntax instance. Declaration public static RepeatUntilStatementSyntax RepeatUntilStatement(StatementListSyntax body, ExpressionSyntax condition) Parameters Type Name Description StatementListSyntax body ExpressionSyntax condition Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source RepeatUntilStatement(SyntaxToken, StatementListSyntax, SyntaxToken, ExpressionSyntax, SyntaxToken) Creates a new RepeatUntilStatementSyntax node. Declaration public static RepeatUntilStatementSyntax RepeatUntilStatement(SyntaxToken repeatKeyword, StatementListSyntax body, SyntaxToken untilKeyword, ExpressionSyntax condition, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken repeatKeyword StatementListSyntax body SyntaxToken untilKeyword ExpressionSyntax condition SyntaxToken semicolonToken Returns Type Description RepeatUntilStatementSyntax | Improve this Doc View Source ReturnStatement(SeparatedSyntaxList<ExpressionSyntax>) Creates a new ReturnStatementSyntax instance. Declaration public static ReturnStatementSyntax ReturnStatement(SeparatedSyntaxList<ExpressionSyntax> expressions = default(SeparatedSyntaxList<ExpressionSyntax>)) Parameters Type Name Description SeparatedSyntaxList < ExpressionSyntax > expressions Returns Type Description ReturnStatementSyntax | Improve this Doc View Source ReturnStatement(SyntaxToken, SeparatedSyntaxList<ExpressionSyntax>, SyntaxToken) Creates a new ReturnStatementSyntax node. Declaration public static ReturnStatementSyntax ReturnStatement(SyntaxToken returnKeyword, SeparatedSyntaxList<ExpressionSyntax> expressions, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken returnKeyword SeparatedSyntaxList < ExpressionSyntax > expressions SyntaxToken semicolonToken Returns Type Description ReturnStatementSyntax | Improve this Doc View Source SeparatedList<TNode>() Creates an empty separated list. Declaration public static SeparatedSyntaxList<TNode> SeparatedList<TNode>() where TNode : SyntaxNode Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SeparatedList<TNode>(IEnumerable<TNode>, IEnumerable<SyntaxToken>) Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens. Declaration public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode> nodes, IEnumerable<SyntaxToken> separators) where TNode : SyntaxNode Parameters Type Name Description IEnumerable <TNode> nodes A sequence of syntax nodes. IEnumerable < SyntaxToken > separators A sequence of token to be interleaved between the nodes. The number of tokens must be one less than the number of nodes. Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken>) Creates a separated list from a sequence of nodes and tokens, starting with a node and alternating between additional nodes and separator tokens. Declaration public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<SyntaxNodeOrToken> nodesAndTokens) where TNode : SyntaxNode Parameters Type Name Description IEnumerable < SyntaxNodeOrToken > nodesAndTokens A sequence of nodes or tokens, alternating between nodes and separator tokens. Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SeparatedList<TNode>(SyntaxNodeOrTokenList) Creates a separated list from a SyntaxNodeOrTokenList , where the list elements start with a node and then alternate between additional nodes and separator tokens. Declaration public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(SyntaxNodeOrTokenList nodesAndTokens) where TNode : SyntaxNode Parameters Type Name Description SyntaxNodeOrTokenList nodesAndTokens The list of nodes and tokens. Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SeparatedList<TNode>(Nullable<IEnumerable<TNode>>) Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between. Declaration public static SeparatedSyntaxList<TNode> SeparatedList<TNode>(IEnumerable<TNode>? nodes) where TNode : SyntaxNode Parameters Type Name Description Nullable < IEnumerable <TNode>> nodes A sequence of syntax nodes. Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SimpleFunctionName(SyntaxToken) Creates a new SimpleFunctionNameSyntax node. Declaration public static SimpleFunctionNameSyntax SimpleFunctionName(SyntaxToken name) Parameters Type Name Description SyntaxToken name Returns Type Description SimpleFunctionNameSyntax | Improve this Doc View Source SimpleTypeName(SyntaxToken) Creates a new SimpleTypeNameSyntax instance. Declaration public static SimpleTypeNameSyntax SimpleTypeName(SyntaxToken identifierToken) Parameters Type Name Description SyntaxToken identifierToken Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source SimpleTypeName(SyntaxToken, TypeArgumentListSyntax) Creates a new SimpleTypeNameSyntax node. Declaration public static SimpleTypeNameSyntax SimpleTypeName(SyntaxToken identifierToken, TypeArgumentListSyntax typeArgumentList) Parameters Type Name Description SyntaxToken identifierToken TypeArgumentListSyntax typeArgumentList Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source SimpleTypeName(String) Creates a new SimpleTypeNameSyntax instance. Declaration public static SimpleTypeNameSyntax SimpleTypeName(string identifierToken) Parameters Type Name Description String identifierToken Returns Type Description SimpleTypeNameSyntax | Improve this Doc View Source SingletonList<TNode>(TNode) Creates a singleton list of syntax nodes. Declaration public static SyntaxList<TNode> SingletonList<TNode>(TNode node) where TNode : SyntaxNode Parameters Type Name Description TNode node The single element node. Returns Type Description SyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SingletonSeparatedList<TNode>(TNode) Creates a singleton separated list. Declaration public static SeparatedSyntaxList<TNode> SingletonSeparatedList<TNode>(TNode node) where TNode : SyntaxNode Parameters Type Name Description TNode node A single node. Returns Type Description SeparatedSyntaxList <TNode> Type Parameters Name Description TNode The specific type of the element nodes. | Improve this Doc View Source SkippedTokensTrivia() Creates a new SkippedTokensTriviaSyntax instance. Declaration public static SkippedTokensTriviaSyntax SkippedTokensTrivia() Returns Type Description SkippedTokensTriviaSyntax | Improve this Doc View Source SkippedTokensTrivia(SyntaxTokenList) Declaration public static SkippedTokensTriviaSyntax SkippedTokensTrivia(SyntaxTokenList tokens) Parameters Type Name Description SyntaxTokenList tokens Returns Type Description SkippedTokensTriviaSyntax | Improve this Doc View Source StatementList() Creates a new StatementListSyntax instance. Declaration public static StatementListSyntax StatementList() Returns Type Description StatementListSyntax | Improve this Doc View Source StatementList(IEnumerable<StatementSyntax>) Creates a new StatementListSyntax instance. Declaration public static StatementListSyntax StatementList(IEnumerable<StatementSyntax> statements) Parameters Type Name Description IEnumerable < StatementSyntax > statements Returns Type Description StatementListSyntax | Improve this Doc View Source StatementList(StatementSyntax[]) Creates a new StatementListSyntax instance. Declaration public static StatementListSyntax StatementList(params StatementSyntax[] statements) Parameters Type Name Description StatementSyntax [] statements Returns Type Description StatementListSyntax | Improve this Doc View Source StatementList(SyntaxList<StatementSyntax>) Creates a new StatementListSyntax node. Declaration public static StatementListSyntax StatementList(SyntaxList<StatementSyntax> statements) Parameters Type Name Description SyntaxList < StatementSyntax > statements Returns Type Description StatementListSyntax | Improve this Doc View Source StringFunctionArgument(LiteralExpressionSyntax) Creates a new StringFunctionArgumentSyntax node. Declaration public static StringFunctionArgumentSyntax StringFunctionArgument(LiteralExpressionSyntax expression) Parameters Type Name Description LiteralExpressionSyntax expression Returns Type Description StringFunctionArgumentSyntax | Improve this Doc View Source SyntaxTree(SyntaxNode, ParseOptions, String, Encoding) Create a new syntax tree from a syntax node. Declaration public static SyntaxTree SyntaxTree(SyntaxNode root, ParseOptions options = null, string path = \"\", Encoding encoding = null) Parameters Type Name Description SyntaxNode root ParseOptions options String path Encoding encoding Returns Type Description SyntaxTree | Improve this Doc View Source SyntaxTrivia(SyntaxKind, String) Trivia nodes represent parts of the program text that are not parts of the syntactic grammar, such as spaces, newlines, shebangs and comments. Declaration public static SyntaxTrivia SyntaxTrivia(SyntaxKind kind, string text) Parameters Type Name Description SyntaxKind kind A SyntaxKind representing the specific kind of SyntaxTrivia(SyntaxKind, String) . One of ShebangTrivia , EndOfLineTrivia , SingleLineCommentTrivia , MultiLineCommentTrivia , WhitespaceTrivia String text The actual text of this token. Returns Type Description SyntaxTrivia | Improve this Doc View Source TableConstructorExpression(SeparatedSyntaxList<TableFieldSyntax>) Creates a new TableConstructorExpressionSyntax instance. Declaration public static TableConstructorExpressionSyntax TableConstructorExpression(SeparatedSyntaxList<TableFieldSyntax> fields = default(SeparatedSyntaxList<TableFieldSyntax>)) Parameters Type Name Description SeparatedSyntaxList < TableFieldSyntax > fields Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source TableConstructorExpression(SyntaxToken, SeparatedSyntaxList<TableFieldSyntax>, SyntaxToken) Creates a new TableConstructorExpressionSyntax node. Declaration public static TableConstructorExpressionSyntax TableConstructorExpression(SyntaxToken openBraceToken, SeparatedSyntaxList<TableFieldSyntax> fields, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken SeparatedSyntaxList < TableFieldSyntax > fields SyntaxToken closeBraceToken Returns Type Description TableConstructorExpressionSyntax | Improve this Doc View Source TableConstructorFunctionArgument(TableConstructorExpressionSyntax) Creates a new TableConstructorFunctionArgumentSyntax node. Declaration public static TableConstructorFunctionArgumentSyntax TableConstructorFunctionArgument(TableConstructorExpressionSyntax tableConstructor) Parameters Type Name Description TableConstructorExpressionSyntax tableConstructor Returns Type Description TableConstructorFunctionArgumentSyntax | Improve this Doc View Source TableType(SeparatedSyntaxList<TableTypeElementSyntax>) Creates a new TableTypeSyntax instance. Declaration public static TableTypeSyntax TableType(SeparatedSyntaxList<TableTypeElementSyntax> elements = default(SeparatedSyntaxList<TableTypeElementSyntax>)) Parameters Type Name Description SeparatedSyntaxList < TableTypeElementSyntax > elements Returns Type Description TableTypeSyntax | Improve this Doc View Source TableType(SyntaxToken, SeparatedSyntaxList<TableTypeElementSyntax>, SyntaxToken) Creates a new TableTypeSyntax node. Declaration public static TableTypeSyntax TableType(SyntaxToken openBraceToken, SeparatedSyntaxList<TableTypeElementSyntax> elements, SyntaxToken closeBraceToken) Parameters Type Name Description SyntaxToken openBraceToken SeparatedSyntaxList < TableTypeElementSyntax > elements SyntaxToken closeBraceToken Returns Type Description TableTypeSyntax | Improve this Doc View Source TableTypeIndexer(TypeSyntax, TypeSyntax) Creates a new TableTypeIndexerSyntax instance. Declaration public static TableTypeIndexerSyntax TableTypeIndexer(TypeSyntax indexType, TypeSyntax valueType) Parameters Type Name Description TypeSyntax indexType TypeSyntax valueType Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source TableTypeIndexer(SyntaxToken, TypeSyntax, SyntaxToken, SyntaxToken, TypeSyntax) Creates a new TableTypeIndexerSyntax node. Declaration public static TableTypeIndexerSyntax TableTypeIndexer(SyntaxToken openBracketToken, TypeSyntax indexType, SyntaxToken closeBracketToken, SyntaxToken colonToken, TypeSyntax valueType) Parameters Type Name Description SyntaxToken openBracketToken TypeSyntax indexType SyntaxToken closeBracketToken SyntaxToken colonToken TypeSyntax valueType Returns Type Description TableTypeIndexerSyntax | Improve this Doc View Source TableTypeProperty(SyntaxToken, TypeSyntax) Creates a new TableTypePropertySyntax instance. Declaration public static TableTypePropertySyntax TableTypeProperty(SyntaxToken identifier, TypeSyntax valueType) Parameters Type Name Description SyntaxToken identifier TypeSyntax valueType Returns Type Description TableTypePropertySyntax | Improve this Doc View Source TableTypeProperty(SyntaxToken, SyntaxToken, TypeSyntax) Creates a new TableTypePropertySyntax node. Declaration public static TableTypePropertySyntax TableTypeProperty(SyntaxToken identifier, SyntaxToken colonToken, TypeSyntax valueType) Parameters Type Name Description SyntaxToken identifier SyntaxToken colonToken TypeSyntax valueType Returns Type Description TableTypePropertySyntax | Improve this Doc View Source TableTypeProperty(String, TypeSyntax) Creates a new TableTypePropertySyntax instance. Declaration public static TableTypePropertySyntax TableTypeProperty(string identifier, TypeSyntax valueType) Parameters Type Name Description String identifier TypeSyntax valueType Returns Type Description TableTypePropertySyntax | Improve this Doc View Source Token(SyntaxKind) Creates a token corresponding to a syntax kind. This method can be used for token syntax kinds whose text can be inferred by the kind alone. Declaration public static SyntaxToken Token(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind A syntax kind value for a token. These have the suffix Token or Keyword. Returns Type Description SyntaxToken | Improve this Doc View Source Token(SyntaxTriviaList, SyntaxKind, SyntaxTriviaList) Creates a token corresponding to syntax kind. This method can be used for token syntax kinds whose text can be inferred by the kind alone. Declaration public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. SyntaxKind kind A syntax kind value for a token. These have the suffix Token or Keyword. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source Token(SyntaxTriviaList, SyntaxKind, String, String, SyntaxTriviaList) Creates a token corresponding to syntax kind. This method gives control over token Text and ValueText. Declaration public static SyntaxToken Token(SyntaxTriviaList leading, SyntaxKind kind, string text, string valueText, SyntaxTriviaList trailing) Parameters Type Name Description SyntaxTriviaList leading A list of trivia immediately preceding the token. SyntaxKind kind A syntax kind value for a token. These have the suffix Token or Keyword. String text The text from which this token was created (e.g. lexed). String valueText How Lua should interpret the text of this token. SyntaxTriviaList trailing A list of trivia immediately following the token. Returns Type Description SyntaxToken | Improve this Doc View Source TokenList() Creates an empty list of tokens. Declaration public static SyntaxTokenList TokenList() Returns Type Description SyntaxTokenList | Improve this Doc View Source TokenList(IEnumerable<SyntaxToken>) Creates a list of tokens. Declaration public static SyntaxTokenList TokenList(IEnumerable<SyntaxToken> tokens) Parameters Type Name Description IEnumerable < SyntaxToken > tokens Returns Type Description SyntaxTokenList | Improve this Doc View Source TokenList(SyntaxToken) Creates a singleton list of tokens. Declaration public static SyntaxTokenList TokenList(SyntaxToken token) Parameters Type Name Description SyntaxToken token The single token. Returns Type Description SyntaxTokenList | Improve this Doc View Source TokenList(SyntaxToken[]) Creates a list of tokens. Declaration public static SyntaxTokenList TokenList(params SyntaxToken[] tokens) Parameters Type Name Description SyntaxToken [] tokens An array of tokens. Returns Type Description SyntaxTokenList | Improve this Doc View Source Trivia(StructuredTriviaSyntax) Creates a trivia from a StructuredTriviaSyntax node. Declaration public static SyntaxTrivia Trivia(StructuredTriviaSyntax node) Parameters Type Name Description StructuredTriviaSyntax node Returns Type Description SyntaxTrivia | Improve this Doc View Source TriviaList() Creates an empty list of trivia. Declaration public static SyntaxTriviaList TriviaList() Returns Type Description SyntaxTriviaList | Improve this Doc View Source TriviaList(IEnumerable<SyntaxTrivia>) Creates a list of trivia. Declaration public static SyntaxTriviaList TriviaList(IEnumerable<SyntaxTrivia> trivias) Parameters Type Name Description IEnumerable < SyntaxTrivia > trivias A sequence of trivia. Returns Type Description SyntaxTriviaList | Improve this Doc View Source TriviaList(SyntaxTrivia) Creates a singleton list of trivia. Declaration public static SyntaxTriviaList TriviaList(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia A single trivia. Returns Type Description SyntaxTriviaList | Improve this Doc View Source TriviaList(SyntaxTrivia[]) Creates a list of trivia. Declaration public static SyntaxTriviaList TriviaList(params SyntaxTrivia[] trivias) Parameters Type Name Description SyntaxTrivia [] trivias An array of trivia. Returns Type Description SyntaxTriviaList | Improve this Doc View Source TypeArgumentList(SeparatedSyntaxList<TypeSyntax>) Creates a new TypeArgumentListSyntax instance. Declaration public static TypeArgumentListSyntax TypeArgumentList(SeparatedSyntaxList<TypeSyntax> arguments = default(SeparatedSyntaxList<TypeSyntax>)) Parameters Type Name Description SeparatedSyntaxList < TypeSyntax > arguments Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source TypeArgumentList(SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken) Creates a new TypeArgumentListSyntax node. Declaration public static TypeArgumentListSyntax TypeArgumentList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeSyntax> arguments, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SeparatedSyntaxList < TypeSyntax > arguments SyntaxToken greaterThanToken Returns Type Description TypeArgumentListSyntax | Improve this Doc View Source TypeBinding(TypeSyntax) Creates a new TypeBindingSyntax instance. Declaration public static TypeBindingSyntax TypeBinding(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description TypeBindingSyntax | Improve this Doc View Source TypeBinding(SyntaxToken, TypeSyntax) Creates a new TypeBindingSyntax node. Declaration public static TypeBindingSyntax TypeBinding(SyntaxToken colonToken, TypeSyntax type) Parameters Type Name Description SyntaxToken colonToken TypeSyntax type Returns Type Description TypeBindingSyntax | Improve this Doc View Source TypeCastExpression(ExpressionSyntax, TypeSyntax) Creates a new TypeCastExpressionSyntax instance. Declaration public static TypeCastExpressionSyntax TypeCastExpression(ExpressionSyntax expression, TypeSyntax type) Parameters Type Name Description ExpressionSyntax expression TypeSyntax type Returns Type Description TypeCastExpressionSyntax | Improve this Doc View Source TypeCastExpression(ExpressionSyntax, SyntaxToken, TypeSyntax) Creates a new TypeCastExpressionSyntax node. Declaration public static TypeCastExpressionSyntax TypeCastExpression(ExpressionSyntax expression, SyntaxToken colonColonToken, TypeSyntax type) Parameters Type Name Description ExpressionSyntax expression SyntaxToken colonColonToken TypeSyntax type Returns Type Description TypeCastExpressionSyntax | Improve this Doc View Source TypeDeclarationStatement(SyntaxToken, TypeParameterListSyntax, TypeSyntax) Creates a new TypeDeclarationStatementSyntax instance. Declaration public static TypeDeclarationStatementSyntax TypeDeclarationStatement(SyntaxToken name, TypeParameterListSyntax typeParameterList, TypeSyntax type) Parameters Type Name Description SyntaxToken name TypeParameterListSyntax typeParameterList TypeSyntax type Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source TypeDeclarationStatement(SyntaxToken, TypeSyntax) Creates a new TypeDeclarationStatementSyntax instance. Declaration public static TypeDeclarationStatementSyntax TypeDeclarationStatement(SyntaxToken name, TypeSyntax type) Parameters Type Name Description SyntaxToken name TypeSyntax type Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source TypeDeclarationStatement(SyntaxToken, SyntaxToken, SyntaxToken, TypeParameterListSyntax, SyntaxToken, TypeSyntax, SyntaxToken) Creates a new TypeDeclarationStatementSyntax node. Declaration public static TypeDeclarationStatementSyntax TypeDeclarationStatement(SyntaxToken exportKeyword, SyntaxToken typeKeyword, SyntaxToken name, TypeParameterListSyntax typeParameterList, SyntaxToken equalsToken, TypeSyntax type, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken exportKeyword SyntaxToken typeKeyword SyntaxToken name TypeParameterListSyntax typeParameterList SyntaxToken equalsToken TypeSyntax type SyntaxToken semicolonToken Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source TypeDeclarationStatement(String, TypeSyntax) Creates a new TypeDeclarationStatementSyntax instance. Declaration public static TypeDeclarationStatementSyntax TypeDeclarationStatement(string name, TypeSyntax type) Parameters Type Name Description String name TypeSyntax type Returns Type Description TypeDeclarationStatementSyntax | Improve this Doc View Source TypedIdentifierName(IdentifierNameSyntax) Creates a new TypedIdentifierNameSyntax instance. Declaration public static TypedIdentifierNameSyntax TypedIdentifierName(IdentifierNameSyntax identifierName) Parameters Type Name Description IdentifierNameSyntax identifierName Returns Type Description TypedIdentifierNameSyntax | Improve this Doc View Source TypedIdentifierName(IdentifierNameSyntax, TypeBindingSyntax) Creates a new TypedIdentifierNameSyntax node. Declaration public static TypedIdentifierNameSyntax TypedIdentifierName(IdentifierNameSyntax identifierName, TypeBindingSyntax typeBinding) Parameters Type Name Description IdentifierNameSyntax identifierName TypeBindingSyntax typeBinding Returns Type Description TypedIdentifierNameSyntax | Improve this Doc View Source TypedIdentifierName(String) Creates a new TypedIdentifierNameSyntax instance. Declaration public static TypedIdentifierNameSyntax TypedIdentifierName(string identifierName) Parameters Type Name Description String identifierName Returns Type Description TypedIdentifierNameSyntax | Improve this Doc View Source TypeofType(ExpressionSyntax) Creates a new TypeofTypeSyntax instance. Declaration public static TypeofTypeSyntax TypeofType(ExpressionSyntax expression) Parameters Type Name Description ExpressionSyntax expression Returns Type Description TypeofTypeSyntax | Improve this Doc View Source TypeofType(SyntaxToken, SyntaxToken, ExpressionSyntax, SyntaxToken) Creates a new TypeofTypeSyntax node. Declaration public static TypeofTypeSyntax TypeofType(SyntaxToken typeofKeyword, SyntaxToken openParenthesisToken, ExpressionSyntax expression, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken typeofKeyword SyntaxToken openParenthesisToken ExpressionSyntax expression SyntaxToken closeParenthesisToken Returns Type Description TypeofTypeSyntax | Improve this Doc View Source TypePack(SeparatedSyntaxList<TypeSyntax>) Creates a new TypePackSyntax instance. Declaration public static TypePackSyntax TypePack(SeparatedSyntaxList<TypeSyntax> types = default(SeparatedSyntaxList<TypeSyntax>)) Parameters Type Name Description SeparatedSyntaxList < TypeSyntax > types Returns Type Description TypePackSyntax | Improve this Doc View Source TypePack(SyntaxToken, SeparatedSyntaxList<TypeSyntax>, SyntaxToken) Creates a new TypePackSyntax node. Declaration public static TypePackSyntax TypePack(SyntaxToken openParenthesisToken, SeparatedSyntaxList<TypeSyntax> types, SyntaxToken closeParenthesisToken) Parameters Type Name Description SyntaxToken openParenthesisToken SeparatedSyntaxList < TypeSyntax > types SyntaxToken closeParenthesisToken Returns Type Description TypePackSyntax | Improve this Doc View Source TypeParameter(SyntaxToken) Creates a new TypeParameterSyntax instance. Declaration public static TypeParameterSyntax TypeParameter(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description TypeParameterSyntax | Improve this Doc View Source TypeParameter(SyntaxToken, EqualsTypeSyntax) Creates a new TypeParameterSyntax instance. Declaration public static TypeParameterSyntax TypeParameter(SyntaxToken identifier, EqualsTypeSyntax equalsType) Parameters Type Name Description SyntaxToken identifier EqualsTypeSyntax equalsType Returns Type Description TypeParameterSyntax | Improve this Doc View Source TypeParameter(SyntaxToken, SyntaxToken, EqualsTypeSyntax) Creates a new TypeParameterSyntax node. Declaration public static TypeParameterSyntax TypeParameter(SyntaxToken identifier, SyntaxToken dotDotDotToken, EqualsTypeSyntax equalsType) Parameters Type Name Description SyntaxToken identifier SyntaxToken dotDotDotToken EqualsTypeSyntax equalsType Returns Type Description TypeParameterSyntax | Improve this Doc View Source TypeParameter(String) Creates a new TypeParameterSyntax instance. Declaration public static TypeParameterSyntax TypeParameter(string identifier) Parameters Type Name Description String identifier Returns Type Description TypeParameterSyntax | Improve this Doc View Source TypeParameterList(SeparatedSyntaxList<TypeParameterSyntax>) Creates a new TypeParameterListSyntax instance. Declaration public static TypeParameterListSyntax TypeParameterList(SeparatedSyntaxList<TypeParameterSyntax> names = default(SeparatedSyntaxList<TypeParameterSyntax>)) Parameters Type Name Description SeparatedSyntaxList < TypeParameterSyntax > names Returns Type Description TypeParameterListSyntax | Improve this Doc View Source TypeParameterList(SyntaxToken, SeparatedSyntaxList<TypeParameterSyntax>, SyntaxToken) Creates a new TypeParameterListSyntax node. Declaration public static TypeParameterListSyntax TypeParameterList(SyntaxToken lessThanToken, SeparatedSyntaxList<TypeParameterSyntax> names, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SeparatedSyntaxList < TypeParameterSyntax > names SyntaxToken greaterThanToken Returns Type Description TypeParameterListSyntax | Improve this Doc View Source UnaryExpression(SyntaxKind, SyntaxToken, ExpressionSyntax) Creates a new UnaryExpressionSyntax node. Declaration public static UnaryExpressionSyntax UnaryExpression(SyntaxKind kind, SyntaxToken operatorToken, ExpressionSyntax operand) Parameters Type Name Description SyntaxKind kind SyntaxToken operatorToken ExpressionSyntax operand Returns Type Description UnaryExpressionSyntax | Improve this Doc View Source UnionType(TypeSyntax, TypeSyntax) Creates a new UnionTypeSyntax instance. Declaration public static UnionTypeSyntax UnionType(TypeSyntax left, TypeSyntax right) Parameters Type Name Description TypeSyntax left TypeSyntax right Returns Type Description UnionTypeSyntax | Improve this Doc View Source UnionType(TypeSyntax, SyntaxToken, TypeSyntax) Creates a new UnionTypeSyntax node. Declaration public static UnionTypeSyntax UnionType(TypeSyntax left, SyntaxToken pipeToken, TypeSyntax right) Parameters Type Name Description TypeSyntax left SyntaxToken pipeToken TypeSyntax right Returns Type Description UnionTypeSyntax | Improve this Doc View Source UnkeyedTableField(ExpressionSyntax) Creates a new UnkeyedTableFieldSyntax node. Declaration public static UnkeyedTableFieldSyntax UnkeyedTableField(ExpressionSyntax value) Parameters Type Name Description ExpressionSyntax value Returns Type Description UnkeyedTableFieldSyntax | Improve this Doc View Source VarArgExpression() Creates a new VarArgExpressionSyntax instance. Declaration public static VarArgExpressionSyntax VarArgExpression() Returns Type Description VarArgExpressionSyntax | Improve this Doc View Source VarArgExpression(SyntaxToken) Creates a new VarArgExpressionSyntax node. Declaration public static VarArgExpressionSyntax VarArgExpression(SyntaxToken varArgToken) Parameters Type Name Description SyntaxToken varArgToken Returns Type Description VarArgExpressionSyntax | Improve this Doc View Source VarArgParameter(TypeBindingSyntax) Creates a new VarArgParameterSyntax instance. Declaration public static VarArgParameterSyntax VarArgParameter(TypeBindingSyntax typeBinding = null) Parameters Type Name Description TypeBindingSyntax typeBinding Returns Type Description VarArgParameterSyntax | Improve this Doc View Source VarArgParameter(SyntaxToken, TypeBindingSyntax) Creates a new VarArgParameterSyntax node. Declaration public static VarArgParameterSyntax VarArgParameter(SyntaxToken varArgToken, TypeBindingSyntax typeBinding) Parameters Type Name Description SyntaxToken varArgToken TypeBindingSyntax typeBinding Returns Type Description VarArgParameterSyntax | Improve this Doc View Source VariableAttribute(SyntaxToken) Creates a new VariableAttributeSyntax instance. Declaration public static VariableAttributeSyntax VariableAttribute(SyntaxToken identifier) Parameters Type Name Description SyntaxToken identifier Returns Type Description VariableAttributeSyntax | Improve this Doc View Source VariableAttribute(SyntaxToken, SyntaxToken, SyntaxToken) Creates a new VariableAttributeSyntax node. Declaration public static VariableAttributeSyntax VariableAttribute(SyntaxToken lessThanToken, SyntaxToken identifier, SyntaxToken greaterThanToken) Parameters Type Name Description SyntaxToken lessThanToken SyntaxToken identifier SyntaxToken greaterThanToken Returns Type Description VariableAttributeSyntax | Improve this Doc View Source VariableAttribute(String) Creates a new VariableAttributeSyntax instance. Declaration public static VariableAttributeSyntax VariableAttribute(string identifier) Parameters Type Name Description String identifier Returns Type Description VariableAttributeSyntax | Improve this Doc View Source VariadicTypePack(TypeSyntax) Creates a new VariadicTypePackSyntax instance. Declaration public static VariadicTypePackSyntax VariadicTypePack(TypeSyntax type) Parameters Type Name Description TypeSyntax type Returns Type Description VariadicTypePackSyntax | Improve this Doc View Source VariadicTypePack(SyntaxToken, TypeSyntax) Creates a new VariadicTypePackSyntax node. Declaration public static VariadicTypePackSyntax VariadicTypePack(SyntaxToken dotDotDotToken, TypeSyntax type) Parameters Type Name Description SyntaxToken dotDotDotToken TypeSyntax type Returns Type Description VariadicTypePackSyntax | Improve this Doc View Source WhileStatement(ExpressionSyntax, StatementListSyntax) Creates a new WhileStatementSyntax instance. Declaration public static WhileStatementSyntax WhileStatement(ExpressionSyntax condition, StatementListSyntax body) Parameters Type Name Description ExpressionSyntax condition StatementListSyntax body Returns Type Description WhileStatementSyntax | Improve this Doc View Source WhileStatement(SyntaxToken, ExpressionSyntax, SyntaxToken, StatementListSyntax, SyntaxToken, SyntaxToken) Creates a new WhileStatementSyntax node. Declaration public static WhileStatementSyntax WhileStatement(SyntaxToken whileKeyword, ExpressionSyntax condition, SyntaxToken doKeyword, StatementListSyntax body, SyntaxToken endKeyword, SyntaxToken semicolonToken) Parameters Type Name Description SyntaxToken whileKeyword ExpressionSyntax condition SyntaxToken doKeyword StatementListSyntax body SyntaxToken endKeyword SyntaxToken semicolonToken Returns Type Description WhileStatementSyntax | Improve this Doc View Source Whitespace(String) Creates a trivia with kind WhitespaceTrivia containing the specified text. Declaration public static SyntaxTrivia Whitespace(string text) Parameters Type Name Description String text The text of the whitespace. Any text can be specified here, however only specific whitespace characters are recognized by the parser. Returns Type Description SyntaxTrivia"
  },
  "api/Loretta.CodeAnalysis.Lua.SyntaxFacts.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SyntaxFacts.html",
    "title": "Class SyntaxFacts | Loretta",
    "keywords": "Class SyntaxFacts A static class containing facts about Lua's Syntax. Inheritance Object SyntaxFacts Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class SyntaxFacts Properties | Improve this Doc View Source EqualityComparer A custom equality comparer for SyntaxKind Declaration public static IEqualityComparer<SyntaxKind> EqualityComparer { get; } Property Value Type Description IEqualityComparer < SyntaxKind > Remarks PERF: The framework specializes EqualityComparer for enums, but only if the underlying type is System.Int32 Since SyntaxKind's underlying type is System.UInt16, ObjectEqualityComparer will be chosen instead. Methods | Improve this Doc View Source GetBinaryExpression(SyntaxKind) Returns the expression kind for a given unary operator or None if not a unary operator. Declaration public static Option<SyntaxKind> GetBinaryExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator. | Improve this Doc View Source GetBinaryExpressionKinds() Returns all SyntaxKind s that are in the BinaryExpression category. Declaration public static IEnumerable<SyntaxKind> GetBinaryExpressionKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetBinaryOperatorKinds() Returns all SyntaxKind s that can be considered binary operators. Declaration public static IEnumerable<SyntaxKind> GetBinaryOperatorKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetBinaryOperatorPrecedence(SyntaxKind) Returns the precedence for a given binary operator. Returns 0 if kind is not a binary operator. Declaration public static int GetBinaryOperatorPrecedence(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Int32 A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator. | Improve this Doc View Source GetCompoundAssignmentOperator(SyntaxKind) Declaration public static Option<SyntaxKind> GetCompoundAssignmentOperator(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > | Improve this Doc View Source GetCompoundAssignmentOperatorTokenKinds() Returns all SyntaxKind s that are in the CompoundAssignmentOperatorToken category. Declaration public static IEnumerable<SyntaxKind> GetCompoundAssignmentOperatorTokenKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetCompoundAssignmentStatement(SyntaxKind) Declaration public static Option<SyntaxKind> GetCompoundAssignmentStatement(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > | Improve this Doc View Source GetCompoundAssignmentStatementKinds() Returns all SyntaxKind s that are in the CompoundAssignmentStatement category. Declaration public static IEnumerable<SyntaxKind> GetCompoundAssignmentStatementKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetConstantValue(SyntaxKind) Obtains the constant value of the token kind. Declaration public static Option<object> GetConstantValue(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < Object > | Improve this Doc View Source GetFunctionExpressionOrDeclarationKinds() Returns all SyntaxKind s that are in the FunctionExpressionOrDeclaration category. Declaration public static IEnumerable<SyntaxKind> GetFunctionExpressionOrDeclarationKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetKeywordKind(ReadOnlySpan<Char>) Returns the SyntaxKind for a given keyword or IdentifierName if not a keyword. Declaration public static SyntaxKind GetKeywordKind(ReadOnlySpan<char> span) Parameters Type Name Description ReadOnlySpan < Char > span Returns Type Description SyntaxKind | Improve this Doc View Source GetKeywordKind(String) Returns the SyntaxKind for a given keyword or IdentifierName if not a keyword. Declaration public static SyntaxKind GetKeywordKind(string text) Parameters Type Name Description String text Returns Type Description SyntaxKind | Improve this Doc View Source GetLiteralExpression(SyntaxKind) Declaration public static Option<SyntaxKind> GetLiteralExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > | Improve this Doc View Source GetLiteralTokenKinds() Returns all SyntaxKind s that are in the LiteralToken category. Declaration public static IEnumerable<SyntaxKind> GetLiteralTokenKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetOperatorTokenKind(SyntaxKind) Declaration public static Option<SyntaxKind> GetOperatorTokenKind(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > | Improve this Doc View Source GetText(SyntaxKind) Gets the predefined text that corresponds to the provided syntax kind. Declaration public static string GetText(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind The kind to obtain the text for. Returns Type Description String The text corresponding to the provided kind or Empty if none. | Improve this Doc View Source GetUnaryExpression(SyntaxKind) Returns the expression kind for a given unary operator or None if not a unary operator. Declaration public static Option<SyntaxKind> GetUnaryExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Tsu.Option < SyntaxKind > A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator. | Improve this Doc View Source GetUnaryExpressionKinds() Returns all SyntaxKind s that are in the UnaryExpression category. Declaration public static IEnumerable<SyntaxKind> GetUnaryExpressionKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetUnaryOperatorKinds() Returns all SyntaxKind s that can be considered unary operators. Declaration public static IEnumerable<SyntaxKind> GetUnaryOperatorKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source GetUnaryOperatorPrecedence(SyntaxKind) Returns the precedence for a given unary operator or 0 if not a unary operator. Declaration public static int GetUnaryOperatorPrecedence(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Int32 A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator. | Improve this Doc View Source GetVariableExpressionKinds() Returns all SyntaxKind s that are in the VariableExpression category. Declaration public static IEnumerable<SyntaxKind> GetVariableExpressionKinds() Returns Type Description IEnumerable < SyntaxKind > | Improve this Doc View Source IsBinaryExpression(SyntaxKind) Checks whether the provided SyntaxKind is a binaryexpression's. Declaration public static bool IsBinaryExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsBinaryOperatorToken(SyntaxKind) Checks whether the provided SyntaxKind is a binaryoperatortoken's. Declaration public static bool IsBinaryOperatorToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsComment(SyntaxKind) Checks whether a SyntaxKind is a comment's. Declaration public static bool IsComment(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsCompoundAssignmentOperatorToken(SyntaxKind) Checks whether the provided SyntaxKind is a compoundassignmentoperatortoken's. Declaration public static bool IsCompoundAssignmentOperatorToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsCompoundAssignmentStatement(SyntaxKind) Checks whether the provided SyntaxKind is a compoundassignmentstatement's. Declaration public static bool IsCompoundAssignmentStatement(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsContextualKeyword(SyntaxKind, LuaSyntaxOptions) Checks whether a given kind is a contextual keyword. Declaration public static bool IsContextualKeyword(SyntaxKind kind, LuaSyntaxOptions syntaxOptions) Parameters Type Name Description SyntaxKind kind LuaSyntaxOptions syntaxOptions Returns Type Description Boolean | Improve this Doc View Source IsFunctionExpressionOrDeclaration(SyntaxKind) Checks whether the provided SyntaxKind is a functionexpressionordeclaration's. Declaration public static bool IsFunctionExpressionOrDeclaration(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsKeyword(SyntaxKind) Checks whether the provided SyntaxKind is a keyword's. Declaration public static bool IsKeyword(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsLiteralToken(SyntaxKind) Checks whether the provided SyntaxKind is a literaltoken's. Declaration public static bool IsLiteralToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsOperatorToken(SyntaxKind) Checks whether the provided SyntaxKind is a operatortoken's. Declaration public static bool IsOperatorToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsReservedKeyword(SyntaxKind, LuaSyntaxOptions) Checks whether a given kind is a reserved keyword. Declaration public static bool IsReservedKeyword(SyntaxKind actual, LuaSyntaxOptions syntaxOptions) Parameters Type Name Description SyntaxKind actual LuaSyntaxOptions syntaxOptions Returns Type Description Boolean | Improve this Doc View Source IsRightAssociative(SyntaxKind) Checks whether a given SyntaxKind is a right associative operator's. Declaration public static bool IsRightAssociative(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsToken(SyntaxKind) Checks whether the provided SyntaxKind is a token's. Declaration public static bool IsToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsTrivia(SyntaxKind) Checks whether the provided SyntaxKind is a trivia's. Declaration public static bool IsTrivia(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsUnaryExpression(SyntaxKind) Checks whether the provided SyntaxKind is a unaryexpression's. Declaration public static bool IsUnaryExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsUnaryOperatorToken(SyntaxKind) Checks whether the provided SyntaxKind is a unaryoperatortoken's. Declaration public static bool IsUnaryOperatorToken(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source IsVariableExpression(SyntaxKind) Checks whether the provided SyntaxKind is a variableexpression's. Declaration public static bool IsVariableExpression(SyntaxKind kind) Parameters Type Name Description SyntaxKind kind Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.Lua.SyntaxKind.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.SyntaxKind.html",
    "title": "Enum SyntaxKind | Loretta",
    "keywords": "Enum SyntaxKind Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public enum SyntaxKind : ushort Fields Name Description AddAssignmentStatement AddExpression AmpersandAmpersandToken Represents the && token. AmpersandToken Represents the & token. AndKeyword Represents the langword_csharp_and keyword. AnonymousFunctionExpression ArrayType AssignmentStatement BadToken BangEqualsToken Represents the != token. BangToken Represents the ! token. BitwiseAndExpression BitwiseNotExpression BitwiseOrExpression BreakKeyword Represents the langword_csharp_break keyword. BreakStatement CloseBraceToken Represents the } token. CloseBracketToken Represents the ] token. CloseParenthesisToken Represents the ) token. ColonColonToken Represents the :: token. ColonToken Represents the : token. CommaToken Represents the , token. CompilationUnit CompositeTypeName ConcatAssignmentStatement ConcatExpression ContinueKeyword Represents the langword_csharp_continue keyword. ContinueStatement DivideAssignmentStatement DivideExpression DoKeyword Represents the langword_csharp_do keyword. DoStatement DotDotDotToken Represents the ... token. DotDotEqualsToken Represents the ..= token. DotDotToken Represents the .. token. DotToken Represents the . token. ElementAccessExpression ElseClause ElseIfClause ElseIfExpressionClause ElseIfKeyword Represents the langword_csharp_elseif keyword. ElseKeyword Represents the langword_csharp_else keyword. EmptyStatement EndKeyword Represents the langword_csharp_end keyword. EndOfFileToken EndOfLineTrivia EqualsEqualsToken Represents the == token. EqualsExpression EqualsToken Represents the = token. EqualsType EqualsValuesClause ExclusiveOrExpression ExponentiateAssignmentStatement ExponentiateExpression ExportKeyword Represents the langword_csharp_export keyword. ExpressionKeyedTableField ExpressionListFunctionArgument ExpressionStatement FalseKeyword Represents the false keyword. FalseLiteralExpression FalseType FloorDivideExpression ForKeyword Represents the langword_csharp_for keyword. FunctionCallExpression FunctionDeclarationStatement FunctionKeyword Represents the langword_csharp_function keyword. FunctionType GenericForStatement GenericTypePack GotoKeyword Represents the langword_csharp_goto keyword. GotoLabelStatement GotoStatement GreaterThanEqualsToken Represents the >= token. GreaterThanExpression GreaterThanGreaterThanToken Represents the >> token. GreaterThanOrEqualExpression GreaterThanToken Represents the > token. HashStringLiteralExpression HashStringLiteralToken HashToken Represents the # token. HatEqualsToken Represents the ^= token. HatToken Represents the ^ token. IdentifierKeyedTableField IdentifierName IdentifierToken IfExpression IfKeyword Represents the langword_csharp_if keyword. IfStatement InKeyword Represents the langword_csharp_in keyword. IntersectionType LeftShiftExpression LengthExpression LessThanEqualsToken Represents the <= token. LessThanExpression LessThanLessThanToken Represents the << token. LessThanOrEqualExpression LessThanToken Represents the < token. List LocalDeclarationName LocalFunctionDeclarationStatement LocalKeyword Represents the langword_csharp_local keyword. LocalVariableDeclarationStatement LogicalAndExpression LogicalNotExpression LogicalOrExpression MemberAccessExpression MemberFunctionName MethodCallExpression MethodFunctionName MinusEqualsToken Represents the -= token. MinusGreaterThanToken Represents the -> token. MinusToken Represents the - token. ModuloAssignmentStatement ModuloExpression MultiLineCommentTrivia MultiplyAssignmentStatement MultiplyExpression NamedParameter NilableType NilKeyword Represents the langword_csharp_nil keyword. NilLiteralExpression NilType None NotEqualsExpression NotKeyword Represents the langword_csharp_not keyword. NumericalLiteralExpression NumericForStatement NumericLiteralToken OpenBraceToken Represents the { token. OpenBracketToken Represents the [ token. OpenParenthesisToken Represents the ( token. OrKeyword Represents the langword_csharp_or keyword. ParameterList ParenthesizedExpression ParenthesizedType PercentEqualsToken Represents the %= token. PercentToken Represents the % token. PipePipeToken Represents the || token. PipeToken Represents the | token. PlusEqualsToken Represents the += token. PlusToken Represents the + token. QuestionToken Represents the ? token. RepeatKeyword Represents the langword_csharp_repeat keyword. RepeatUntilStatement ReturnKeyword Represents the langword_csharp_return keyword. ReturnStatement RightShiftExpression SemicolonToken Represents the ; token. ShebangTrivia SimpleFunctionName SimpleTypeName SingleLineCommentTrivia SkippedTokensTrivia SlashEqualsToken Represents the /= token. SlashSlashToken Represents the // token. SlashToken Represents the / token. StarEqualsToken Represents the *= token. StarToken Represents the * token. StatementList StringFunctionArgument StringLiteralExpression StringLiteralToken StringType SubtractAssignmentStatement SubtractExpression TableConstructorExpression TableConstructorFunctionArgument TableType TableTypeIndexer TableTypeProperty ThenKeyword Represents the langword_csharp_then keyword. TildeEqualsToken Represents the ~= token. TildeToken Represents the ~ token. TrueKeyword Represents the true keyword. TrueLiteralExpression TrueType TypeArgumentList TypeBinding TypeCastExpression TypeDeclarationStatement TypedIdentifierName TypeKeyword Represents the langword_csharp_type keyword. TypeofKeyword Represents the langword_csharp_typeof keyword. TypeofType TypePack TypeParameter TypeParameterList UnaryMinusExpression UnionType UnkeyedTableField UntilKeyword Represents the langword_csharp_util keyword. VarArgExpression VarArgParameter VariableAttribute VariadicTypePack WhileKeyword Represents the langword_csharp_while keyword. WhileStatement WhitespaceTrivia"
  },
  "api/Loretta.CodeAnalysis.Lua.VariableConflictError.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.VariableConflictError.html",
    "title": "Class VariableConflictError | Loretta",
    "keywords": "Class VariableConflictError Represents a conflict with an existing variable. Inheritance Object RenameError VariableConflictError Implements IEquatable < RenameError > IEquatable < VariableConflictError > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public class VariableConflictError : RenameError, IEquatable<RenameError>, IEquatable<VariableConflictError> Constructors | Improve this Doc View Source VariableConflictError(IVariable) Represents a conflict with an existing variable. Declaration public VariableConflictError(IVariable VariableBeingConflictedWith) Parameters Type Name Description IVariable VariableBeingConflictedWith The variable that is conflicted with. Properties | Improve this Doc View Source VariableBeingConflictedWith Declaration public IVariable VariableBeingConflictedWith { get; set; } Property Value Type Description IVariable Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "api/Loretta.CodeAnalysis.Lua.VariableKind.html": {
    "href": "api/Loretta.CodeAnalysis.Lua.VariableKind.html",
    "title": "Enum VariableKind | Loretta",
    "keywords": "Enum VariableKind The kind of varibles available. Namespace : Loretta.CodeAnalysis.Lua Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public enum VariableKind Fields Name Description Global A global variable. Iteration A loop iteration variable. Local A local variable. Parameter A function parameter."
  },
  "api/Loretta.CodeAnalysis.LuaExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.LuaExtensions.html",
    "title": "Class LuaExtensions | Loretta",
    "keywords": "Class LuaExtensions Extension methods for lua specific data. Inheritance Object LuaExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.Lua.dll Syntax public static class LuaExtensions Methods | Improve this Doc View Source Any(SyntaxTokenList, SyntaxKind) Tests whether a list contains a token of a particular kind. Declaration public static bool Any(this SyntaxTokenList list, SyntaxKind kind) Parameters Type Name Description SyntaxTokenList list SyntaxKind kind The SyntaxKind to test for. Returns Type Description Boolean Returns true if the list contains a token which matches kind | Improve this Doc View Source Any(SyntaxTriviaList, SyntaxKind) True if the list has at least one trivia of the specified kind. Declaration public static bool Any(this SyntaxTriviaList list, SyntaxKind kind) Parameters Type Name Description SyntaxTriviaList list SyntaxKind kind Returns Type Description Boolean | Improve this Doc View Source Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind) True if the list has at least one node of the specified kind. Declaration public static bool Any<TNode>(this SeparatedSyntaxList<TNode> list, SyntaxKind kind) where TNode : SyntaxNode Parameters Type Name Description SeparatedSyntaxList <TNode> list SyntaxKind kind Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source Any<TNode>(SyntaxList<TNode>, SyntaxKind) True if the list has at least one node of the specified kind. Declaration public static bool Any<TNode>(this SyntaxList<TNode> list, SyntaxKind kind) where TNode : SyntaxNode Parameters Type Name Description SyntaxList <TNode> list SyntaxKind kind Returns Type Description Boolean Type Parameters Name Description TNode | Improve this Doc View Source IndexOf(SyntaxTokenList, SyntaxKind) Returns the index of the first token of a specified kind in the token list. Declaration public static int IndexOf(this SyntaxTokenList list, SyntaxKind kind) Parameters Type Name Description SyntaxTokenList list Token list. SyntaxKind kind The SyntaxKind to find. Returns Type Description Int32 Returns non-negative index if the list contains a token which matches kind , -1 otherwise. | Improve this Doc View Source IndexOf(SyntaxTriviaList, SyntaxKind) Returns the index of the first trivia of a specified kind in the trivia list. Declaration public static int IndexOf(this SyntaxTriviaList list, SyntaxKind kind) Parameters Type Name Description SyntaxTriviaList list Trivia list. SyntaxKind kind The SyntaxKind to find. Returns Type Description Int32 Returns non-negative index if the list contains a trivia which matches kind , -1 otherwise. | Improve this Doc View Source IndexOf<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind) Returns the index of the first node of a specified kind in the node list. Declaration public static int IndexOf<TNode>(this SeparatedSyntaxList<TNode> list, SyntaxKind kind) where TNode : SyntaxNode Parameters Type Name Description SeparatedSyntaxList <TNode> list Node list. SyntaxKind kind The SyntaxKind to find. Returns Type Description Int32 Returns non-negative index if the list contains a node which matches kind , -1 otherwise. Type Parameters Name Description TNode | Improve this Doc View Source IndexOf<TNode>(SyntaxList<TNode>, SyntaxKind) Returns the index of the first node of a specified kind in the node list. Declaration public static int IndexOf<TNode>(this SyntaxList<TNode> list, SyntaxKind kind) where TNode : SyntaxNode Parameters Type Name Description SyntaxList <TNode> list Node list. SyntaxKind kind The SyntaxKind to find. Returns Type Description Int32 Returns non-negative index if the list contains a node which matches kind , -1 otherwise. Type Parameters Name Description TNode | Improve this Doc View Source IsKind(SyntaxNode, SyntaxKind) Determines if SyntaxNode is of a specified kind. Declaration public static bool IsKind(this SyntaxNode node, SyntaxKind kind) Parameters Type Name Description SyntaxNode node The source node. SyntaxKind kind The syntax kind to test for. Returns Type Description Boolean true if the node is of the specified kind; otherwise, false . | Improve this Doc View Source IsKind(SyntaxNodeOrToken, SyntaxKind) Determines if SyntaxNodeOrToken is of a specified kind. Declaration public static bool IsKind(this SyntaxNodeOrToken nodeOrToken, SyntaxKind kind) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken The source node or token. SyntaxKind kind The syntax kind to test for. Returns Type Description Boolean true if the node or token is of the specified kind; otherwise, false . | Improve this Doc View Source IsKind(SyntaxToken, SyntaxKind) Determines if SyntaxToken is of a specified kind. Declaration public static bool IsKind(this SyntaxToken token, SyntaxKind kind) Parameters Type Name Description SyntaxToken token The source token. SyntaxKind kind The syntax kind to test for. Returns Type Description Boolean true if the token is of the specified kind; otherwise, false . | Improve this Doc View Source IsKind(SyntaxTrivia, SyntaxKind) Determines if SyntaxTrivia is of a specified kind. Declaration public static bool IsKind(this SyntaxTrivia trivia, SyntaxKind kind) Parameters Type Name Description SyntaxTrivia trivia The source trivia. SyntaxKind kind The syntax kind to test for. Returns Type Description Boolean true if the trivia is of the specified kind; otherwise, false ."
  },
  "api/Loretta.CodeAnalysis.ObjectDisplayOptions.html": {
    "href": "api/Loretta.CodeAnalysis.ObjectDisplayOptions.html",
    "title": "Enum ObjectDisplayOptions | Loretta",
    "keywords": "Enum ObjectDisplayOptions Specifies the options for how generics are displayed in the description of a symbol. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum ObjectDisplayOptions Fields Name Description EscapeNonPrintableCharacters Replace non-printable (e.g. control) characters with dedicated (e.g. \\t) or unicode (\\u0001) escape sequences. EscapeWithUtf8 Escapes characters using their UTF8 encoding instead of unicode escapes. None Format object using default options. UseHexadecimalNumbers Whether or not to display integral literals in hexadecimal. UseQuotes Whether or not to quote string literals."
  },
  "api/Loretta.CodeAnalysis.ParseOptions.html": {
    "href": "api/Loretta.CodeAnalysis.ParseOptions.html",
    "title": "Class ParseOptions | Loretta",
    "keywords": "Class ParseOptions Represents parse options common to C# and VB. Inheritance Object ParseOptions LuaParseOptions Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class ParseOptions Properties | Improve this Doc View Source DocumentationMode Gets a value indicating whether the documentation comments are parsed. Declaration public DocumentationMode DocumentationMode { get; protected set; } Property Value Type Description DocumentationMode true if documentation comments are parsed, false otherwise. | Improve this Doc View Source Errors Errors collection related to an incompatible set of parse options Declaration public ImmutableArray<Diagnostic> Errors { get; } Property Value Type Description ImmutableArray < Diagnostic > | Improve this Doc View Source Features Returns the experimental features. Declaration public abstract IReadOnlyDictionary<string, string> Features { get; } Property Value Type Description IReadOnlyDictionary < String , String > | Improve this Doc View Source Language Gets the source language (\"Lua\"). Declaration public abstract string Language { get; } Property Value Type Description String Methods | Improve this Doc View Source Equals(Object) Declaration public abstract override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source WithDocumentationMode(DocumentationMode) Creates a new options instance with the specified documentation mode. Declaration public ParseOptions WithDocumentationMode(DocumentationMode documentationMode) Parameters Type Name Description DocumentationMode documentationMode Returns Type Description ParseOptions | Improve this Doc View Source WithFeatures(IEnumerable<KeyValuePair<String, String>>) Enable some experimental language features for testing. Declaration public ParseOptions WithFeatures(IEnumerable<KeyValuePair<string, string>> features) Parameters Type Name Description IEnumerable < KeyValuePair < String , String >> features Returns Type Description ParseOptions Operators | Improve this Doc View Source Equality(ParseOptions, ParseOptions) Checks whether two parse options are equal. Declaration public static bool operator ==(ParseOptions left, ParseOptions right) Parameters Type Name Description ParseOptions left ParseOptions right Returns Type Description Boolean | Improve this Doc View Source Inequality(ParseOptions, ParseOptions) Checks whether two parse options are not equal. Declaration public static bool operator !=(ParseOptions left, ParseOptions right) Parameters Type Name Description ParseOptions left ParseOptions right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SeparatedSyntaxList-1.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SeparatedSyntaxList-1.Enumerator.html",
    "title": "Struct SeparatedSyntaxList<TNode>.Enumerator | Loretta",
    "keywords": "Struct SeparatedSyntaxList<TNode>.Enumerator The enumerator for SeparatedSyntaxList<TNode> . Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly TNode Current { get; } Property Value Type Description TNode Methods | Improve this Doc View Source Equals(Object) Not supported. Do not call. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not call. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Operators | Improve this Doc View Source Equality(SeparatedSyntaxList<TNode>.Enumerator, SeparatedSyntaxList<TNode>.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(SeparatedSyntaxList<TNode>.Enumerator left, SeparatedSyntaxList<TNode>.Enumerator right) Parameters Type Name Description SeparatedSyntaxList.Enumerator <> left SeparatedSyntaxList.Enumerator <> right Returns Type Description Boolean | Improve this Doc View Source Inequality(SeparatedSyntaxList<TNode>.Enumerator, SeparatedSyntaxList<TNode>.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(SeparatedSyntaxList<TNode>.Enumerator left, SeparatedSyntaxList<TNode>.Enumerator right) Parameters Type Name Description SeparatedSyntaxList.Enumerator <> left SeparatedSyntaxList.Enumerator <> right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SeparatedSyntaxList-1.html": {
    "href": "api/Loretta.CodeAnalysis.SeparatedSyntaxList-1.html",
    "title": "Struct SeparatedSyntaxList<TNode> | Loretta",
    "keywords": "Struct SeparatedSyntaxList<TNode> Represents a list of nodes separated by one token. May have a trailing node. Implements IEquatable < SeparatedSyntaxList <TNode>> IReadOnlyList <TNode> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SeparatedSyntaxList<TNode> where TNode : SyntaxNode Type Parameters Name Description TNode Properties | Improve this Doc View Source Count The amount of nodes contained in this list. Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source FullSpan The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source Item[Int32] Obtains a node from this list at the provided index. Declaration public readonly TNode this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description TNode | Improve this Doc View Source SeparatorCount The amount of separators contained in this list. Declaration public readonly int SeparatorCount { get; } Property Value Type Description Int32 | Improve this Doc View Source Span The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Add(TNode) Creates a new list with the specified node added to the end. Declaration public readonly SeparatedSyntaxList<TNode> Add(TNode node) Parameters Type Name Description TNode node The node to add. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source AddRange(IEnumerable<TNode>) Creates a new list with the specified nodes added to the end. Declaration public readonly SeparatedSyntaxList<TNode> AddRange(IEnumerable<TNode> nodes) Parameters Type Name Description System.Collections.IEnumerable <TNode> nodes The nodes to add. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source Any() Returns whether this list contains any elements. Declaration public readonly bool Any() Returns Type Description Boolean | Improve this Doc View Source Contains(TNode) Returns whether this list contains the provided node. Declaration public readonly bool Contains(TNode node) Parameters Type Name Description TNode node Returns Type Description Boolean | Improve this Doc View Source Equals(SeparatedSyntaxList<TNode>) Declaration public readonly bool Equals(SeparatedSyntaxList<TNode> other) Parameters Type Name Description SeparatedSyntaxList <TNode> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source First() Returns the first node in this list. Declaration public readonly TNode First() Returns Type Description TNode | Improve this Doc View Source FirstOrDefault() Returns the first node in this list if any, otherwise returns the default value for the type of node. Declaration public readonly TNode FirstOrDefault() Returns Type Description TNode | Improve this Doc View Source GetEnumerator() Returns the enumerator for this list. Declaration public readonly SeparatedSyntaxList<TNode>.Enumerator GetEnumerator() Returns Type Description SeparatedSyntaxList.Enumerator <> | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetSeparator(Int32) Gets the separator at the given index in this list. Declaration public readonly SyntaxToken GetSeparator(int index) Parameters Type Name Description Int32 index The index. Returns Type Description SyntaxToken | Improve this Doc View Source GetSeparators() Returns the sequence of just the separator tokens. Declaration public readonly IEnumerable<SyntaxToken> GetSeparators() Returns Type Description System.Collections.IEnumerable < SyntaxToken > | Improve this Doc View Source GetWithSeparators() Returns the entire list including the separators. Declaration public readonly SyntaxNodeOrTokenList GetWithSeparators() Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source IndexOf(TNode) Returns the index of the provided node in this list. Declaration public readonly int IndexOf(TNode node) Parameters Type Name Description TNode node Returns Type Description Int32 -1 if the node was not found. | Improve this Doc View Source IndexOf(Func<TNode, Boolean>) Returns the index of the first node that passes the provided predicate in this list. Declaration public readonly int IndexOf(Func<TNode, bool> predicate) Parameters Type Name Description Func <TNode, Boolean > predicate Returns Type Description Int32 -1 if not found. | Improve this Doc View Source Insert(Int32, TNode) Creates a new list with the specified node inserted at the index. Declaration public readonly SeparatedSyntaxList<TNode> Insert(int index, TNode node) Parameters Type Name Description Int32 index The index to insert at. TNode node The node to insert. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source InsertRange(Int32, IEnumerable<TNode>) Creates a new list with the specified nodes inserted at the index. Declaration public readonly SeparatedSyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes) Parameters Type Name Description Int32 index The index to insert at. System.Collections.IEnumerable <TNode> nodes The nodes to insert. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source Last() Returns the last element in this list. Declaration public readonly TNode Last() Returns Type Description TNode | Improve this Doc View Source LastIndexOf(TNode) Returns the index of the last node that is equal to the provided one. Declaration public readonly int LastIndexOf(TNode node) Parameters Type Name Description TNode node Returns Type Description Int32 -1 if not found. | Improve this Doc View Source LastIndexOf(Func<TNode, Boolean>) Returns the index of the last node that passes the provided predicate in this list. Declaration public readonly int LastIndexOf(Func<TNode, bool> predicate) Parameters Type Name Description Func <TNode, Boolean > predicate Returns Type Description Int32 -1 if not found. | Improve this Doc View Source LastOrDefault() Returns the last element in this list if any, otherwise returns the default value for the node type. Declaration public readonly TNode LastOrDefault() Returns Type Description TNode | Improve this Doc View Source Remove(TNode) Creates a new list with specified element removed. Declaration public readonly SeparatedSyntaxList<TNode> Remove(TNode node) Parameters Type Name Description TNode node The element to remove. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source RemoveAt(Int32) Creates a new list with the element at the specified index removed. Declaration public readonly SeparatedSyntaxList<TNode> RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source Replace(TNode, TNode) Creates a new list with the specified element replaced by the new node. Declaration public readonly SeparatedSyntaxList<TNode> Replace(TNode nodeInList, TNode newNode) Parameters Type Name Description TNode nodeInList The element to replace. TNode newNode The new node. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source ReplaceRange(TNode, IEnumerable<TNode>) Creates a new list with the specified element replaced by the new nodes. Declaration public readonly SeparatedSyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes) Parameters Type Name Description TNode nodeInList The element to replace. System.Collections.IEnumerable <TNode> newNodes The new nodes. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source ReplaceSeparator(SyntaxToken, SyntaxToken) Creates a new list with the specified separator token replaced with the new separator. Declaration public readonly SeparatedSyntaxList<TNode> ReplaceSeparator(SyntaxToken separatorToken, SyntaxToken newSeparator) Parameters Type Name Description SyntaxToken separatorToken The separator token to be replaced. SyntaxToken newSeparator The new separator token. Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source ToFullString() Returns the full string representation of the nodes in this list including separators, the first node's leading trivia, and the last node or token's trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of the nodes in this list including separators including separators, the first node's leading trivia, and the last node or token's trailing trivia. | Improve this Doc View Source ToString() Returns the string representation of the nodes in this list including separators but not including the first node's leading trivia and the last node or token's trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of the nodes in this list including separators but not including the first node's leading trivia and the last node or token's trailing trivia. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>) Checks whether a list is equal to another. Declaration public static bool operator ==(SeparatedSyntaxList<TNode> left, SeparatedSyntaxList<TNode> right) Parameters Type Name Description SeparatedSyntaxList <TNode> left SeparatedSyntaxList <TNode> right Returns Type Description Boolean | Improve this Doc View Source Implicit(SeparatedSyntaxList<TNode> to SeparatedSyntaxList<SyntaxNode>) Converts a typed node list into an opaquely typed node list. Declaration public static implicit operator SeparatedSyntaxList<SyntaxNode>(SeparatedSyntaxList<TNode> nodes) Parameters Type Name Description SeparatedSyntaxList <TNode> nodes Returns Type Description SeparatedSyntaxList < SyntaxNode > | Improve this Doc View Source Implicit(SeparatedSyntaxList<SyntaxNode> to SeparatedSyntaxList<TNode>) Converts a list of opaquely typed nodes into a list of typed nodes. Declaration public static implicit operator SeparatedSyntaxList<TNode>(SeparatedSyntaxList<SyntaxNode> nodes) Parameters Type Name Description SeparatedSyntaxList < SyntaxNode > nodes Returns Type Description SeparatedSyntaxList <TNode> | Improve this Doc View Source Inequality(SeparatedSyntaxList<TNode>, SeparatedSyntaxList<TNode>) Checks whether two lists are not equal. Declaration public static bool operator !=(SeparatedSyntaxList<TNode> left, SeparatedSyntaxList<TNode> right) Parameters Type Name Description SeparatedSyntaxList <TNode> left SeparatedSyntaxList <TNode> right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEquatable<> IReadOnlyList<> Extension Methods LuaExtensions.IndexOf<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind) LuaExtensions.Any<TNode>(SeparatedSyntaxList<TNode>, SyntaxKind)"
  },
  "api/Loretta.CodeAnalysis.SyntaxAnnotation.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxAnnotation.html",
    "title": "Class SyntaxAnnotation | Loretta",
    "keywords": "Class SyntaxAnnotation A SyntaxAnnotation is used to annotate syntax elements with additional information. Since syntax elements are immutable, annotating them requires creating new instances of them with the annotations attached. Inheritance Object SyntaxAnnotation Implements IEquatable < SyntaxAnnotation > Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public sealed class SyntaxAnnotation : IObjectWritable Constructors | Improve this Doc View Source SyntaxAnnotation() Creates a new empty annotation. Declaration public SyntaxAnnotation() | Improve this Doc View Source SyntaxAnnotation(String) Creates a new annotation without a value. Declaration public SyntaxAnnotation(string kind) Parameters Type Name Description String kind | Improve this Doc View Source SyntaxAnnotation(String, String) Creates a new annotation. Declaration public SyntaxAnnotation(string kind, string data) Parameters Type Name Description String kind String data Properties | Improve this Doc View Source Data The annotation's data. Declaration public string Data { get; } Property Value Type Description String | Improve this Doc View Source ElasticAnnotation A predefined syntax annotation that indicates whether the syntax element has elastic trivia. Declaration public static SyntaxAnnotation ElasticAnnotation { get; } Property Value Type Description SyntaxAnnotation | Improve this Doc View Source Kind The kind of annotation. Declaration public string Kind { get; } Property Value Type Description String Methods | Improve this Doc View Source Equals(SyntaxAnnotation) Declaration public bool Equals(SyntaxAnnotation other) Parameters Type Name Description SyntaxAnnotation other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Operators | Improve this Doc View Source Equality(SyntaxAnnotation, SyntaxAnnotation) Checks whether two annotations are equal. Declaration public static bool operator ==(SyntaxAnnotation left, SyntaxAnnotation right) Parameters Type Name Description SyntaxAnnotation left SyntaxAnnotation right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxAnnotation, SyntaxAnnotation) Checks whether two annotations are not equal. Declaration public static bool operator !=(SyntaxAnnotation left, SyntaxAnnotation right) Parameters Type Name Description SyntaxAnnotation left SyntaxAnnotation right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.SyntaxList-1.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxList-1.Enumerator.html",
    "title": "Struct SyntaxList<TNode>.Enumerator | Loretta",
    "keywords": "Struct SyntaxList<TNode>.Enumerator The enumerator for SyntaxList<TNode> . Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly TNode Current { get; } Property Value Type Description TNode Methods | Improve this Doc View Source Equals(Object) Not supported. Do not call. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not call. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Operators | Improve this Doc View Source Equality(SyntaxList<TNode>.Enumerator, SyntaxList<TNode>.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(SyntaxList<TNode>.Enumerator left, SyntaxList<TNode>.Enumerator right) Parameters Type Name Description SyntaxList.Enumerator <> left SyntaxList.Enumerator <> right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxList<TNode>.Enumerator, SyntaxList<TNode>.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(SyntaxList<TNode>.Enumerator left, SyntaxList<TNode>.Enumerator right) Parameters Type Name Description SyntaxList.Enumerator <> left SyntaxList.Enumerator <> right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SyntaxList-1.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxList-1.html",
    "title": "Struct SyntaxList<TNode> | Loretta",
    "keywords": "Struct SyntaxList<TNode> A list of SyntaxNode . Implements IReadOnlyList <TNode> IEquatable < SyntaxList <TNode>> Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxList<TNode> where TNode : SyntaxNode Type Parameters Name Description TNode Constructors | Improve this Doc View Source SyntaxList(TNode) Creates a singleton list of syntax nodes. Declaration public SyntaxList(TNode node) Parameters Type Name Description TNode node The single element node. | Improve this Doc View Source SyntaxList(Nullable<IEnumerable<TNode>>) Creates a list of syntax nodes. Declaration public SyntaxList(IEnumerable<TNode>? nodes) Parameters Type Name Description Nullable < System.Collections.IEnumerable <TNode>> nodes A sequence of element nodes. Properties | Improve this Doc View Source Count The number of nodes in the list. Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source FullSpan The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source Item[Int32] Gets the node at the specified index. Declaration public readonly TNode this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the node to get or set. Property Value Type Description TNode The node at the specified index. | Improve this Doc View Source Span The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Add(TNode) Creates a new list with the specified node added at the end. Declaration public readonly SyntaxList<TNode> Add(TNode node) Parameters Type Name Description TNode node The node to add. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source AddRange(IEnumerable<TNode>) Creates a new list with the specified nodes added at the end. Declaration public readonly SyntaxList<TNode> AddRange(IEnumerable<TNode> nodes) Parameters Type Name Description System.Collections.IEnumerable <TNode> nodes The nodes to add. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source Any() True if the list has at least one node. Declaration public readonly bool Any() Returns Type Description Boolean | Improve this Doc View Source Equals(SyntaxList<TNode>) Declaration public readonly bool Equals(SyntaxList<TNode> other) Parameters Type Name Description SyntaxList <TNode> other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source First() The first node in the list. Declaration public readonly TNode First() Returns Type Description TNode | Improve this Doc View Source FirstOrDefault() The first node in the list or default if the list is empty. Declaration public readonly TNode FirstOrDefault() Returns Type Description TNode | Improve this Doc View Source GetEnumerator() Gets the enumerator for this list. Declaration public readonly SyntaxList<TNode>.Enumerator GetEnumerator() Returns Type Description SyntaxList.Enumerator <> | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source IndexOf(TNode) The index of the node in this list, or -1 if the node is not in the list. Declaration public readonly int IndexOf(TNode node) Parameters Type Name Description TNode node Returns Type Description Int32 | Improve this Doc View Source IndexOf(Func<TNode, Boolean>) Returns the index of the first node in this list that passes the provided predicate. Declaration public readonly int IndexOf(Func<TNode, bool> predicate) Parameters Type Name Description Func <TNode, Boolean > predicate Returns Type Description Int32 -1 if not found. | Improve this Doc View Source Insert(Int32, TNode) Creates a new list with the specified node inserted at the index. Declaration public readonly SyntaxList<TNode> Insert(int index, TNode node) Parameters Type Name Description Int32 index The index to insert at. TNode node The node to insert. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source InsertRange(Int32, IEnumerable<TNode>) Creates a new list with the specified nodes inserted at the index. Declaration public readonly SyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes) Parameters Type Name Description Int32 index The index to insert at. System.Collections.IEnumerable <TNode> nodes The nodes to insert. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source Last() The last node in the list. Declaration public readonly TNode Last() Returns Type Description TNode | Improve this Doc View Source LastIndexOf(TNode) Returns the index of the last item that is equal to the provided node in this list. Declaration public readonly int LastIndexOf(TNode node) Parameters Type Name Description TNode node Returns Type Description Int32 -1 if not found. | Improve this Doc View Source LastIndexOf(Func<TNode, Boolean>) Returns the index of the last node in this list that passes the provided predicate. Declaration public readonly int LastIndexOf(Func<TNode, bool> predicate) Parameters Type Name Description Func <TNode, Boolean > predicate Returns Type Description Int32 | Improve this Doc View Source LastOrDefault() The last node in the list or default if the list is empty. Declaration public readonly TNode LastOrDefault() Returns Type Description TNode | Improve this Doc View Source Remove(TNode) Creates a new list with the element removed. Declaration public readonly SyntaxList<TNode> Remove(TNode node) Parameters Type Name Description TNode node The element to remove. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source RemoveAt(Int32) Creates a new list with the element at specified index removed. Declaration public readonly SyntaxList<TNode> RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source Replace(TNode, TNode) Creates a new list with the specified element replaced with the new node. Declaration public readonly SyntaxList<TNode> Replace(TNode nodeInList, TNode newNode) Parameters Type Name Description TNode nodeInList The element to replace. TNode newNode The new node. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source ReplaceRange(TNode, IEnumerable<TNode>) Creates a new list with the specified element replaced with new nodes. Declaration public readonly SyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes) Parameters Type Name Description TNode nodeInList The element to replace. System.Collections.IEnumerable <TNode> newNodes The new nodes. Returns Type Description SyntaxList <TNode> | Improve this Doc View Source ToFullString() Returns the full string representation of the nodes in this list including the first node's leading trivia and the last node's trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of the nodes in this list including the first node's leading trivia and the last node's trailing trivia. | Improve this Doc View Source ToString() Returns the string representation of the nodes in this list, not including the first node's leading trivia and the last node's trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of the nodes in this list, not including the first node's leading trivia and the last node's trailing trivia. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(SyntaxList<TNode>, SyntaxList<TNode>) Checks whether two lists are equal. Does a reference check instead of structural. Declaration public static bool operator ==(SyntaxList<TNode> left, SyntaxList<TNode> right) Parameters Type Name Description SyntaxList <TNode> left SyntaxList <TNode> right Returns Type Description Boolean | Improve this Doc View Source Implicit(SyntaxList<TNode> to SyntaxList<SyntaxNode>) Converts a typed node list into an opaquely typed node list. Declaration public static implicit operator SyntaxList<SyntaxNode>(SyntaxList<TNode> nodes) Parameters Type Name Description SyntaxList <TNode> nodes Returns Type Description SyntaxList < SyntaxNode > | Improve this Doc View Source Implicit(SyntaxList<SyntaxNode> to SyntaxList<TNode>) Converts an opaquely typed node list into a typed node list. Declaration public static implicit operator SyntaxList<TNode>(SyntaxList<SyntaxNode> nodes) Parameters Type Name Description SyntaxList < SyntaxNode > nodes Returns Type Description SyntaxList <TNode> | Improve this Doc View Source Inequality(SyntaxList<TNode>, SyntaxList<TNode>) Checks whether two lists are not equal. Does a reference check instead of structural. Declaration public static bool operator !=(SyntaxList<TNode> left, SyntaxList<TNode> right) Parameters Type Name Description SyntaxList <TNode> left SyntaxList <TNode> right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IReadOnlyList<> IEquatable<> Extension Methods LuaExtensions.IndexOf<TNode>(SyntaxList<TNode>, SyntaxKind) LuaExtensions.Any<TNode>(SyntaxList<TNode>, SyntaxKind)"
  },
  "api/Loretta.CodeAnalysis.SyntaxNode.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxNode.html",
    "title": "Class SyntaxNode | Loretta",
    "keywords": "Class SyntaxNode Represents a non-terminal node in the syntax tree. Inheritance Object SyntaxNode LuaSyntaxNode Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SyntaxNode Properties | Improve this Doc View Source ContainsAnnotations Determines whether this node or any sub node, token or trivia has annotations. Declaration public bool ContainsAnnotations { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDiagnostics Determines whether this node or any of its descendant nodes, tokens or trivia have any diagnostics on them. Declaration public bool ContainsDiagnostics { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDirectives Determines whether this node has any descendant preprocessor directives. Declaration public bool ContainsDirectives { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsSkippedText Determines whether this node has any descendant skipped text. Declaration public bool ContainsSkippedText { get; } Property Value Type Description Boolean | Improve this Doc View Source FullSpan The absolute span of this node in characters, including its leading and trailing trivia. Declaration public TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source HasLeadingTrivia Determines whether this node has any leading trivia. Declaration public bool HasLeadingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStructuredTrivia Determines whether a descendant trivia of this node is structured. Declaration public bool HasStructuredTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source HasTrailingTrivia Determines whether this node has any trailing trivia. Declaration public bool HasTrailingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissing Determines whether the node represents a language construct that was actually parsed from the source code. Missing nodes are generated by the parser in error scenarios to represent constructs that should have been present in the source code in order to compile successfully but were actually missing. Declaration public bool IsMissing { get; } Property Value Type Description Boolean | Improve this Doc View Source IsStructuredTrivia Determines whether this node represents a structured trivia. Declaration public bool IsStructuredTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source Language The language name that this node is syntax of. Declaration public abstract string Language { get; } Property Value Type Description String | Improve this Doc View Source Parent The node that contains this node in its ChildNodes() collection. Declaration public SyntaxNode Parent { get; } Property Value Type Description SyntaxNode | Improve this Doc View Source ParentTrivia The parent trivia for this node in case it is part of structured trivia. Declaration public virtual SyntaxTrivia ParentTrivia { get; } Property Value Type Description SyntaxTrivia | Improve this Doc View Source RawKind An integer representing the language specific kind of this node. Declaration public int RawKind { get; } Property Value Type Description Int32 | Improve this Doc View Source Span The absolute span of this node in characters, not including its leading and trailing trivia. Declaration public TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SpanStart Same as accessing Start on Span . Declaration public int SpanStart { get; } Property Value Type Description Int32 Remarks Slight performance improvement. | Improve this Doc View Source SyntaxTree Returns SyntaxTree that owns the node or null if node does not belong to a SyntaxTree Declaration public SyntaxTree SyntaxTree { get; } Property Value Type Description SyntaxTree Methods | Improve this Doc View Source Ancestors(Boolean) Gets a list of ancestor nodes Declaration public IEnumerable<SyntaxNode> Ancestors(bool ascendOutOfTrivia = true) Parameters Type Name Description Boolean ascendOutOfTrivia Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source AncestorsAndSelf(Boolean) Gets a list of ancestor nodes (including this node) Declaration public IEnumerable<SyntaxNode> AncestorsAndSelf(bool ascendOutOfTrivia = true) Parameters Type Name Description Boolean ascendOutOfTrivia Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source ChildNodes() Gets a list of the child nodes in prefix document order. Declaration public IEnumerable<SyntaxNode> ChildNodes() Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source ChildNodesAndTokens() The list of child nodes and tokens of this node, where each element is a SyntaxNodeOrToken instance. Declaration public ChildSyntaxList ChildNodesAndTokens() Returns Type Description ChildSyntaxList | Improve this Doc View Source ChildThatContainsPosition(Int32) Returns the child node or token that contains the provided position. Declaration public virtual SyntaxNodeOrToken ChildThatContainsPosition(int position) Parameters Type Name Description Int32 position Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source ChildTokens() Gets a list of the direct child tokens of this node. Declaration public IEnumerable<SyntaxToken> ChildTokens() Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source Contains(SyntaxNode) Determines if the specified node is a descendant of this node. Returns true for current node. Declaration public bool Contains(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description Boolean | Improve this Doc View Source CopyAnnotationsTo<T>(T) Copies all SyntaxAnnotations, if any, from this SyntaxNode instance and attaches them to a new instance based on node . Declaration public T CopyAnnotationsTo<T>(T node) where T : SyntaxNode Parameters Type Name Description T node Returns Type Description T Type Parameters Name Description T Remarks If no annotations are copied, just returns node . It can also be used manually to preserve annotations in a more complex tree modification, even if the type of a node changes. | Improve this Doc View Source DescendantNodes(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes in prefix document order. Declaration public IEnumerable<SyntaxNode> DescendantNodes(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span The span the node's full span must intersect. Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source DescendantNodes(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes in prefix document order. Declaration public IEnumerable<SyntaxNode> DescendantNodes(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source DescendantNodesAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes (including this node) in prefix document order. Declaration public IEnumerable<SyntaxNode> DescendantNodesAndSelf(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span The span the node's full span must intersect. Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source DescendantNodesAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes (including this node) in prefix document order. Declaration public IEnumerable<SyntaxNode> DescendantNodesAndSelf(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source DescendantNodesAndTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of the descendant nodes and tokens in prefix document order. Declaration public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span The span the node's full span must intersect. Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source DescendantNodesAndTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes and tokens in prefix document order. Declaration public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source DescendantNodesAndTokensAndSelf(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of the descendant nodes and tokens (including this node) in prefix document order. Declaration public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span The span the node's full span must intersect. Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source DescendantNodesAndTokensAndSelf(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of descendant nodes and tokens (including this node) in prefix document order. Declaration public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren An optional function that determines if the search descends into the argument node's children. Boolean descendIntoTrivia Determines if nodes that are part of structured trivia are included in the list. Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source DescendantTokens(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of all the tokens in the full span of this node. Declaration public IEnumerable<SyntaxToken> DescendantTokens(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren Boolean descendIntoTrivia Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source DescendantTokens(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Gets a list of all the tokens in the span of this node. Declaration public IEnumerable<SyntaxToken> DescendantTokens(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren Boolean descendIntoTrivia Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source DescendantTrivia(TextSpan, Nullable<Func<SyntaxNode, Boolean>>, Boolean) Get a list of all the trivia associated with the descendant nodes and tokens. Declaration public IEnumerable<SyntaxTrivia> DescendantTrivia(TextSpan span, Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description TextSpan span Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren Boolean descendIntoTrivia Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source DescendantTrivia(Nullable<Func<SyntaxNode, Boolean>>, Boolean) Get a list of all the trivia associated with the descendant nodes and tokens. Declaration public IEnumerable<SyntaxTrivia> DescendantTrivia(Func<SyntaxNode, bool>? descendIntoChildren = null, bool descendIntoTrivia = false) Parameters Type Name Description Nullable < Func < SyntaxNode , Boolean >> descendIntoChildren Boolean descendIntoTrivia Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source FindNode(TextSpan, Boolean, Boolean) Finds the node with the smallest FullSpan that contains span . getInnermostNodeForTie is used to determine the behavior in case of a tie (i.e. a node having the same span as its parent). If getInnermostNodeForTie is true, then it returns lowest descending node encompassing the given span . Otherwise, it returns the outermost node encompassing the given span . Declaration public SyntaxNode FindNode(TextSpan span, bool findInsideTrivia = false, bool getInnermostNodeForTie = false) Parameters Type Name Description TextSpan span Boolean findInsideTrivia Boolean getInnermostNodeForTie Returns Type Description SyntaxNode | Improve this Doc View Source FindToken(Int32, Boolean) Finds a descendant token of this node whose span includes the supplied position. Declaration public SyntaxToken FindToken(int position, bool findInsideTrivia = false) Parameters Type Name Description Int32 position The character position of the token relative to the beginning of the file. Boolean findInsideTrivia True to return tokens that are part of trivia. If false finds the token whose full span (including trivia) includes the position. Returns Type Description SyntaxToken | Improve this Doc View Source FindTrivia(Int32, Boolean) Finds a descendant trivia of this node whose span includes the supplied position. Declaration public SyntaxTrivia FindTrivia(int position, bool findInsideTrivia = false) Parameters Type Name Description Int32 position The character position of the trivia relative to the beginning of the file. Boolean findInsideTrivia True to return tokens that are part of trivia. If false finds the token whose full span (including trivia) includes the position. Returns Type Description SyntaxTrivia | Improve this Doc View Source FindTrivia(Int32, Nullable<Func<SyntaxTrivia, Boolean>>) Finds a descendant trivia of this node at the specified position, where the position is within the span of the node. Declaration public SyntaxTrivia FindTrivia(int position, Func<SyntaxTrivia, bool>? stepInto) Parameters Type Name Description Int32 position The character position of the trivia relative to the beginning of the file. Nullable < Func < SyntaxTrivia , Boolean >> stepInto Specifies a function that determines per trivia node, whether to descend into structured trivia of that node. Returns Type Description SyntaxTrivia | Improve this Doc View Source FirstAncestorOrSelf<TNode>(Nullable<Func<TNode, Boolean>>, Boolean) Gets the first node of type TNode that matches the predicate. Declaration public TNode FirstAncestorOrSelf<TNode>(Func<TNode, bool>? predicate = null, bool ascendOutOfTrivia = true) where TNode : SyntaxNode Parameters Type Name Description Nullable < Func <TNode, Boolean >> predicate Boolean ascendOutOfTrivia Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, Boolean>, TArg, Boolean) Gets the first node of type TNode that matches the predicate. Declaration public TNode FirstAncestorOrSelf<TNode, TArg>(Func<TNode, TArg, bool> predicate, TArg argument, bool ascendOutOfTrivia = true) where TNode : SyntaxNode Parameters Type Name Description Func <TNode, TArg, Boolean > predicate TArg argument Boolean ascendOutOfTrivia Returns Type Description TNode Type Parameters Name Description TNode TArg | Improve this Doc View Source GetAnnotatedNodes(SyntaxAnnotation) Gets all nodes with the specified annotation. Declaration public IEnumerable<SyntaxNode> GetAnnotatedNodes(SyntaxAnnotation syntaxAnnotation) Parameters Type Name Description SyntaxAnnotation syntaxAnnotation Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source GetAnnotatedNodes(String) Gets all nodes with the specified annotation kind. Declaration public IEnumerable<SyntaxNode> GetAnnotatedNodes(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxNode > | Improve this Doc View Source GetAnnotatedNodesAndTokens(SyntaxAnnotation) Gets all nodes and tokens with the specified annotation. Declaration public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source GetAnnotatedNodesAndTokens(String) Gets all nodes and tokens with an annotation of the specified annotation kind. Declaration public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source GetAnnotatedNodesAndTokens(String[]) Gets all nodes and tokens with an annotation of the specified annotation kinds. Declaration public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description IEnumerable < SyntaxNodeOrToken > | Improve this Doc View Source GetAnnotatedTokens(SyntaxAnnotation) Gets all tokens with the specified annotation. Declaration public IEnumerable<SyntaxToken> GetAnnotatedTokens(SyntaxAnnotation syntaxAnnotation) Parameters Type Name Description SyntaxAnnotation syntaxAnnotation Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source GetAnnotatedTokens(String) Gets all tokens with the specified annotation kind. Declaration public IEnumerable<SyntaxToken> GetAnnotatedTokens(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxToken > | Improve this Doc View Source GetAnnotatedTrivia(SyntaxAnnotation) Gets all trivia with the specified annotation. Declaration public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source GetAnnotatedTrivia(String) Gets all trivia with an annotation of the specified annotation kind. Declaration public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source GetAnnotatedTrivia(String[]) Gets all trivia with an annotation of the specified annotation kinds. Declaration public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source GetAnnotations(IEnumerable<String>) Gets all the annotations with the specified annotation kinds. Declaration public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds) Parameters Type Name Description IEnumerable < String > annotationKinds Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetAnnotations(String) Gets all the annotations with the specified annotation kind. Declaration public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetDiagnostics() Gets a list of all the diagnostics in the sub tree that has this node as its root. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public IEnumerable<Diagnostic> GetDiagnostics() Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetFirstToken(Boolean, Boolean, Boolean, Boolean) Gets the first token of the tree rooted by this node. Skips zero-width tokens. Declaration public SyntaxToken GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth Boolean includeSkipped Boolean includeDirectives Boolean includeDocumentationComments Returns Type Description SyntaxToken The first token or default(SyntaxToken) if it doesn't exist. | Improve this Doc View Source GetLastToken(Boolean, Boolean, Boolean, Boolean) Gets the last token of the tree rooted by this node. Skips zero-width tokens. Declaration public SyntaxToken GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth Boolean includeSkipped Boolean includeDirectives Boolean includeDocumentationComments Returns Type Description SyntaxToken The last token or default(SyntaxToken) if it doesn't exist. | Improve this Doc View Source GetLeadingTrivia() The list of trivia that appears before this node in the source code and are attached to a token that is a descendant of this node. Declaration public SyntaxTriviaList GetLeadingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source GetLocation() Returns the Location for this node. Declaration public Location GetLocation() Returns Type Description Location | Improve this Doc View Source GetReference() Gets a SyntaxReference for this syntax node. CommonSyntaxReferences can be used to regain access to a syntax node without keeping the entire tree and source text in memory. Declaration public SyntaxReference GetReference() Returns Type Description SyntaxReference | Improve this Doc View Source GetText(Encoding, SourceHashAlgorithm) Gets the full text of this node as a new SourceText instance. Declaration public SourceText GetText(Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1) Parameters Type Name Description Encoding encoding Encoding of the file that the text was read from or is going to be saved to. null if the encoding is unspecified. If the encoding is not specified the SourceText isn't debuggable. If an encoding-less SourceText is written to a file a UTF8 shall be used as a default. SourceHashAlgorithm checksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Returns Type Description SourceText | Improve this Doc View Source GetTrailingTrivia() The list of trivia that appears after this node in the source code and are attached to a token that is a descendant of this node. Declaration public SyntaxTriviaList GetTrailingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source HasAnnotation(SyntaxAnnotation) Determines whether this node has the specific annotation. Declaration public bool HasAnnotation(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(IEnumerable<String>) Determines whether this node has any annotations with any of the specific annotation kinds. Declaration public bool HasAnnotations(IEnumerable<string> annotationKinds) Parameters Type Name Description IEnumerable < String > annotationKinds Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String) Determines whether this node has any annotations with the specific annotation kind. Declaration public bool HasAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description Boolean | Improve this Doc View Source IsEquivalentTo(SyntaxNode) Determine whether this node is structurally equivalent to another. Declaration public bool IsEquivalentTo(SyntaxNode other) Parameters Type Name Description SyntaxNode other Returns Type Description Boolean | Improve this Doc View Source IsEquivalentTo(SyntaxNode, Boolean) Determines if two nodes are the same, disregarding trivia differences. Declaration public bool IsEquivalentTo(SyntaxNode node, bool topLevel = false) Parameters Type Name Description SyntaxNode node The node to compare against. Boolean topLevel If true then the nodes are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean | Improve this Doc View Source IsIncrementallyIdenticalTo(SyntaxNode) Returns true if these two nodes are considered \"incrementally identical\". An incrementally identical node occurs when a SyntaxTree is incrementally parsed using WithChangedText(SourceText) and the incremental parser is able to take the node from the original tree and use it in its entirety in the new tree. In this case, the ToFullString() of each node will be the same, though they could have different parents, and may occur at different positions in their respective trees. If two nodes are incrementally identical, all children of each node will be incrementally identical as well. Declaration public bool IsIncrementallyIdenticalTo(SyntaxNode other) Parameters Type Name Description SyntaxNode other Returns Type Description Boolean Remarks Incrementally identical nodes can also appear within the same syntax tree, or syntax trees that did not arise from WithChangedText(SourceText) . This can happen as the parser is allowed to construct parse trees from shared nodes for efficiency. In all these cases though, it will still remain true that the incrementally identical nodes could have different parents and may occur at different positions in their respective trees. | Improve this Doc View Source IsPartOfStructuredTrivia() Determines whether this node is a descendant of a structured trivia. Declaration public bool IsPartOfStructuredTrivia() Returns Type Description Boolean | Improve this Doc View Source SerializeTo(Stream, CancellationToken) Serializes the node to the given stream . Leaves the stream open for further writes. Declaration public virtual void SerializeTo(Stream stream, CancellationToken cancellationToken = null) Parameters Type Name Description Stream stream CancellationToken cancellationToken | Improve this Doc View Source ToFullString() Returns full string representation of this node including its leading and trailing trivia. Declaration public virtual string ToFullString() Returns Type Description String The full string representation of this node including its leading and trailing trivia. Remarks The length of the returned string is always the same as FullSpan.Length | Improve this Doc View Source ToString() Returns the string representation of this node, not including its leading and trailing trivia. Declaration public override string ToString() Returns Type Description String The string representation of this node, not including its leading and trailing trivia. Overrides Object.ToString() Remarks The length of the returned string is always the same as Span.Length | Improve this Doc View Source WriteTo(TextWriter) Writes the full text of this node to the specified . Declaration public virtual void WriteTo(TextWriter writer) Parameters Type Name Description TextWriter writer Extension Methods AnnotationExtensions.WithAdditionalAnnotations<TNode>(TNode, SyntaxAnnotation[]) AnnotationExtensions.WithAdditionalAnnotations<TNode>(TNode, IEnumerable<SyntaxAnnotation>) AnnotationExtensions.WithoutAnnotations<TNode>(TNode, SyntaxAnnotation[]) AnnotationExtensions.WithoutAnnotations<TNode>(TNode, IEnumerable<SyntaxAnnotation>) AnnotationExtensions.WithoutAnnotations<TNode>(TNode, String) SyntaxNodeExtensions.ReplaceSyntax<TRoot>(TRoot, IEnumerable<SyntaxNode>, Func<SyntaxNode, SyntaxNode, SyntaxNode>, IEnumerable<SyntaxToken>, Func<SyntaxToken, SyntaxToken, SyntaxToken>, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) SyntaxNodeExtensions.ReplaceNodes<TRoot, TNode>(TRoot, IEnumerable<TNode>, Func<TNode, TNode, SyntaxNode>) SyntaxNodeExtensions.ReplaceNode<TRoot>(TRoot, SyntaxNode, SyntaxNode) SyntaxNodeExtensions.ReplaceNode<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) SyntaxNodeExtensions.InsertNodesBefore<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) SyntaxNodeExtensions.InsertNodesAfter<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) SyntaxNodeExtensions.ReplaceToken<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) SyntaxNodeExtensions.InsertTokensBefore<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) SyntaxNodeExtensions.InsertTokensAfter<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) SyntaxNodeExtensions.ReplaceTrivia<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) SyntaxNodeExtensions.InsertTriviaBefore<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) SyntaxNodeExtensions.InsertTriviaAfter<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) SyntaxNodeExtensions.ReplaceTokens<TRoot>(TRoot, IEnumerable<SyntaxToken>, Func<SyntaxToken, SyntaxToken, SyntaxToken>) SyntaxNodeExtensions.ReplaceToken<TRoot>(TRoot, SyntaxToken, SyntaxToken) SyntaxNodeExtensions.ReplaceTrivia<TRoot>(TRoot, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) SyntaxNodeExtensions.ReplaceTrivia<TRoot>(TRoot, SyntaxTrivia, SyntaxTrivia) SyntaxNodeExtensions.RemoveNode<TRoot>(TRoot, SyntaxNode, SyntaxRemoveOptions) SyntaxNodeExtensions.RemoveNodes<TRoot>(TRoot, IEnumerable<SyntaxNode>, SyntaxRemoveOptions) SyntaxNodeExtensions.NormalizeWhitespace<TNode>(TNode, String, Boolean) SyntaxNodeExtensions.NormalizeWhitespace<TNode>(TNode, String, String, Boolean) SyntaxNodeExtensions.WithTriviaFrom<TSyntax>(TSyntax, SyntaxNode) SyntaxNodeExtensions.WithoutTrivia<TSyntax>(TSyntax) SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(TSyntax, SyntaxTriviaList) SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(TSyntax, Nullable<IEnumerable<SyntaxTrivia>>) SyntaxNodeExtensions.WithoutLeadingTrivia<TSyntax>(TSyntax) SyntaxNodeExtensions.WithLeadingTrivia<TSyntax>(TSyntax, SyntaxTrivia[]) SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(TSyntax, SyntaxTriviaList) SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(TSyntax, Nullable<IEnumerable<SyntaxTrivia>>) SyntaxNodeExtensions.WithoutTrailingTrivia<TSyntax>(TSyntax) SyntaxNodeExtensions.WithTrailingTrivia<TSyntax>(TSyntax, SyntaxTrivia[]) SyntaxNodeExtensions.TrackNodes<TRoot>(TRoot, IEnumerable<SyntaxNode>) SyntaxNodeExtensions.TrackNodes<TRoot>(TRoot, SyntaxNode[]) SyntaxNodeExtensions.GetCurrentNodes<TNode>(SyntaxNode, TNode) SyntaxNodeExtensions.GetCurrentNode<TNode>(SyntaxNode, TNode) SyntaxNodeExtensions.GetCurrentNodes<TNode>(SyntaxNode, IEnumerable<TNode>) LuaExtensions.IsKind(SyntaxNode, SyntaxKind) LuaExtensions.Kind(SyntaxNode) LuaExtensions.ConstantFold(SyntaxNode, ConstantFoldingOptions)"
  },
  "api/Loretta.CodeAnalysis.SyntaxNodeExtensions.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxNodeExtensions.html",
    "title": "Class SyntaxNodeExtensions | Loretta",
    "keywords": "Class SyntaxNodeExtensions Extension methods for SyntaxNode . Inheritance Object SyntaxNodeExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public static class SyntaxNodeExtensions Methods | Improve this Doc View Source GetCurrentNode<TNode>(SyntaxNode, TNode) Gets the node within the subtree corresponding to the original tracked node. Use TrackNodes to start tracking nodes. Declaration public static TNode GetCurrentNode<TNode>(this SyntaxNode root, TNode node) where TNode : SyntaxNode Parameters Type Name Description SyntaxNode root The root of the subtree containing the current node corresponding to the original tracked node. TNode node The node instance originally tracked. Returns Type Description TNode Type Parameters Name Description TNode | Improve this Doc View Source GetCurrentNodes<TNode>(SyntaxNode, TNode) Gets the nodes within the subtree corresponding to the original tracked node. Use TrackNodes to start tracking nodes. Declaration public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, TNode node) where TNode : SyntaxNode Parameters Type Name Description SyntaxNode root The root of the subtree containing the current node corresponding to the original tracked node. TNode node The node instance originally tracked. Returns Type Description IEnumerable <TNode> Type Parameters Name Description TNode | Improve this Doc View Source GetCurrentNodes<TNode>(SyntaxNode, IEnumerable<TNode>) Gets the nodes within the subtree corresponding to the original tracked nodes. Use TrackNodes to start tracking nodes. Declaration public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, IEnumerable<TNode> nodes) where TNode : SyntaxNode Parameters Type Name Description SyntaxNode root The root of the subtree containing the current nodes corresponding to the original tracked nodes. IEnumerable <TNode> nodes One or more node instances originally tracked. Returns Type Description IEnumerable <TNode> Type Parameters Name Description TNode | Improve this Doc View Source InsertNodesAfter<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) Creates a new tree of nodes with new nodes inserted after the specified node. Declaration public static TRoot InsertNodesAfter<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxNode nodeInList The node to insert after; a descendant of the root node an element of a list member. IEnumerable < SyntaxNode > newNodes A sequence of nodes to insert into the tree immediately after the specified node. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source InsertNodesBefore<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) Creates a new tree of nodes with new nodes inserted before the specified node. Declaration public static TRoot InsertNodesBefore<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxNode nodeInList The node to insert before; a descendant of the root node an element of a list member. IEnumerable < SyntaxNode > newNodes A sequence of nodes to insert into the tree immediately before the specified node. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source InsertTokensAfter<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) Creates a new tree of nodes with new tokens inserted after the specified token. Declaration public static TRoot InsertTokensAfter<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxToken tokenInList The token to insert after; a descendant of the root node and an element of a list member. IEnumerable < SyntaxToken > newTokens A sequence of tokens to insert into the tree immediately after the specified token. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source InsertTokensBefore<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) Creates a new tree of nodes with new tokens inserted before the specified token. Declaration public static TRoot InsertTokensBefore<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxToken tokenInList The token to insert before; a descendant of the root node and an element of a list member. IEnumerable < SyntaxToken > newTokens A sequence of tokens to insert into the tree immediately before the specified token. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source InsertTriviaAfter<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) Creates a new tree of nodes with new trivia inserted after the specified trivia. Declaration public static TRoot InsertTriviaAfter<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxTrivia trivia The trivia to insert after; a descendant of the root node. IEnumerable < SyntaxTrivia > newTrivia A sequence of trivia to insert into the tree immediately after the specified trivia. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source InsertTriviaBefore<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) Creates a new tree of nodes with new trivia inserted before the specified trivia. Declaration public static TRoot InsertTriviaBefore<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxTrivia trivia The trivia to insert before; a descendant of the root node. IEnumerable < SyntaxTrivia > newTrivia A sequence of trivia to insert into the tree immediately before the specified trivia. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source NormalizeWhitespace<TNode>(TNode, String, Boolean) Creates a new syntax node with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static TNode NormalizeWhitespace<TNode>(this TNode node, string indentation, bool elasticTrivia) where TNode : SyntaxNode Parameters Type Name Description TNode node The node to format. String indentation A sequence of whitespace characters that defines a single level of indentation. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description TNode Type Parameters Name Description TNode The type of the node. | Improve this Doc View Source NormalizeWhitespace<TNode>(TNode, String, String, Boolean) Creates a new syntax node with all whitespace and end of line trivia replaced with regularly formatted trivia. Declaration public static TNode NormalizeWhitespace<TNode>(this TNode node, string indentation = \" \", string eol = \"\\r\\n\", bool elasticTrivia = false) where TNode : SyntaxNode Parameters Type Name Description TNode node The node to format. String indentation An optional sequence of whitespace characters that defines a single level of indentation. String eol An optional sequence of whitespace characters used for end of line. Boolean elasticTrivia If true the replaced trivia is elastic trivia. Returns Type Description TNode Type Parameters Name Description TNode The type of the node. | Improve this Doc View Source RemoveNode<TRoot>(TRoot, SyntaxNode, SyntaxRemoveOptions) Creates a new tree of nodes with the specified node removed. Declaration public static TRoot RemoveNode<TRoot>(this TRoot root, SyntaxNode node, SyntaxRemoveOptions options) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node from which to remove a descendant node from. SyntaxNode node The node to remove. SyntaxRemoveOptions options Options that determine how the node's trivia is treated. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source RemoveNodes<TRoot>(TRoot, IEnumerable<SyntaxNode>, SyntaxRemoveOptions) Creates a new tree of nodes with the specified nodes removed. Declaration public static TRoot RemoveNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, SyntaxRemoveOptions options) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node from which to remove a descendant node from. IEnumerable < SyntaxNode > nodes The nodes to remove. SyntaxRemoveOptions options Options that determine how the nodes' trivia is treated. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceNode<TRoot>(TRoot, SyntaxNode, IEnumerable<SyntaxNode>) Creates a new tree of nodes with specified old node replaced with a new nodes. Declaration public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, IEnumerable<SyntaxNode> newNodes) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxNode oldNode The node to be replaced; a descendant of the root node and an element of a list member. IEnumerable < SyntaxNode > newNodes A sequence of nodes to use in the tree in place of the old node. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceNode<TRoot>(TRoot, SyntaxNode, SyntaxNode) Creates a new tree of nodes with the specified old node replaced with a new node. Declaration public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, SyntaxNode newNode) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. SyntaxNode oldNode The node to be replaced; a descendant of the root node. SyntaxNode newNode The new node to use in the new tree in place of the old node. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceNodes<TRoot, TNode>(TRoot, IEnumerable<TNode>, Func<TNode, TNode, SyntaxNode>) Creates a new tree of nodes with the specified old node replaced with a new node. Declaration public static TRoot ReplaceNodes<TRoot, TNode>(this TRoot root, IEnumerable<TNode> nodes, Func<TNode, TNode, SyntaxNode> computeReplacementNode) where TRoot : SyntaxNode where TNode : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. IEnumerable <TNode> nodes The nodes to be replaced; descendants of the root node. Func <TNode, TNode, SyntaxNode > computeReplacementNode A function that computes a replacement node for the argument nodes. The first argument is the original node. The second argument is the same node potentially rewritten with replaced descendants. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. TNode The type of the nodes being replaced. | Improve this Doc View Source ReplaceSyntax<TRoot>(TRoot, IEnumerable<SyntaxNode>, Func<SyntaxNode, SyntaxNode, SyntaxNode>, IEnumerable<SyntaxToken>, Func<SyntaxToken, SyntaxToken, SyntaxToken>, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) Creates a new tree of nodes with the specified nodes, tokens and trivia replaced. Declaration public static TRoot ReplaceSyntax<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, Func<SyntaxNode, SyntaxNode, SyntaxNode> computeReplacementNode, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. IEnumerable < SyntaxNode > nodes The nodes to be replaced. Func < SyntaxNode , SyntaxNode , SyntaxNode > computeReplacementNode A function that computes a replacement node for the argument nodes. The first argument is the original node. The second argument is the same node potentially rewritten with replaced descendants. IEnumerable < SyntaxToken > tokens The tokens to be replaced. Func < SyntaxToken , SyntaxToken , SyntaxToken > computeReplacementToken A function that computes a replacement token for the argument tokens. The first argument is the original token. The second argument is the same token potentially rewritten with replaced trivia. IEnumerable < SyntaxTrivia > trivia The trivia to be replaced. Func < SyntaxTrivia , SyntaxTrivia , SyntaxTrivia > computeReplacementTrivia A function that computes replacement trivia for the specified arguments. The first argument is the original trivia. The second argument is the same trivia with potentially rewritten sub structure. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceToken<TRoot>(TRoot, SyntaxToken, IEnumerable<SyntaxToken>) Creates a new tree of nodes with the specified old token replaced with new tokens. Declaration public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxToken tokenInList The token to be replaced; a descendant of the root node and an element of a list member. IEnumerable < SyntaxToken > newTokens A sequence of tokens to use in the tree in place of the specified token. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceToken<TRoot>(TRoot, SyntaxToken, SyntaxToken) Creates a new tree of nodes with the specified old token replaced with a new token. Declaration public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken oldToken, SyntaxToken newToken) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. SyntaxToken oldToken The token to be replaced. SyntaxToken newToken The new token to use in the new tree in place of the old token. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceTokens<TRoot>(TRoot, IEnumerable<SyntaxToken>, Func<SyntaxToken, SyntaxToken, SyntaxToken>) Creates a new tree of nodes with the specified old node replaced with a new node. Declaration public static TRoot ReplaceTokens<TRoot>(this TRoot root, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. IEnumerable < SyntaxToken > tokens The token to be replaced; descendants of the root node. Func < SyntaxToken , SyntaxToken , SyntaxToken > computeReplacementToken A function that computes a replacement token for the argument tokens. The first argument is the original token. The second argument is the same token potentially rewritten with replaced trivia. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceTrivia<TRoot>(TRoot, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) Creates a new tree of nodes with the specified trivia replaced with new trivia. Declaration public static TRoot ReplaceTrivia<TRoot>(this TRoot root, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. IEnumerable < SyntaxTrivia > trivia The trivia to be replaced; descendants of the root node. Func < SyntaxTrivia , SyntaxTrivia , SyntaxTrivia > computeReplacementTrivia A function that computes replacement trivia for the specified arguments. The first argument is the original trivia. The second argument is the same trivia with potentially rewritten sub structure. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceTrivia<TRoot>(TRoot, SyntaxTrivia, IEnumerable<SyntaxTrivia>) Creates a new tree of nodes with the specified old trivia replaced with new trivia. Declaration public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia oldTrivia, IEnumerable<SyntaxTrivia> newTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the tree of nodes. SyntaxTrivia oldTrivia The trivia to be replaced; a descendant of the root node. IEnumerable < SyntaxTrivia > newTrivia A sequence of trivia to use in the tree in place of the specified trivia. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source ReplaceTrivia<TRoot>(TRoot, SyntaxTrivia, SyntaxTrivia) Creates a new tree of nodes with the specified trivia replaced with new trivia. Declaration public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia trivia, SyntaxTrivia newTrivia) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root node of the tree of nodes. SyntaxTrivia trivia The trivia to be replaced. SyntaxTrivia newTrivia The new trivia to use in the new tree in place of the old trivia. Returns Type Description TRoot Type Parameters Name Description TRoot The type of the root node. | Improve this Doc View Source TrackNodes<TRoot>(TRoot, IEnumerable<SyntaxNode>) Creates a new tree of nodes with the specified nodes being tracked. Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it, to get the current node corresponding to the original tracked node. Declaration public static TRoot TrackNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the subtree containing the nodes to be tracked. IEnumerable < SyntaxNode > nodes One or more nodes that are descendants of the root node. Returns Type Description TRoot Type Parameters Name Description TRoot | Improve this Doc View Source TrackNodes<TRoot>(TRoot, SyntaxNode[]) Creates a new tree of nodes with the specified nodes being tracked. Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it, to get the current node corresponding to the original tracked node. Declaration public static TRoot TrackNodes<TRoot>(this TRoot root, params SyntaxNode[] nodes) where TRoot : SyntaxNode Parameters Type Name Description TRoot root The root of the subtree containing the nodes to be tracked. SyntaxNode [] nodes One or more nodes that are descendants of the root node. Returns Type Description TRoot Type Parameters Name Description TRoot | Improve this Doc View Source WithLeadingTrivia<TSyntax>(TSyntax, SyntaxTrivia[]) Creates a new node from this node with the leading trivia replaced. Declaration public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node SyntaxTrivia [] trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithLeadingTrivia<TSyntax>(TSyntax, SyntaxTriviaList) Creates a new node from this node with the leading trivia replaced. Declaration public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node SyntaxTriviaList trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithLeadingTrivia<TSyntax>(TSyntax, Nullable<IEnumerable<SyntaxTrivia>>) Creates a new node from this node with the leading trivia replaced. Declaration public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia>? trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node Nullable < IEnumerable < SyntaxTrivia >> trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithoutLeadingTrivia<TSyntax>(TSyntax) Creates a new node from this node with the leading trivia removed. Declaration public static TSyntax WithoutLeadingTrivia<TSyntax>(this TSyntax node) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithoutTrailingTrivia<TSyntax>(TSyntax) Creates a new node from this node with the trailing trivia removed. Declaration public static TSyntax WithoutTrailingTrivia<TSyntax>(this TSyntax node) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithoutTrivia(SyntaxToken) Creates a new token from this token without leading or trailing trivia. Declaration public static SyntaxToken WithoutTrivia(this SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description SyntaxToken | Improve this Doc View Source WithoutTrivia<TSyntax>(TSyntax) Creates a new node from this node without leading or trailing trivia. Declaration public static TSyntax WithoutTrivia<TSyntax>(this TSyntax syntax) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax syntax Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithTrailingTrivia<TSyntax>(TSyntax, SyntaxTrivia[]) Creates a new node from this node with the trailing trivia replaced. Declaration public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node SyntaxTrivia [] trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithTrailingTrivia<TSyntax>(TSyntax, SyntaxTriviaList) Creates a new node from this node with the trailing trivia replaced. Declaration public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node SyntaxTriviaList trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithTrailingTrivia<TSyntax>(TSyntax, Nullable<IEnumerable<SyntaxTrivia>>) Creates a new node from this node with the trailing trivia replaced. Declaration public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia>? trivia) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax node Nullable < IEnumerable < SyntaxTrivia >> trivia Returns Type Description TSyntax Type Parameters Name Description TSyntax | Improve this Doc View Source WithTriviaFrom<TSyntax>(TSyntax, SyntaxNode) Creates a new node from this node with both the leading and trailing trivia of the specified node. Declaration public static TSyntax WithTriviaFrom<TSyntax>(this TSyntax syntax, SyntaxNode node) where TSyntax : SyntaxNode Parameters Type Name Description TSyntax syntax SyntaxNode node Returns Type Description TSyntax Type Parameters Name Description TSyntax"
  },
  "api/Loretta.CodeAnalysis.SyntaxNodeOrToken.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxNodeOrToken.html",
    "title": "Struct SyntaxNodeOrToken | Loretta",
    "keywords": "Struct SyntaxNodeOrToken A wrapper for either a syntax node ( SyntaxNode ) or a syntax token ( SyntaxToken ). Implements IEquatable < SyntaxNodeOrToken > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxNodeOrToken Remarks Note that we do not store the token directly, we just store enough information to reconstruct it. This allows us to reuse nodeOrToken as a token's parent. Properties | Improve this Doc View Source ContainsAnnotations Determines whether this node or token (or any sub node, token or trivia) as annotations. Declaration public readonly bool ContainsAnnotations { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDiagnostics Determines whether the underlying node or token or any of its descendant nodes, tokens or trivia have any diagnostics on them. Declaration public readonly bool ContainsDiagnostics { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDirectives Determines whether the underlying node or token has any descendant preprocessor directives. Declaration public readonly bool ContainsDirectives { get; } Property Value Type Description Boolean | Improve this Doc View Source FullSpan The absolute span of the underlying node or token in characters, including its leading and trailing trivia. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source HasLeadingTrivia Determines whether the underlying node or token has any leading trivia. Declaration public readonly bool HasLeadingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source HasTrailingTrivia Determines whether the underlying node or token has any trailing trivia. Declaration public readonly bool HasTrailingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissing Determines whether the underlying node or token represents a language construct that was actually parsed from source code. Missing nodes and tokens are typically generated by the parser in error scenarios to represent constructs that should have been present in the source code for the source code to compile successfully but were actually missing. Declaration public readonly bool IsMissing { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNode Determines whether this SyntaxNodeOrToken is wrapping a node. Declaration public readonly bool IsNode { get; } Property Value Type Description Boolean | Improve this Doc View Source IsToken Determines whether this SyntaxNodeOrToken is wrapping a token. Declaration public readonly bool IsToken { get; } Property Value Type Description Boolean | Improve this Doc View Source Language The language name that this node or token is syntax of. Declaration public readonly string Language { get; } Property Value Type Description String | Improve this Doc View Source Parent The node that contains the underlying node or token in its Children collection. Declaration public readonly SyntaxNode Parent { get; } Property Value Type Description SyntaxNode | Improve this Doc View Source RawKind An integer representing the language specific kind of the underlying node or token. Declaration public readonly int RawKind { get; } Property Value Type Description Int32 | Improve this Doc View Source Span The absolute span of the underlying node or token in characters, not including its leading and trailing trivia. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SpanStart Same as accessing Start on Span . Declaration public readonly int SpanStart { get; } Property Value Type Description Int32 Remarks Slight performance improvement. | Improve this Doc View Source SyntaxTree SyntaxTree which contains current SyntaxNodeOrToken. Declaration public readonly SyntaxTree SyntaxTree { get; } Property Value Type Description SyntaxTree Methods | Improve this Doc View Source AsNode() Returns the underlying node if this SyntaxNodeOrToken is wrapping a node. Declaration public readonly SyntaxNode AsNode() Returns Type Description SyntaxNode The underlying node if this SyntaxNodeOrToken is wrapping a node. | Improve this Doc View Source AsToken() Returns the underlying token if this SyntaxNodeOrToken is wrapping a token. Declaration public readonly SyntaxToken AsToken() Returns Type Description SyntaxToken The underlying token if this SyntaxNodeOrToken is wrapping a token. | Improve this Doc View Source ChildNodesAndTokens() The list of child nodes and tokens of the underlying node or token. Declaration public readonly ChildSyntaxList ChildNodesAndTokens() Returns Type Description ChildSyntaxList | Improve this Doc View Source Equals(SyntaxNodeOrToken) Determines whether the supplied SyntaxNodeOrToken is equal to this SyntaxNodeOrToken . Declaration public readonly bool Equals(SyntaxNodeOrToken other) Parameters Type Name Description SyntaxNodeOrToken other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether the supplied SyntaxNodeOrToken is equal to this SyntaxNodeOrToken . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetAnnotations(IEnumerable<String>) Gets all annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds) Parameters Type Name Description IEnumerable < String > annotationKinds Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetAnnotations(String) Gets all annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetDiagnostics() Gets a list of all the diagnostics in either the sub tree that has this node as its root or associated with this token and its related trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public readonly IEnumerable<Diagnostic> GetDiagnostics() Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetFirstChildIndexSpanningPosition(SyntaxNode, Int32) Returns the index of the first child of the provided node that contains the provided position. Declaration public static int GetFirstChildIndexSpanningPosition(SyntaxNode node, int position) Parameters Type Name Description SyntaxNode node Int32 position Returns Type Description Int32 | Improve this Doc View Source GetHashCode() Serves as hash function for SyntaxNodeOrToken . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetLeadingTrivia() The list of trivia that appear before the underlying node or token in the source code and are attached to a token that is a descendant of the underlying node or token. Declaration public readonly SyntaxTriviaList GetLeadingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source GetLocation() Get the location of this node or token. Declaration public readonly Location GetLocation() Returns Type Description Location | Improve this Doc View Source GetNextSibling() Returns the sibling to the right of this node or token. Declaration public readonly SyntaxNodeOrToken GetNextSibling() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source GetPreviousSibling() Returns the sibling to the left of this node or token. Declaration public readonly SyntaxNodeOrToken GetPreviousSibling() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source GetTrailingTrivia() The list of trivia that appear after the underlying node or token in the source code and are attached to a token that is a descendant of the underlying node or token. Declaration public readonly SyntaxTriviaList GetTrailingTrivia() Returns Type Description SyntaxTriviaList | Improve this Doc View Source HasAnnotation(SyntaxAnnotation) Determines if this node or token has the specific annotation. Declaration public readonly bool HasAnnotation(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(IEnumerable<String>) Determines whether this node or token has annotations of the specified kind. Declaration public readonly bool HasAnnotations(IEnumerable<string> annotationKinds) Parameters Type Name Description IEnumerable < String > annotationKinds Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String) Determines whether this node or token has annotations of the specified kind. Declaration public readonly bool HasAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description Boolean | Improve this Doc View Source IsEquivalentTo(SyntaxNodeOrToken) Determines if the two nodes or tokens are equivalent. Declaration public readonly bool IsEquivalentTo(SyntaxNodeOrToken other) Parameters Type Name Description SyntaxNodeOrToken other Returns Type Description Boolean | Improve this Doc View Source IsIncrementallyIdenticalTo(SyntaxNodeOrToken) See IsIncrementallyIdenticalTo(SyntaxNode) and IsIncrementallyIdenticalTo(SyntaxToken) . Declaration public readonly bool IsIncrementallyIdenticalTo(SyntaxNodeOrToken other) Parameters Type Name Description SyntaxNodeOrToken other Returns Type Description Boolean | Improve this Doc View Source ToFullString() Returns the full string representation of this node or token including its leading and trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of this node or token including its leading and trailing trivia. Remarks The length of the returned string is always the same as FullSpan.Length | Improve this Doc View Source ToString() Returns the string representation of this node or token, not including its leading and trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of this node or token, not including its leading and trailing trivia. Overrides ValueType.ToString() Remarks The length of the returned string is always the same as Span.Length | Improve this Doc View Source WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation>) Creates a new node or token identical to this one with the specified annotations. Declaration public readonly SyntaxNodeOrToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithAdditionalAnnotations(SyntaxAnnotation[]) Creates a new node or token identical to this one with the specified annotations. Declaration public readonly SyntaxNodeOrToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithLeadingTrivia(IEnumerable<SyntaxTrivia>) Returns this SyntaxNode or SyntaxToken with the provided leading trivia. Declaration public readonly SyntaxNodeOrToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia) Parameters Type Name Description IEnumerable < SyntaxTrivia > trivia Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithLeadingTrivia(SyntaxTrivia[]) Returns this SyntaxNode or SyntaxToken with the provided leading trivia. Declaration public readonly SyntaxNodeOrToken WithLeadingTrivia(params SyntaxTrivia[] trivia) Parameters Type Name Description SyntaxTrivia [] trivia Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithoutAnnotations(IEnumerable<SyntaxAnnotation>) Creates a new node or token identical to this one without the specified annotations. Declaration public readonly SyntaxNodeOrToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithoutAnnotations(SyntaxAnnotation[]) Creates a new node or token identical to this one without the specified annotations. Declaration public readonly SyntaxNodeOrToken WithoutAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithoutAnnotations(String) Creates a new node or token identical to this one without annotations of the specified kind. Declaration public readonly SyntaxNodeOrToken WithoutAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithTrailingTrivia(IEnumerable<SyntaxTrivia>) Returns this SyntaxNode or SyntaxToken with the provided trailing trivia. Declaration public readonly SyntaxNodeOrToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia) Parameters Type Name Description IEnumerable < SyntaxTrivia > trivia Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WithTrailingTrivia(SyntaxTrivia[]) Returns this SyntaxNode or SyntaxToken with the provided trailing trivia. Declaration public readonly SyntaxNodeOrToken WithTrailingTrivia(params SyntaxTrivia[] trivia) Parameters Type Name Description SyntaxTrivia [] trivia Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source WriteTo(TextWriter) Writes the full text of this node or token to the specified TextWriter. Declaration public readonly void WriteTo(TextWriter writer) Parameters Type Name Description TextWriter writer Operators | Improve this Doc View Source Equality(SyntaxNodeOrToken, SyntaxNodeOrToken) Determines whether two SyntaxNodeOrToken s are equal. Declaration public static bool operator ==(SyntaxNodeOrToken left, SyntaxNodeOrToken right) Parameters Type Name Description SyntaxNodeOrToken left SyntaxNodeOrToken right Returns Type Description Boolean | Improve this Doc View Source Explicit(SyntaxNodeOrToken to SyntaxNode) Returns the underlying node wrapped by the supplied SyntaxNodeOrToken . Declaration public static explicit operator SyntaxNode(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken The input SyntaxNodeOrToken . Returns Type Description SyntaxNode The underlying node wrapped by the supplied SyntaxNodeOrToken . | Improve this Doc View Source Explicit(SyntaxNodeOrToken to SyntaxToken) Returns the underlying token wrapped by the supplied SyntaxNodeOrToken . Declaration public static explicit operator SyntaxToken(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken The input SyntaxNodeOrToken . Returns Type Description SyntaxToken The underlying token wrapped by the supplied SyntaxNodeOrToken . | Improve this Doc View Source Implicit(SyntaxNode to SyntaxNodeOrToken) Returns a new SyntaxNodeOrToken that wraps the supplied node. Declaration public static implicit operator SyntaxNodeOrToken(SyntaxNode node) Parameters Type Name Description SyntaxNode node The input node. Returns Type Description SyntaxNodeOrToken A SyntaxNodeOrToken that wraps the supplied node. | Improve this Doc View Source Implicit(SyntaxToken to SyntaxNodeOrToken) Returns a new SyntaxNodeOrToken that wraps the supplied token. Declaration public static implicit operator SyntaxNodeOrToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token The input token. Returns Type Description SyntaxNodeOrToken A SyntaxNodeOrToken that wraps the supplied token. | Improve this Doc View Source Inequality(SyntaxNodeOrToken, SyntaxNodeOrToken) Determines whether two SyntaxNodeOrToken s are unequal. Declaration public static bool operator !=(SyntaxNodeOrToken left, SyntaxNodeOrToken right) Parameters Type Name Description SyntaxNodeOrToken left SyntaxNodeOrToken right Returns Type Description Boolean Implements IEquatable<> Extension Methods LuaExtensions.IsKind(SyntaxNodeOrToken, SyntaxKind) LuaExtensions.Kind(SyntaxNodeOrToken)"
  },
  "api/Loretta.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator.html",
    "title": "Struct SyntaxNodeOrTokenList.Enumerator | Loretta",
    "keywords": "Struct SyntaxNodeOrTokenList.Enumerator Enumerator for lists of SyntaxNodeOrToken structs. Implements System.Collections.IEnumerator < SyntaxNodeOrToken > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly SyntaxNodeOrToken Current { get; } Property Value Type Description SyntaxNodeOrToken Methods | Improve this Doc View Source Equals(Object) Not supported. Do not use. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not use. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Operators | Improve this Doc View Source Equality(SyntaxNodeOrTokenList.Enumerator, SyntaxNodeOrTokenList.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(SyntaxNodeOrTokenList.Enumerator left, SyntaxNodeOrTokenList.Enumerator right) Parameters Type Name Description SyntaxNodeOrTokenList.Enumerator left SyntaxNodeOrTokenList.Enumerator right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxNodeOrTokenList.Enumerator, SyntaxNodeOrTokenList.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(SyntaxNodeOrTokenList.Enumerator left, SyntaxNodeOrTokenList.Enumerator right) Parameters Type Name Description SyntaxNodeOrTokenList.Enumerator left SyntaxNodeOrTokenList.Enumerator right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object | Improve this Doc View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements System.Collections.IEnumerator<>"
  },
  "api/Loretta.CodeAnalysis.SyntaxNodeOrTokenList.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxNodeOrTokenList.html",
    "title": "Struct SyntaxNodeOrTokenList | Loretta",
    "keywords": "Struct SyntaxNodeOrTokenList A list of SyntaxNodeOrToken structures. Implements IEquatable < SyntaxNodeOrTokenList > IReadOnlyCollection < SyntaxNodeOrToken > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxNodeOrTokenList Constructors | Improve this Doc View Source SyntaxNodeOrTokenList(SyntaxNodeOrToken[]) Create a SyntaxNodeOrTokenList from one or more SyntaxNodeOrToken . Declaration public SyntaxNodeOrTokenList(params SyntaxNodeOrToken[] nodesAndTokens) Parameters Type Name Description SyntaxNodeOrToken [] nodesAndTokens The nodes and tokens | Improve this Doc View Source SyntaxNodeOrTokenList(IEnumerable<SyntaxNodeOrToken>) Create a SyntaxNodeOrTokenList from a sequence of SyntaxNodeOrToken . Declaration public SyntaxNodeOrTokenList(IEnumerable<SyntaxNodeOrToken> nodesAndTokens) Parameters Type Name Description System.Collections.IEnumerable < SyntaxNodeOrToken > nodesAndTokens The sequence of nodes and tokens Properties | Improve this Doc View Source Count Gets the count of nodes in this list Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source FullSpan The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source Item[Int32] Gets the SyntaxNodeOrToken at the specified index. Declaration public readonly SyntaxNodeOrToken this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description SyntaxNodeOrToken | Improve this Doc View Source Span The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Add(SyntaxNodeOrToken) Creates a new SyntaxNodeOrTokenList with the specified node or token added to the end. Declaration public readonly SyntaxNodeOrTokenList Add(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken The node or token to add. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source AddRange(IEnumerable<SyntaxNodeOrToken>) Creates a new SyntaxNodeOrTokenList with the specified nodes or tokens added to the end. Declaration public readonly SyntaxNodeOrTokenList AddRange(IEnumerable<SyntaxNodeOrToken> nodesOrTokens) Parameters Type Name Description System.Collections.IEnumerable < SyntaxNodeOrToken > nodesOrTokens The nodes or tokens to add. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source Any() Indicates whether there is any element in the list. Declaration public readonly bool Any() Returns Type Description Boolean true if there are any elements in the list, else false . | Improve this Doc View Source Equals(SyntaxNodeOrTokenList) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(SyntaxNodeOrTokenList other) Parameters Type Name Description SyntaxNodeOrTokenList other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to this instance. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with this instance. Returns Type Description Boolean true if the specified Object is equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source First() Gets the first SyntaxNodeOrToken structure from this list. Declaration public readonly SyntaxNodeOrToken First() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source FirstOrDefault() Gets the first SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken). Declaration public readonly SyntaxNodeOrToken FirstOrDefault() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source GetEnumerator() Gets the enumerator. Declaration public readonly SyntaxNodeOrTokenList.Enumerator GetEnumerator() Returns Type Description SyntaxNodeOrTokenList.Enumerator | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() | Improve this Doc View Source IndexOf(SyntaxNodeOrToken) Returns the index from the list for the given SyntaxNodeOrToken . Declaration public readonly int IndexOf(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken The node or token to search for in the list. Returns Type Description Int32 The index of the found nodeOrToken, or -1 if it wasn't found | Improve this Doc View Source Insert(Int32, SyntaxNodeOrToken) Creates a new SyntaxNodeOrTokenList with the specified node or token inserted at the index. Declaration public readonly SyntaxNodeOrTokenList Insert(int index, SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description Int32 index The index to insert at. SyntaxNodeOrToken nodeOrToken The node or token to insert. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source InsertRange(Int32, IEnumerable<SyntaxNodeOrToken>) Creates a new SyntaxNodeOrTokenList with the specified nodes or tokens inserted at the index. Declaration public readonly SyntaxNodeOrTokenList InsertRange(int index, IEnumerable<SyntaxNodeOrToken> nodesAndTokens) Parameters Type Name Description Int32 index The index to insert at. System.Collections.IEnumerable < SyntaxNodeOrToken > nodesAndTokens The nodes or tokens to insert. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source Last() Gets the last SyntaxNodeOrToken structure from this list. Declaration public readonly SyntaxNodeOrToken Last() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source LastOrDefault() Gets the last SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken). Declaration public readonly SyntaxNodeOrToken LastOrDefault() Returns Type Description SyntaxNodeOrToken | Improve this Doc View Source Remove(SyntaxNodeOrToken) Creates a new SyntaxNodeOrTokenList with the specified element removed. Declaration public readonly SyntaxNodeOrTokenList Remove(SyntaxNodeOrToken nodeOrTokenInList) Parameters Type Name Description SyntaxNodeOrToken nodeOrTokenInList The element to remove. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source RemoveAt(Int32) Creates a new SyntaxNodeOrTokenList with the element at the specified index removed. Declaration public readonly SyntaxNodeOrTokenList RemoveAt(int index) Parameters Type Name Description Int32 index The index of the element to remove. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source Replace(SyntaxNodeOrToken, SyntaxNodeOrToken) Creates a new SyntaxNodeOrTokenList with the specified element replaced with a new node or token. Declaration public readonly SyntaxNodeOrTokenList Replace(SyntaxNodeOrToken nodeOrTokenInList, SyntaxNodeOrToken newNodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrTokenInList The element to replace. SyntaxNodeOrToken newNodeOrToken The new node or token. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source ReplaceRange(SyntaxNodeOrToken, IEnumerable<SyntaxNodeOrToken>) Creates a new SyntaxNodeOrTokenList with the specified element replaced with a new nodes and tokens. Declaration public readonly SyntaxNodeOrTokenList ReplaceRange(SyntaxNodeOrToken nodeOrTokenInList, IEnumerable<SyntaxNodeOrToken> newNodesAndTokens) Parameters Type Name Description SyntaxNodeOrToken nodeOrTokenInList The element to replace. System.Collections.IEnumerable < SyntaxNodeOrToken > newNodesAndTokens The new nodes and tokens. Returns Type Description SyntaxNodeOrTokenList | Improve this Doc View Source ToFullString() Returns the full string representation of the nodes and tokens in this list including the first node or token's leading trivia and the last node or token's trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of the nodes and tokens in this list including the first node or token's leading trivia and the last node or token's trailing trivia. | Improve this Doc View Source ToString() Returns the string representation of the nodes and tokens in this list, not including the first node or token's leading trivia and the last node or token's trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of the nodes and tokens in this list, not including the first node or token's leading trivia and the last node or token's trailing trivia. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(SyntaxNodeOrTokenList, SyntaxNodeOrTokenList) Implements the operator ==. Declaration public static bool operator ==(SyntaxNodeOrTokenList left, SyntaxNodeOrTokenList right) Parameters Type Name Description SyntaxNodeOrTokenList left The left SyntaxNodeOrTokenList SyntaxNodeOrTokenList right The right SyntaxNodeOrTokenList Returns Type Description Boolean true if both lists equal, else false . | Improve this Doc View Source Inequality(SyntaxNodeOrTokenList, SyntaxNodeOrTokenList) Implements the operator !=. Declaration public static bool operator !=(SyntaxNodeOrTokenList left, SyntaxNodeOrTokenList right) Parameters Type Name Description SyntaxNodeOrTokenList left The left SyntaxNodeOrTokenList SyntaxNodeOrTokenList right The right SyntaxNodeOrTokenList Returns Type Description Boolean true if both lists not equal, else false . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements IEquatable<> IReadOnlyCollection<>"
  },
  "api/Loretta.CodeAnalysis.SyntaxReference.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxReference.html",
    "title": "Class SyntaxReference | Loretta",
    "keywords": "Class SyntaxReference A reference to a syntax node. Inheritance Object SyntaxReference Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SyntaxReference Properties | Improve this Doc View Source Span The span of the node referenced. Declaration public abstract TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SyntaxTree The syntax tree that this references a node within. Declaration public abstract SyntaxTree SyntaxTree { get; } Property Value Type Description SyntaxTree Methods | Improve this Doc View Source GetSyntax(CancellationToken) Retrieves the original referenced syntax node. This action may cause a parse to happen to recover the syntax node. Declaration public abstract SyntaxNode GetSyntax(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description SyntaxNode The original referenced syntax node. | Improve this Doc View Source GetSyntaxAsync(CancellationToken) Retrieves the original referenced syntax node. This action may cause a parse to happen to recover the syntax node. Declaration public virtual Task<SyntaxNode> GetSyntaxAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < SyntaxNode > The original referenced syntax node."
  },
  "api/Loretta.CodeAnalysis.SyntaxRemoveOptions.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxRemoveOptions.html",
    "title": "Enum SyntaxRemoveOptions | Loretta",
    "keywords": "Enum SyntaxRemoveOptions The option flags for the RemoveNode(s) methods. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum SyntaxRemoveOptions Fields Name Description AddElasticMarker Adds elastic marker trivia KeepDirectives All directives are kept KeepEndOfLine Ensure that at least one EndOfLine trivia is kept if one was present KeepExteriorTrivia The leading and trailing trivia associated with the node or token is kept. KeepLeadingTrivia The leading trivia associated with the node or token is kept. KeepNoTrivia None of the trivia associated with the node or token is kept. KeepTrailingTrivia The trailing trivia associated with the node or token is kept. KeepUnbalancedDirectives Any directives that would become unbalanced are kept."
  },
  "api/Loretta.CodeAnalysis.SyntaxToken.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxToken.html",
    "title": "Struct SyntaxToken | Loretta",
    "keywords": "Struct SyntaxToken Represents a token in the syntax tree. Implements IEquatable < SyntaxToken > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxToken Properties | Improve this Doc View Source ContainsAnnotations True if this token or its trivia has any annotations. Declaration public readonly bool ContainsAnnotations { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDiagnostics Determines whether this token or any of its descendant trivia have any diagnostics on them. Declaration public readonly bool ContainsDiagnostics { get; } Property Value Type Description Boolean | Improve this Doc View Source ContainsDirectives Determines whether this token has any descendant preprocessor directives. Declaration public readonly bool ContainsDirectives { get; } Property Value Type Description Boolean | Improve this Doc View Source FullSpan The absolute span of this token in characters, including its leading and trailing trivia. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source HasLeadingTrivia Determines whether this token has any leading trivia. Declaration public readonly bool HasLeadingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source HasStructuredTrivia Determines whether any of this token's trivia is structured. Declaration public readonly bool HasStructuredTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source HasTrailingTrivia Determines whether this token has any trailing trivia. Declaration public readonly bool HasTrailingTrivia { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMissing Determines whether this token represents a language construct that was actually parsed from source code. Missing tokens are typically generated by the parser in error scenarios to represent constructs that should have been present in the source code for the source code to compile successfully but were actually missing. Declaration public readonly bool IsMissing { get; } Property Value Type Description Boolean | Improve this Doc View Source Language The language name that this token is syntax of. Declaration public readonly string Language { get; } Property Value Type Description String | Improve this Doc View Source LeadingTrivia The list of trivia that appear before this token in the source code. Declaration public readonly SyntaxTriviaList LeadingTrivia { get; } Property Value Type Description SyntaxTriviaList | Improve this Doc View Source Parent The node that contains this token in its Children collection. Declaration public readonly SyntaxNode Parent { get; } Property Value Type Description SyntaxNode | Improve this Doc View Source RawKind An integer representing the language specific kind of this token. Declaration public readonly int RawKind { get; } Property Value Type Description Int32 | Improve this Doc View Source Span The absolute span of this token in characters, not including its leading and trailing trivia. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SpanStart Same as accessing Start on Span . Declaration public readonly int SpanStart { get; } Property Value Type Description Int32 Remarks Slight performance improvement. | Improve this Doc View Source SyntaxTree The SyntaxTree that contains this token. Declaration public readonly SyntaxTree SyntaxTree { get; } Property Value Type Description SyntaxTree | Improve this Doc View Source Text The token's text. Declaration public readonly string Text { get; } Property Value Type Description String | Improve this Doc View Source TrailingTrivia The list of trivia that appear after this token in the source code and are attached to this token or any of its descendants. Declaration public readonly SyntaxTriviaList TrailingTrivia { get; } Property Value Type Description SyntaxTriviaList | Improve this Doc View Source Value Returns the value of the token. For example, if the token represents an integer literal, then this property would return the actual integer. Declaration public readonly object Value { get; } Property Value Type Description Object | Improve this Doc View Source ValueText Returns the text representation of the value of the token. For example, if the token represents an integer literal, then this property would return a string representing the integer. Declaration public readonly string ValueText { get; } Property Value Type Description String Methods | Improve this Doc View Source CopyAnnotationsTo(SyntaxToken) Copies all SyntaxAnnotations, if any, from this SyntaxToken instance and attaches them to a new instance based on token . Declaration public readonly SyntaxToken CopyAnnotationsTo(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description SyntaxToken Remarks If no annotations are copied, just returns token . | Improve this Doc View Source Equals(SyntaxToken) Determines whether the supplied SyntaxToken is equal to this SyntaxToken . Declaration public readonly bool Equals(SyntaxToken other) Parameters Type Name Description SyntaxToken other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether the supplied SyntaxToken is equal to this SyntaxToken . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetAllTrivia() Gets a list of all the trivia (both leading and trailing) for this token. Declaration public readonly IEnumerable<SyntaxTrivia> GetAllTrivia() Returns Type Description IEnumerable < SyntaxTrivia > | Improve this Doc View Source GetAnnotations(IEnumerable<String>) Gets all the annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds) Parameters Type Name Description IEnumerable < String > annotationKinds Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetAnnotations(String) Gets all the annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetAnnotations(String[]) Gets all the annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetDiagnostics() Gets a list of all the diagnostics associated with this token and any related trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public readonly IEnumerable<Diagnostic> GetDiagnostics() Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetHashCode() Serves as hash function for SyntaxToken . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetLocation() Gets the location for this token. Declaration public readonly Location GetLocation() Returns Type Description Location | Improve this Doc View Source GetNextToken(Boolean, Boolean, Boolean, Boolean) Gets the token that follows this token in the syntax tree. Declaration public readonly SyntaxToken GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth Boolean includeSkipped Boolean includeDirectives Boolean includeDocumentationComments Returns Type Description SyntaxToken The token that follows this token in the syntax tree. | Improve this Doc View Source GetPreviousToken(Boolean, Boolean, Boolean, Boolean) Gets the token that precedes this token in the syntax tree. Declaration public readonly SyntaxToken GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false) Parameters Type Name Description Boolean includeZeroWidth Boolean includeSkipped Boolean includeDirectives Boolean includeDocumentationComments Returns Type Description SyntaxToken The next token that follows this token in the syntax tree. | Improve this Doc View Source HasAnnotation(SyntaxAnnotation) True if this token has the specified annotation. Declaration public readonly bool HasAnnotation(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String) True if this token has annotations of the specified annotation kind. Declaration public readonly bool HasAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String[]) True if this token has annotations of the specified annotation kinds. Declaration public readonly bool HasAnnotations(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description Boolean | Improve this Doc View Source IsEquivalentTo(SyntaxToken) Determines if this token is equivalent to the specified token. Declaration public readonly bool IsEquivalentTo(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description Boolean | Improve this Doc View Source IsIncrementallyIdenticalTo(SyntaxToken) Returns true if these two tokens are considered \"incrementally identical\". An incrementally identical token occurs when a SyntaxTree is incrementally parsed using WithChangedText(SourceText) and the incremental parser is able to take the token from the original tree and use it in its entirety in the new tree. In this case, the ToFullString() of each token will be the same, though they could have different parents, and may occur at different positions in the respective trees. If two tokens are incrementally identical, all trivial of each node will be incrementally identical as well. Declaration public readonly bool IsIncrementallyIdenticalTo(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description Boolean Remarks Incrementally identical tokens can also appear within the same syntax tree, or syntax trees that did not arise from WithChangedText(SourceText) . This can happen as the parser is allowed to construct parse trees using shared tokens for efficiency. In all these cases though, it will still remain true that the incrementally identical tokens could have different parents and may occur at different positions in their respective trees. | Improve this Doc View Source IsPartOfStructuredTrivia() Determines whether this token is a descendant of a structured trivia. Declaration public readonly bool IsPartOfStructuredTrivia() Returns Type Description Boolean | Improve this Doc View Source ToFullString() Returns the full string representation of this token including its leading and trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of this token including its leading and trailing trivia. Remarks The length of the returned string is always the same as FullSpan.Length | Improve this Doc View Source ToString() Returns the string representation of this token, not including its leading and trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of this token, not including its leading and trailing trivia. Overrides ValueType.ToString() Remarks The length of the returned string is always the same as Span.Length | Improve this Doc View Source WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation>) Adds this annotation to a given syntax token, creating a new syntax token of the same type with the annotation on it. Declaration public readonly SyntaxToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxToken | Improve this Doc View Source WithAdditionalAnnotations(SyntaxAnnotation[]) Adds this annotation to a given syntax token, creating a new syntax token of the same type with the annotation on it. Declaration public readonly SyntaxToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxToken | Improve this Doc View Source WithLeadingTrivia(SyntaxTrivia[]) Creates a new token from this token with the leading trivia specified.. Declaration public readonly SyntaxToken WithLeadingTrivia(params SyntaxTrivia[] trivia) Parameters Type Name Description SyntaxTrivia [] trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithLeadingTrivia(SyntaxTriviaList) Creates a new token from this token with the leading trivia specified. Declaration public readonly SyntaxToken WithLeadingTrivia(SyntaxTriviaList trivia) Parameters Type Name Description SyntaxTriviaList trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithLeadingTrivia(Nullable<IEnumerable<SyntaxTrivia>>) Creates a new token from this token with the leading trivia specified. Declaration public readonly SyntaxToken WithLeadingTrivia(IEnumerable<SyntaxTrivia>? trivia) Parameters Type Name Description Nullable < IEnumerable < SyntaxTrivia >> trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithoutAnnotations(IEnumerable<SyntaxAnnotation>) Creates a new syntax token identical to this one without the specified annotations. Declaration public readonly SyntaxToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxToken | Improve this Doc View Source WithoutAnnotations(SyntaxAnnotation[]) Creates a new syntax token identical to this one without the specified annotations. Declaration public readonly SyntaxToken WithoutAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxToken | Improve this Doc View Source WithoutAnnotations(String) Creates a new syntax token identical to this one without annotations of the specified kind. Declaration public readonly SyntaxToken WithoutAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description SyntaxToken | Improve this Doc View Source WithTrailingTrivia(SyntaxTrivia[]) Creates a new token from this token with the trailing trivia specified. Declaration public readonly SyntaxToken WithTrailingTrivia(params SyntaxTrivia[] trivia) Parameters Type Name Description SyntaxTrivia [] trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithTrailingTrivia(SyntaxTriviaList) Creates a new token from this token with the trailing trivia specified. Declaration public readonly SyntaxToken WithTrailingTrivia(SyntaxTriviaList trivia) Parameters Type Name Description SyntaxTriviaList trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithTrailingTrivia(Nullable<IEnumerable<SyntaxTrivia>>) Creates a new token from this token with the trailing trivia specified. Declaration public readonly SyntaxToken WithTrailingTrivia(IEnumerable<SyntaxTrivia>? trivia) Parameters Type Name Description Nullable < IEnumerable < SyntaxTrivia >> trivia Returns Type Description SyntaxToken | Improve this Doc View Source WithTriviaFrom(SyntaxToken) Creates a new token from this token with the leading and trailing trivia from the specified token. Declaration public readonly SyntaxToken WithTriviaFrom(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description SyntaxToken | Improve this Doc View Source WriteTo(TextWriter) Writes the full text of this token to the specified writer . Declaration public readonly void WriteTo(TextWriter writer) Parameters Type Name Description TextWriter writer Operators | Improve this Doc View Source Equality(SyntaxToken, SyntaxToken) Determines whether two SyntaxToken s are equal. Declaration public static bool operator ==(SyntaxToken left, SyntaxToken right) Parameters Type Name Description SyntaxToken left SyntaxToken right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxToken, SyntaxToken) Determines whether two SyntaxToken s are unequal. Declaration public static bool operator !=(SyntaxToken left, SyntaxToken right) Parameters Type Name Description SyntaxToken left SyntaxToken right Returns Type Description Boolean Implements IEquatable<> Extension Methods SyntaxNodeExtensions.WithoutTrivia(SyntaxToken) LuaExtensions.IsKind(SyntaxToken, SyntaxKind) LuaExtensions.Kind(SyntaxToken) LuaExtensions.IsKeyword(SyntaxToken) LuaExtensions.IsVerbatimStringLiteral(SyntaxToken) LuaExtensions.ReplaceTrivia(SyntaxToken, IEnumerable<SyntaxTrivia>, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia>) LuaExtensions.ReplaceTrivia(SyntaxToken, SyntaxTrivia, SyntaxTrivia) SyntaxExtensions.NormalizeWhitespace(SyntaxToken, String, Boolean) SyntaxExtensions.NormalizeWhitespace(SyntaxToken, String, String, Boolean)"
  },
  "api/Loretta.CodeAnalysis.SyntaxTokenList.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTokenList.Enumerator.html",
    "title": "Struct SyntaxTokenList.Enumerator | Loretta",
    "keywords": "Struct SyntaxTokenList.Enumerator A structure for enumerating a SyntaxTokenList Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Gets the current element in the collection. Declaration public readonly SyntaxToken Current { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Equals(Object) Not supported. Do not use. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not use. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Advances the enumerator to the next token in the collection. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Operators | Improve this Doc View Source Equality(SyntaxTokenList.Enumerator, SyntaxTokenList.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(SyntaxTokenList.Enumerator left, SyntaxTokenList.Enumerator right) Parameters Type Name Description SyntaxTokenList.Enumerator left SyntaxTokenList.Enumerator right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTokenList.Enumerator, SyntaxTokenList.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(SyntaxTokenList.Enumerator left, SyntaxTokenList.Enumerator right) Parameters Type Name Description SyntaxTokenList.Enumerator left SyntaxTokenList.Enumerator right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SyntaxTokenList.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTokenList.html",
    "title": "Struct SyntaxTokenList | Loretta",
    "keywords": "Struct SyntaxTokenList Represents a read-only list of SyntaxToken . Implements IEquatable < SyntaxTokenList > IReadOnlyList < SyntaxToken > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxTokenList Constructors | Improve this Doc View Source SyntaxTokenList(SyntaxToken) Creates a new token list with the provided token as its only element. Declaration public SyntaxTokenList(SyntaxToken token) Parameters Type Name Description SyntaxToken token | Improve this Doc View Source SyntaxTokenList(SyntaxToken[]) Creates a list of tokens. Declaration public SyntaxTokenList(params SyntaxToken[] tokens) Parameters Type Name Description SyntaxToken [] tokens An array of tokens. | Improve this Doc View Source SyntaxTokenList(IEnumerable<SyntaxToken>) Creates a list of tokens. Declaration public SyntaxTokenList(IEnumerable<SyntaxToken> tokens) Parameters Type Name Description System.Collections.IEnumerable < SyntaxToken > tokens Properties | Improve this Doc View Source Count Returns the number of tokens in the list. Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source FullSpan The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source Item[Int32] Gets the token at the specified index. Declaration public readonly SyntaxToken this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the token to get. Property Value Type Description SyntaxToken The token at the specified index. | Improve this Doc View Source Span The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Add(SyntaxToken) Creates a new SyntaxTokenList with the specified token added to the end. Declaration public readonly SyntaxTokenList Add(SyntaxToken token) Parameters Type Name Description SyntaxToken token The token to add. Returns Type Description SyntaxTokenList | Improve this Doc View Source AddRange(IEnumerable<SyntaxToken>) Creates a new SyntaxTokenList with the specified tokens added to the end. Declaration public readonly SyntaxTokenList AddRange(IEnumerable<SyntaxToken> tokens) Parameters Type Name Description System.Collections.IEnumerable < SyntaxToken > tokens The tokens to add. Returns Type Description SyntaxTokenList | Improve this Doc View Source Any() Tests whether the list is non-empty. Declaration public readonly bool Any() Returns Type Description Boolean True if the list contains any tokens. | Improve this Doc View Source Create(SyntaxToken) Create a new Token List Declaration public static SyntaxTokenList Create(SyntaxToken token) Parameters Type Name Description SyntaxToken token Element of the return Token List Returns Type Description SyntaxTokenList | Improve this Doc View Source Equals(SyntaxTokenList) Declaration public readonly bool Equals(SyntaxTokenList other) Parameters Type Name Description SyntaxTokenList other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Compares this SyntaxTokenList with the obj for equality. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean True if the two objects are equal. Overrides ValueType.Equals(Object) | Improve this Doc View Source First() Returns the first token in the list. Declaration public readonly SyntaxToken First() Returns Type Description SyntaxToken The first token in the list. | Improve this Doc View Source GetEnumerator() Returns an enumerator for the tokens in the SyntaxTokenList Declaration public readonly SyntaxTokenList.Enumerator GetEnumerator() Returns Type Description SyntaxTokenList.Enumerator | Improve this Doc View Source GetHashCode() Serves as a hash function for the SyntaxTokenList Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source IndexOf(SyntaxToken) Retuns the index of the provided token in this list. Declaration public readonly int IndexOf(SyntaxToken tokenInList) Parameters Type Name Description SyntaxToken tokenInList Returns Type Description Int32 -1 if not found. | Improve this Doc View Source Insert(Int32, SyntaxToken) Creates a new SyntaxTokenList with the specified token insert at the index. Declaration public readonly SyntaxTokenList Insert(int index, SyntaxToken token) Parameters Type Name Description Int32 index The index to insert the new token. SyntaxToken token The token to insert. Returns Type Description SyntaxTokenList | Improve this Doc View Source InsertRange(Int32, IEnumerable<SyntaxToken>) Creates a new SyntaxTokenList with the specified tokens insert at the index. Declaration public readonly SyntaxTokenList InsertRange(int index, IEnumerable<SyntaxToken> tokens) Parameters Type Name Description Int32 index The index to insert the new tokens. System.Collections.IEnumerable < SyntaxToken > tokens The tokens to insert. Returns Type Description SyntaxTokenList | Improve this Doc View Source Last() Returns the last token in the list. Declaration public readonly SyntaxToken Last() Returns Type Description SyntaxToken The last token in the list. | Improve this Doc View Source Remove(SyntaxToken) Creates a new SyntaxTokenList with the specified token removed. Declaration public readonly SyntaxTokenList Remove(SyntaxToken tokenInList) Parameters Type Name Description SyntaxToken tokenInList The token to remove. Returns Type Description SyntaxTokenList | Improve this Doc View Source RemoveAt(Int32) Creates a new SyntaxTokenList with the token at the specified index removed. Declaration public readonly SyntaxTokenList RemoveAt(int index) Parameters Type Name Description Int32 index The index of the token to remove. Returns Type Description SyntaxTokenList | Improve this Doc View Source Replace(SyntaxToken, SyntaxToken) Creates a new SyntaxTokenList with the specified token replaced with a new token. Declaration public readonly SyntaxTokenList Replace(SyntaxToken tokenInList, SyntaxToken newToken) Parameters Type Name Description SyntaxToken tokenInList The token to replace. SyntaxToken newToken The new token. Returns Type Description SyntaxTokenList | Improve this Doc View Source ReplaceRange(SyntaxToken, IEnumerable<SyntaxToken>) Creates a new SyntaxTokenList with the specified token replaced with new tokens. Declaration public readonly SyntaxTokenList ReplaceRange(SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens) Parameters Type Name Description SyntaxToken tokenInList The token to replace. System.Collections.IEnumerable < SyntaxToken > newTokens The new tokens. Returns Type Description SyntaxTokenList | Improve this Doc View Source Reverse() Returns a list which contains all elements of SyntaxTokenList in reversed order. Declaration public readonly SyntaxTokenList.Reversed Reverse() Returns Type Description SyntaxTokenList.Reversed SyntaxTokenList.Reversed which contains all elements of SyntaxTokenList in reversed order | Improve this Doc View Source ToFullString() Returns the full string representation of the tokens in this list including the first token's leading trivia and the last token's trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of the tokens in this list including the first token's leading trivia and the last token's trailing trivia. | Improve this Doc View Source ToString() Returns the string representation of the tokens in this list, not including the first token's leading trivia and the last token's trailing trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of the tokens in this list, not including the first token's leading trivia and the last token's trailing trivia. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(SyntaxTokenList, SyntaxTokenList) Compares left and right for equality. Declaration public static bool operator ==(SyntaxTokenList left, SyntaxTokenList right) Parameters Type Name Description SyntaxTokenList left SyntaxTokenList right Returns Type Description Boolean True if the two SyntaxTokenList s are equal. | Improve this Doc View Source Inequality(SyntaxTokenList, SyntaxTokenList) Compares left and right for inequality. Declaration public static bool operator !=(SyntaxTokenList left, SyntaxTokenList right) Parameters Type Name Description SyntaxTokenList left SyntaxTokenList right Returns Type Description Boolean True if the two SyntaxTokenList s are not equal. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEquatable<> IReadOnlyList<> Extension Methods LuaExtensions.IndexOf(SyntaxTokenList, SyntaxKind) LuaExtensions.Any(SyntaxTokenList, SyntaxKind) LuaExtensions.Insert(SyntaxTokenList, Int32, SyntaxToken[])"
  },
  "api/Loretta.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTokenList.Reversed.Enumerator.html",
    "title": "Struct SyntaxTokenList.Reversed.Enumerator | Loretta",
    "keywords": "Struct SyntaxTokenList.Reversed.Enumerator The enumerator for this reversed list. Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly SyntaxToken Current { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source Equals(Object) Not supported. Do not use. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not use. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Operators | Improve this Doc View Source Equality(SyntaxTokenList.Reversed.Enumerator, SyntaxTokenList.Reversed.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(SyntaxTokenList.Reversed.Enumerator left, SyntaxTokenList.Reversed.Enumerator right) Parameters Type Name Description SyntaxTokenList.Reversed.Enumerator left SyntaxTokenList.Reversed.Enumerator right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTokenList.Reversed.Enumerator, SyntaxTokenList.Reversed.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(SyntaxTokenList.Reversed.Enumerator left, SyntaxTokenList.Reversed.Enumerator right) Parameters Type Name Description SyntaxTokenList.Reversed.Enumerator left SyntaxTokenList.Reversed.Enumerator right Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SyntaxTokenList.Reversed.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTokenList.Reversed.html",
    "title": "Struct SyntaxTokenList.Reversed | Loretta",
    "keywords": "Struct SyntaxTokenList.Reversed Reversed enumerable. Implements System.Collections.IEnumerable < SyntaxToken > IEquatable < SyntaxTokenList.Reversed > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct Reversed Constructors | Improve this Doc View Source Reversed(SyntaxTokenList) Creates a new reversed token list. Declaration public Reversed(SyntaxTokenList list) Parameters Type Name Description SyntaxTokenList list Methods | Improve this Doc View Source Equals(SyntaxTokenList.Reversed) Declaration public readonly bool Equals(SyntaxTokenList.Reversed other) Parameters Type Name Description SyntaxTokenList.Reversed other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetEnumerator() Returns the enumerator for this reversed list. Declaration public readonly SyntaxTokenList.Reversed.Enumerator GetEnumerator() Returns Type Description SyntaxTokenList.Reversed.Enumerator | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(SyntaxTokenList.Reversed, SyntaxTokenList.Reversed) Checks whether two reversed lists are equal. Declaration public static bool operator ==(SyntaxTokenList.Reversed left, SyntaxTokenList.Reversed right) Parameters Type Name Description SyntaxTokenList.Reversed left SyntaxTokenList.Reversed right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTokenList.Reversed, SyntaxTokenList.Reversed) Checks whether two reversed lists are equal. Declaration public static bool operator !=(SyntaxTokenList.Reversed left, SyntaxTokenList.Reversed right) Parameters Type Name Description SyntaxTokenList.Reversed left SyntaxTokenList.Reversed right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.IEnumerable<> IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.SyntaxTree.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTree.html",
    "title": "Class SyntaxTree | Loretta",
    "keywords": "Class SyntaxTree The parsed representation of a source document. Inheritance Object SyntaxTree LuaSyntaxTree Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SyntaxTree Properties | Improve this Doc View Source Encoding The text encoding of the source document. Declaration public abstract Encoding Encoding { get; } Property Value Type Description Encoding | Improve this Doc View Source FilePath The path of the source document file. Declaration public abstract string FilePath { get; } Property Value Type Description String Remarks If this syntax tree is not associated with a file, this value can be empty. The path shall not be null. The file doesn't need to exist on disk. The path is opaque to the compiler. | Improve this Doc View Source HasCompilationUnitRoot Returns true if this syntax tree has a root with SyntaxKind \"CompilationUnit\". Declaration public abstract bool HasCompilationUnitRoot { get; } Property Value Type Description Boolean | Improve this Doc View Source Length The length of the text of the syntax tree. Declaration public abstract int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Options The options used by the parser to produce the syntax tree. Declaration public ParseOptions Options { get; } Property Value Type Description ParseOptions Methods | Improve this Doc View Source GetChangedSpans(SyntaxTree) Returns a list of the changed regions between this tree and the specified tree. The list is conservative for performance reasons. It may return larger regions than what has actually changed. Declaration public abstract IList<TextSpan> GetChangedSpans(SyntaxTree syntaxTree) Parameters Type Name Description SyntaxTree syntaxTree Returns Type Description IList < TextSpan > | Improve this Doc View Source GetChanges(SyntaxTree) Gets a list of text changes that when applied to the old tree produce this tree. Declaration public abstract IList<TextChange> GetChanges(SyntaxTree oldTree) Parameters Type Name Description SyntaxTree oldTree The old tree. Returns Type Description IList < TextChange > Remarks The list of changes may be different than the original changes that produced this tree. | Improve this Doc View Source GetDiagnostics(CancellationToken) Gets a list of all the diagnostics in the syntax tree. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public abstract IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetDiagnostics(SyntaxNode) Gets a list of all the diagnostics in the sub tree that has the specified node as its root. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetDiagnostics(SyntaxNodeOrToken) Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or associated with the token and its related trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken) Parameters Type Name Description SyntaxNodeOrToken nodeOrToken Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetDiagnostics(SyntaxToken) Gets a list of all the diagnostics associated with the token and any related trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token) Parameters Type Name Description SyntaxToken token Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetDiagnostics(SyntaxTrivia) Gets a list of all the diagnostics associated with the trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetLineSpan(TextSpan, CancellationToken) Gets the location in terms of path, line and column for a given span. Declaration public abstract FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = null) Parameters Type Name Description TextSpan span Span within the tree. CancellationToken cancellationToken Cancellation token. Returns Type Description FileLinePositionSpan A valid FileLinePositionSpan that contains path, line and column information. The values are not affected by line mapping directives ( #line ). | Improve this Doc View Source GetLocation(TextSpan) Gets a location for the specified text span. Declaration public abstract Location GetLocation(TextSpan span) Parameters Type Name Description TextSpan span Returns Type Description Location | Improve this Doc View Source GetReference(SyntaxNode) Gets a SyntaxReference for a specified syntax node. SyntaxReferences can be used to regain access to a syntax node without keeping the entire tree and source text in memory. Declaration public abstract SyntaxReference GetReference(SyntaxNode node) Parameters Type Name Description SyntaxNode node Returns Type Description SyntaxReference | Improve this Doc View Source GetRoot(CancellationToken) Gets the root node of the syntax tree, causing computation if necessary. Declaration public SyntaxNode GetRoot(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description SyntaxNode | Improve this Doc View Source GetRootAsync(CancellationToken) Gets the root node of the syntax tree asynchronously. Declaration public Task<SyntaxNode> GetRootAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < SyntaxNode > | Improve this Doc View Source GetText(CancellationToken) Gets the text of the source document. Declaration public abstract SourceText GetText(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description SourceText | Improve this Doc View Source GetTextAsync(CancellationToken) Gets the text of the source document asynchronously. Declaration public virtual Task<SourceText> GetTextAsync(CancellationToken cancellationToken = null) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < SourceText > Remarks By default, the work associated with this method will be executed immediately on the current thread. Implementations that wish to schedule this work differently should override GetTextAsync(CancellationToken) . | Improve this Doc View Source IsEquivalentTo(SyntaxTree, Boolean) Determines if two trees are the same, disregarding trivia differences. Declaration public abstract bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false) Parameters Type Name Description SyntaxTree tree The tree to compare against. Boolean topLevel If true then the trees are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent. Returns Type Description Boolean | Improve this Doc View Source ToString() Returns a String that represents the entire source text of this SyntaxTree . Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() | Improve this Doc View Source TryGetRoot(out SyntaxNode) Gets the root of the syntax tree if it is available. Declaration public bool TryGetRoot(out SyntaxNode root) Parameters Type Name Description SyntaxNode root Returns Type Description Boolean | Improve this Doc View Source TryGetText(out SourceText) Gets the syntax tree's text if it is available. Declaration public abstract bool TryGetText(out SourceText text) Parameters Type Name Description SourceText text Returns Type Description Boolean | Improve this Doc View Source WithChangedText(SourceText) Create a new syntax tree based off this tree using a new source text. If the new source text is a minor change from the current source text an incremental parse will occur reusing most of the current syntax tree internal data. Otherwise, a full parse will occur using the new source text. Declaration public abstract SyntaxTree WithChangedText(SourceText newText) Parameters Type Name Description SourceText newText Returns Type Description SyntaxTree | Improve this Doc View Source WithFilePath(String) Returns a new tree whose FilePath is the specified node and other properties are copied from the current tree. Declaration public abstract SyntaxTree WithFilePath(string path) Parameters Type Name Description String path Returns Type Description SyntaxTree | Improve this Doc View Source WithRootAndOptions(SyntaxNode, ParseOptions) Returns a new tree whose root and options are as specified and other properties are copied from the current tree. Declaration public abstract SyntaxTree WithRootAndOptions(SyntaxNode root, ParseOptions options) Parameters Type Name Description SyntaxNode root ParseOptions options Returns Type Description SyntaxTree Extension Methods LuaExtensions.GetCompilationUnitRoot(SyntaxTree, CancellationToken) LuaExtensions.Minify(SyntaxTree) LuaExtensions.Minify(SyntaxTree, NamingStrategy) LuaExtensions.Minify(SyntaxTree, NamingStrategy, ISlotAllocator)"
  },
  "api/Loretta.CodeAnalysis.SyntaxTrivia.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTrivia.html",
    "title": "Struct SyntaxTrivia | Loretta",
    "keywords": "Struct SyntaxTrivia Represents a trivia in the syntax tree. Implements IEquatable < SyntaxTrivia > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxTrivia Properties | Improve this Doc View Source ContainsDiagnostics Determines whether this trivia has any diagnostics on it. If this trivia is a structured trivia then the returned value will indicate whether this trivia or any of its descendant nodes, tokens or trivia have any diagnostics on them. Declaration public readonly bool ContainsDiagnostics { get; } Property Value Type Description Boolean | Improve this Doc View Source FullSpan The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span will include spans of any leading or trailing trivia present on the child non-terminal node of this trivia. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source HasStructure Determines whether this trivia is a structured trivia. Declaration public readonly bool HasStructure { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDirective Determines whether this trivia represents a preprocessor directive. Declaration public readonly bool IsDirective { get; } Property Value Type Description Boolean | Improve this Doc View Source Language The language name that this trivia is syntax of. Declaration public readonly string Language { get; } Property Value Type Description String | Improve this Doc View Source RawKind An integer representing the language specific kind of this trivia. Declaration public readonly int RawKind { get; } Property Value Type Description Int32 | Improve this Doc View Source Span The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span will not include spans of any leading or trailing trivia present on the child non-terminal node of this trivia. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SpanStart Same as accessing Start on Span . Declaration public readonly int SpanStart { get; } Property Value Type Description Int32 Remarks Slight performance improvement. | Improve this Doc View Source SyntaxTree SyntaxTree which contains current SyntaxTrivia. Declaration public readonly SyntaxTree SyntaxTree { get; } Property Value Type Description SyntaxTree | Improve this Doc View Source Token The parent token that contains this token in its LeadingTrivia or TrailingTrivia collection. Declaration public readonly SyntaxToken Token { get; } Property Value Type Description SyntaxToken Methods | Improve this Doc View Source CopyAnnotationsTo(SyntaxTrivia) Copies all SyntaxAnnotations, if any, from this SyntaxTrivia instance and attaches them to a new instance based on trivia . Declaration public readonly SyntaxTrivia CopyAnnotationsTo(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description SyntaxTrivia | Improve this Doc View Source Equals(SyntaxTrivia) Determines whether the supplied SyntaxTrivia is equal to this SyntaxTrivia . Declaration public readonly bool Equals(SyntaxTrivia other) Parameters Type Name Description SyntaxTrivia other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether the supplied SyntaxTrivia is equal to this SyntaxTrivia . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetAnnotations(String) Get all the annotations of the specified annotation kind. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetAnnotations(String[]) Get all the annotations of the specified annotation kinds. Declaration public readonly IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description IEnumerable < SyntaxAnnotation > | Improve this Doc View Source GetDiagnostics() Gets a list of all the diagnostics associated with this trivia. This method does not filter diagnostics based on #pragmas and compiler options like nowarn, warnaserror etc. Declaration public readonly IEnumerable<Diagnostic> GetDiagnostics() Returns Type Description IEnumerable < Diagnostic > | Improve this Doc View Source GetHashCode() Serves as hash function for SyntaxTrivia . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source GetLocation() Get the location of this trivia. Declaration public readonly Location GetLocation() Returns Type Description Location | Improve this Doc View Source GetStructure() Returns the child non-terminal node representing the syntax tree structure under this structured trivia. Declaration public readonly SyntaxNode GetStructure() Returns Type Description SyntaxNode The child non-terminal node representing the syntax tree structure under this structured trivia. | Improve this Doc View Source HasAnnotation(SyntaxAnnotation) Determines whether this trivia has the specific annotation. Declaration public readonly bool HasAnnotation(SyntaxAnnotation annotation) Parameters Type Name Description SyntaxAnnotation annotation Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String) Determines where this trivia has annotations of the specified annotation kind. Declaration public readonly bool HasAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description Boolean | Improve this Doc View Source HasAnnotations(String[]) Determines where this trivia has any annotations of the specified annotation kinds. Declaration public readonly bool HasAnnotations(params string[] annotationKinds) Parameters Type Name Description String [] annotationKinds Returns Type Description Boolean | Improve this Doc View Source IsEquivalentTo(SyntaxTrivia) Determines if this trivia is equivalent to the specified trivia. Declaration public readonly bool IsEquivalentTo(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description Boolean | Improve this Doc View Source IsPartOfStructuredTrivia() Determines whether this trivia is a descendant of a structured trivia. Declaration public readonly bool IsPartOfStructuredTrivia() Returns Type Description Boolean | Improve this Doc View Source ToFullString() Returns the full string representation of this trivia. If this trivia is structured trivia then the returned string will include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia. Declaration public readonly string ToFullString() Returns Type Description String The full string representation of this trivia. Remarks The length of the returned string is always the same as FullSpan.Length | Improve this Doc View Source ToString() Returns the string representation of this trivia. If this trivia is structured trivia then the returned string will not include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia. Declaration public override readonly string ToString() Returns Type Description String The string representation of this trivia. Overrides ValueType.ToString() Remarks The length of the returned string is always the same as Span.Length | Improve this Doc View Source WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation>) Creates a new SyntaxTrivia with the specified annotations. Declaration public readonly SyntaxTrivia WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxTrivia | Improve this Doc View Source WithAdditionalAnnotations(SyntaxAnnotation[]) Creates a new SyntaxTrivia with the specified annotations. Declaration public readonly SyntaxTrivia WithAdditionalAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxTrivia | Improve this Doc View Source WithoutAnnotations(IEnumerable<SyntaxAnnotation>) Creates a new SyntaxTrivia without the specified annotations. Declaration public readonly SyntaxTrivia WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations) Parameters Type Name Description IEnumerable < SyntaxAnnotation > annotations Returns Type Description SyntaxTrivia | Improve this Doc View Source WithoutAnnotations(SyntaxAnnotation[]) Creates a new SyntaxTrivia without the specified annotations. Declaration public readonly SyntaxTrivia WithoutAnnotations(params SyntaxAnnotation[] annotations) Parameters Type Name Description SyntaxAnnotation [] annotations Returns Type Description SyntaxTrivia | Improve this Doc View Source WithoutAnnotations(String) Creates a new SyntaxTrivia without annotations of the specified kind. Declaration public readonly SyntaxTrivia WithoutAnnotations(string annotationKind) Parameters Type Name Description String annotationKind Returns Type Description SyntaxTrivia | Improve this Doc View Source WriteTo(TextWriter) Writes the full text of this trivia to the specified TextWriter. Declaration public readonly void WriteTo(TextWriter writer) Parameters Type Name Description TextWriter writer Operators | Improve this Doc View Source Equality(SyntaxTrivia, SyntaxTrivia) Determines whether two SyntaxTrivia s are equal. Declaration public static bool operator ==(SyntaxTrivia left, SyntaxTrivia right) Parameters Type Name Description SyntaxTrivia left SyntaxTrivia right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTrivia, SyntaxTrivia) Determines whether two SyntaxTrivia s are unequal. Declaration public static bool operator !=(SyntaxTrivia left, SyntaxTrivia right) Parameters Type Name Description SyntaxTrivia left SyntaxTrivia right Returns Type Description Boolean Implements IEquatable<> Extension Methods LuaExtensions.IsKind(SyntaxTrivia, SyntaxKind) LuaExtensions.Kind(SyntaxTrivia)"
  },
  "api/Loretta.CodeAnalysis.SyntaxTriviaList.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTriviaList.Enumerator.html",
    "title": "Struct SyntaxTriviaList.Enumerator | Loretta",
    "keywords": "Struct SyntaxTriviaList.Enumerator The enumerator for this trivia list. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly SyntaxTrivia Current { get; } Property Value Type Description SyntaxTrivia Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SyntaxTriviaList.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTriviaList.html",
    "title": "Struct SyntaxTriviaList | Loretta",
    "keywords": "Struct SyntaxTriviaList Represents a read-only list of SyntaxTrivia . Implements IEquatable < SyntaxTriviaList > IReadOnlyList < SyntaxTrivia > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct SyntaxTriviaList Constructors | Improve this Doc View Source SyntaxTriviaList(SyntaxTrivia) Creates a new trivia list with the provided trivia as the only element. Declaration public SyntaxTriviaList(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia | Improve this Doc View Source SyntaxTriviaList(SyntaxTrivia[]) Creates a list of trivia. Declaration public SyntaxTriviaList(params SyntaxTrivia[] trivias) Parameters Type Name Description SyntaxTrivia [] trivias An array of trivia. | Improve this Doc View Source SyntaxTriviaList(Nullable<IEnumerable<SyntaxTrivia>>) Creates a list of trivia. Declaration public SyntaxTriviaList(IEnumerable<SyntaxTrivia>? trivias) Parameters Type Name Description Nullable < System.Collections.IEnumerable < SyntaxTrivia >> trivias A sequence of trivia. Properties | Improve this Doc View Source Count The amount of elements in this list. Declaration public readonly int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Empty An empty trivia list. Declaration public static readonly SyntaxTriviaList Empty { get; } Property Value Type Description SyntaxTriviaList | Improve this Doc View Source FullSpan The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan FullSpan { get; } Property Value Type Description TextSpan | Improve this Doc View Source Item[Int32] Gets the trivia at the specified index. Declaration public readonly SyntaxTrivia this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the trivia to get. Property Value Type Description SyntaxTrivia The token at the specified index. | Improve this Doc View Source Span The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Add(SyntaxTrivia) Creates a new SyntaxTriviaList with the specified trivia added to the end. Declaration public readonly SyntaxTriviaList Add(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia The trivia to add. Returns Type Description SyntaxTriviaList | Improve this Doc View Source AddRange(IEnumerable<SyntaxTrivia>) Creates a new SyntaxTriviaList with the specified trivia added to the end. Declaration public readonly SyntaxTriviaList AddRange(IEnumerable<SyntaxTrivia> trivia) Parameters Type Name Description System.Collections.IEnumerable < SyntaxTrivia > trivia The trivia to add. Returns Type Description SyntaxTriviaList | Improve this Doc View Source Any() Does this list have any items. Declaration public readonly bool Any() Returns Type Description Boolean | Improve this Doc View Source Create(SyntaxTrivia) Creates a new trivia list. Declaration public static SyntaxTriviaList Create(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia Returns Type Description SyntaxTriviaList | Improve this Doc View Source ElementAt(Int32) Returns the element at the provided index. Declaration public readonly SyntaxTrivia ElementAt(int index) Parameters Type Name Description Int32 index Returns Type Description SyntaxTrivia | Improve this Doc View Source Equals(SyntaxTriviaList) Declaration public readonly bool Equals(SyntaxTriviaList other) Parameters Type Name Description SyntaxTriviaList other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source First() Returns the first trivia in the list. Declaration public readonly SyntaxTrivia First() Returns Type Description SyntaxTrivia The first trivia in the list. | Improve this Doc View Source GetEnumerator() Returns the enumerator for this list. Declaration public readonly SyntaxTriviaList.Enumerator GetEnumerator() Returns Type Description SyntaxTriviaList.Enumerator | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source IndexOf(SyntaxTrivia) Returns the index of the provided trivia in this list. Declaration public readonly int IndexOf(SyntaxTrivia triviaInList) Parameters Type Name Description SyntaxTrivia triviaInList Returns Type Description Int32 -1 if not found. | Improve this Doc View Source Insert(Int32, SyntaxTrivia) Creates a new SyntaxTriviaList with the specified trivia inserted at the index. Declaration public readonly SyntaxTriviaList Insert(int index, SyntaxTrivia trivia) Parameters Type Name Description Int32 index The index in the list to insert the trivia at. SyntaxTrivia trivia The trivia to insert. Returns Type Description SyntaxTriviaList | Improve this Doc View Source InsertRange(Int32, IEnumerable<SyntaxTrivia>) Creates a new SyntaxTriviaList with the specified trivia inserted at the index. Declaration public readonly SyntaxTriviaList InsertRange(int index, IEnumerable<SyntaxTrivia> trivia) Parameters Type Name Description Int32 index The index in the list to insert the trivia at. System.Collections.IEnumerable < SyntaxTrivia > trivia The trivia to insert. Returns Type Description SyntaxTriviaList | Improve this Doc View Source Last() Returns the last trivia in the list. Declaration public readonly SyntaxTrivia Last() Returns Type Description SyntaxTrivia The last trivia in the list. | Improve this Doc View Source Remove(SyntaxTrivia) Creates a new SyntaxTriviaList with the specified element removed. Declaration public readonly SyntaxTriviaList Remove(SyntaxTrivia triviaInList) Parameters Type Name Description SyntaxTrivia triviaInList The trivia element to remove. Returns Type Description SyntaxTriviaList | Improve this Doc View Source RemoveAt(Int32) Creates a new SyntaxTriviaList with the element at the specified index removed. Declaration public readonly SyntaxTriviaList RemoveAt(int index) Parameters Type Name Description Int32 index The index identifying the element to remove. Returns Type Description SyntaxTriviaList | Improve this Doc View Source Replace(SyntaxTrivia, SyntaxTrivia) Creates a new SyntaxTriviaList with the specified element replaced with new trivia. Declaration public readonly SyntaxTriviaList Replace(SyntaxTrivia triviaInList, SyntaxTrivia newTrivia) Parameters Type Name Description SyntaxTrivia triviaInList The trivia element to replace. SyntaxTrivia newTrivia The trivia to replace the element with. Returns Type Description SyntaxTriviaList | Improve this Doc View Source ReplaceRange(SyntaxTrivia, IEnumerable<SyntaxTrivia>) Creates a new SyntaxTriviaList with the specified element replaced with new trivia. Declaration public readonly SyntaxTriviaList ReplaceRange(SyntaxTrivia triviaInList, IEnumerable<SyntaxTrivia> newTrivia) Parameters Type Name Description SyntaxTrivia triviaInList The trivia element to replace. System.Collections.IEnumerable < SyntaxTrivia > newTrivia The trivia to replace the element with. Returns Type Description SyntaxTriviaList | Improve this Doc View Source Reverse() Returns a list which contains all elements of SyntaxTriviaList in reversed order. Declaration public readonly SyntaxTriviaList.Reversed Reverse() Returns Type Description SyntaxTriviaList.Reversed SyntaxTriviaList.Reversed which contains all elements of SyntaxTriviaList in reversed order | Improve this Doc View Source ToFullString() Returns the list as a string including leading and trailing trivia. Declaration public readonly string ToFullString() Returns Type Description String | Improve this Doc View Source ToString() Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(SyntaxTriviaList, SyntaxTriviaList) Checks whether two trivia lists are equal. Declaration public static bool operator ==(SyntaxTriviaList left, SyntaxTriviaList right) Parameters Type Name Description SyntaxTriviaList left SyntaxTriviaList right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTriviaList, SyntaxTriviaList) Checks whether two trivia lists are not equal. Declaration public static bool operator !=(SyntaxTriviaList left, SyntaxTriviaList right) Parameters Type Name Description SyntaxTriviaList left SyntaxTriviaList right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEquatable<> IReadOnlyList<> Extension Methods LuaExtensions.IndexOf(SyntaxTriviaList, SyntaxKind) LuaExtensions.Any(SyntaxTriviaList, SyntaxKind) SyntaxExtensions.NormalizeWhitespace(SyntaxTriviaList, String, Boolean) SyntaxExtensions.NormalizeWhitespace(SyntaxTriviaList, String, String, Boolean)"
  },
  "api/Loretta.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTriviaList.Reversed.Enumerator.html",
    "title": "Struct SyntaxTriviaList.Reversed.Enumerator | Loretta",
    "keywords": "Struct SyntaxTriviaList.Reversed.Enumerator The enumerator for reversed trivia lists. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator Properties | Improve this Doc View Source Current Declaration public readonly SyntaxTrivia Current { get; } Property Value Type Description SyntaxTrivia Methods | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/Loretta.CodeAnalysis.SyntaxTriviaList.Reversed.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxTriviaList.Reversed.html",
    "title": "Struct SyntaxTriviaList.Reversed | Loretta",
    "keywords": "Struct SyntaxTriviaList.Reversed Reversed enumerable. Implements System.Collections.IEnumerable < SyntaxTrivia > IEquatable < SyntaxTriviaList.Reversed > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct Reversed Constructors | Improve this Doc View Source Reversed(SyntaxTriviaList) Creates a new reversed trivia list. Declaration public Reversed(SyntaxTriviaList list) Parameters Type Name Description SyntaxTriviaList list Methods | Improve this Doc View Source Equals(SyntaxTriviaList.Reversed) Declaration public readonly bool Equals(SyntaxTriviaList.Reversed other) Parameters Type Name Description SyntaxTriviaList.Reversed other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetEnumerator() Returns the enumerator for this reversed trivia list. Declaration public readonly SyntaxTriviaList.Reversed.Enumerator GetEnumerator() Returns Type Description SyntaxTriviaList.Reversed.Enumerator | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(SyntaxTriviaList.Reversed, SyntaxTriviaList.Reversed) Checks whether two reversed lists are equal. Declaration public static bool operator ==(SyntaxTriviaList.Reversed left, SyntaxTriviaList.Reversed right) Parameters Type Name Description SyntaxTriviaList.Reversed left SyntaxTriviaList.Reversed right Returns Type Description Boolean | Improve this Doc View Source Inequality(SyntaxTriviaList.Reversed, SyntaxTriviaList.Reversed) Checks whether two reversed lists are equal. Declaration public static bool operator !=(SyntaxTriviaList.Reversed left, SyntaxTriviaList.Reversed right) Parameters Type Name Description SyntaxTriviaList.Reversed left SyntaxTriviaList.Reversed right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration readonly IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.IEnumerable<> IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.SyntaxWalker.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxWalker.html",
    "title": "Class SyntaxWalker | Loretta",
    "keywords": "Class SyntaxWalker Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia. The walker will perform a depth first walk of the tree. Inheritance Object SyntaxWalker Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SyntaxWalker Constructors | Improve this Doc View Source SyntaxWalker(SyntaxWalkerDepth) Creates a new walker instance. Declaration protected SyntaxWalker(SyntaxWalkerDepth depth = SyntaxWalkerDepth.Node) Parameters Type Name Description SyntaxWalkerDepth depth Syntax the SyntaxWalker should descend into. Properties | Improve this Doc View Source Depth Syntax the SyntaxWalker should descend into. Declaration protected SyntaxWalkerDepth Depth { get; } Property Value Type Description SyntaxWalkerDepth Methods | Improve this Doc View Source Visit(SyntaxNode) Called when the walker visits a node. This method may be overridden if subclasses want to handle the node. Overrides should call back into this base method if they want the children of this node to be visited. Declaration public virtual void Visit(SyntaxNode node) Parameters Type Name Description SyntaxNode node The current node that the walker is visiting. | Improve this Doc View Source VisitToken(SyntaxToken) Called when the walker visits a token. This method may be overridden if subclasses want to handle the token. Overrides should call back into this base method if they want the trivia of this token to be visited. Declaration protected virtual void VisitToken(SyntaxToken token) Parameters Type Name Description SyntaxToken token The current token that the walker is visiting. | Improve this Doc View Source VisitTrivia(SyntaxTrivia) Called when the walker visits a trivia syntax. This method may be overridden if subclasses want to handle the token. Overrides should call back into this base method if they want the children of this trivia syntax to be visited. Declaration protected virtual void VisitTrivia(SyntaxTrivia trivia) Parameters Type Name Description SyntaxTrivia trivia The current trivia syntax that the walker is visiting."
  },
  "api/Loretta.CodeAnalysis.SyntaxWalkerDepth.html": {
    "href": "api/Loretta.CodeAnalysis.SyntaxWalkerDepth.html",
    "title": "Enum SyntaxWalkerDepth | Loretta",
    "keywords": "Enum SyntaxWalkerDepth Syntax the SyntaxWalker should descend into. Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public enum SyntaxWalkerDepth Fields Name Description Node descend into only nodes StructuredTrivia descend into everything Token descend into nodes and tokens Trivia descend into nodes, tokens and trivia"
  },
  "api/Loretta.CodeAnalysis.Text.html": {
    "href": "api/Loretta.CodeAnalysis.Text.html",
    "title": "Namespace Loretta.CodeAnalysis.Text | Loretta",
    "keywords": "Namespace Loretta.CodeAnalysis.Text Classes SourceText An abstraction of source text. SourceTextContainer An object that contains an instance of a SourceText and raises events when its current instance changes. TextChangeEventArgs Represents state for a TextChanged event. TextLineCollection Abstract base class for TextLine collections. Structs LinePosition Immutable representation of a line number and position within a SourceText instance. LinePositionSpan Immutable span represented by a pair of line number and index within the line. TextChange Describes a single change when a particular span is replaced with a new text. TextChangeRange Represents the change to a span of text. TextLine Information about the character boundaries of a single line of text. TextLineCollection.Enumerator An enumerator for TextLineCollection . TextSpan Immutable abstract representation of a span of text. For example, in an error diagnostic that reports a location, it could come from a parsed string, text from a tool editor buffer, etc. Enums SourceHashAlgorithm Specifies a hash algorithms used for hashing source files."
  },
  "api/Loretta.CodeAnalysis.Text.LinePosition.html": {
    "href": "api/Loretta.CodeAnalysis.Text.LinePosition.html",
    "title": "Struct LinePosition | Loretta",
    "keywords": "Struct LinePosition Immutable representation of a line number and position within a SourceText instance. Implements IEquatable < LinePosition > IComparable < LinePosition > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax [DataContract] public readonly struct LinePosition Constructors | Improve this Doc View Source LinePosition(Int32, Int32) Initializes a new instance of a LinePosition with the given line and character. Declaration public LinePosition(int line, int character) Parameters Type Name Description Int32 line The line of the line position. The first line in a file is defined as line 0 (zero based line numbering). Int32 character The character position in the line. Properties | Improve this Doc View Source Character The character position within the line. Declaration public readonly int Character { get; } Property Value Type Description Int32 | Improve this Doc View Source Line The line number. The first line in a file is defined as line 0 (zero based line numbering). Declaration public readonly int Line { get; } Property Value Type Description Int32 | Improve this Doc View Source Zero A LinePosition that represents position 0 at line 0. Declaration public static readonly LinePosition Zero { get; } Property Value Type Description LinePosition Methods | Improve this Doc View Source CompareTo(LinePosition) Declaration public readonly int CompareTo(LinePosition other) Parameters Type Name Description LinePosition other Returns Type Description Int32 | Improve this Doc View Source Equals(LinePosition) Determines whether two LinePosition are the same. Declaration public readonly bool Equals(LinePosition other) Parameters Type Name Description LinePosition other The object to compare. Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines whether two LinePosition are the same. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The object to compare. Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Provides a hash function for LinePosition . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Provides a string representation for LinePosition . Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Examples 0,10 Operators | Improve this Doc View Source Equality(LinePosition, LinePosition) Determines whether two LinePosition are the same. Declaration public static bool operator ==(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean | Improve this Doc View Source GreaterThan(LinePosition, LinePosition) Checks whether one position is located after another. Declaration public static bool operator>(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean | Improve this Doc View Source GreaterThanOrEqual(LinePosition, LinePosition) Checks whether one position is located after or at the same location as another. Declaration public static bool operator >=(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean | Improve this Doc View Source Inequality(LinePosition, LinePosition) Determines whether two LinePosition are different. Declaration public static bool operator !=(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean | Improve this Doc View Source LessThan(LinePosition, LinePosition) Checks whether one position is located before another. Declaration public static bool operator <(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean | Improve this Doc View Source LessThanOrEqual(LinePosition, LinePosition) Checks whether one position is located before or at the same location as another. Declaration public static bool operator <=(LinePosition left, LinePosition right) Parameters Type Name Description LinePosition left LinePosition right Returns Type Description Boolean Implements IEquatable<> IComparable<>"
  },
  "api/Loretta.CodeAnalysis.Text.LinePositionSpan.html": {
    "href": "api/Loretta.CodeAnalysis.Text.LinePositionSpan.html",
    "title": "Struct LinePositionSpan | Loretta",
    "keywords": "Struct LinePositionSpan Immutable span represented by a pair of line number and index within the line. Implements IEquatable < LinePositionSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax [DataContract] public readonly struct LinePositionSpan Constructors | Improve this Doc View Source LinePositionSpan(LinePosition, LinePosition) Creates LinePositionSpan . Declaration public LinePositionSpan(LinePosition start, LinePosition end) Parameters Type Name Description LinePosition start Start position. LinePosition end End position. Properties | Improve this Doc View Source End Gets the end position of the span. Declaration public readonly LinePosition End { get; } Property Value Type Description LinePosition | Improve this Doc View Source Start Gets the start position of the span. Declaration public readonly LinePosition Start { get; } Property Value Type Description LinePosition Methods | Improve this Doc View Source Equals(LinePositionSpan) Declaration public readonly bool Equals(LinePositionSpan other) Parameters Type Name Description LinePositionSpan other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Provides a string representation for LinePositionSpan . Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Examples (0,0)-(5,6) Operators | Improve this Doc View Source Equality(LinePositionSpan, LinePositionSpan) Checks whether two line position spans are equal. Declaration public static bool operator ==(LinePositionSpan left, LinePositionSpan right) Parameters Type Name Description LinePositionSpan left LinePositionSpan right Returns Type Description Boolean | Improve this Doc View Source Inequality(LinePositionSpan, LinePositionSpan) Checks whether two line position spans are not equal. Declaration public static bool operator !=(LinePositionSpan left, LinePositionSpan right) Parameters Type Name Description LinePositionSpan left LinePositionSpan right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Text.SourceHashAlgorithm.html": {
    "href": "api/Loretta.CodeAnalysis.Text.SourceHashAlgorithm.html",
    "title": "Enum SourceHashAlgorithm | Loretta",
    "keywords": "Enum SourceHashAlgorithm Specifies a hash algorithms used for hashing source files. Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public enum SourceHashAlgorithm Fields Name Description None No algorithm specified. Sha1 Secure Hash Algorithm 1. Sha256 Secure Hash Algorithm 2 with a hash size of 256 bits."
  },
  "api/Loretta.CodeAnalysis.Text.SourceText.html": {
    "href": "api/Loretta.CodeAnalysis.Text.SourceText.html",
    "title": "Class SourceText | Loretta",
    "keywords": "Class SourceText An abstraction of source text. Inheritance Object SourceText Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SourceText Properties | Improve this Doc View Source ChecksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Declaration public SourceHashAlgorithm ChecksumAlgorithm { get; } Property Value Type Description SourceHashAlgorithm | Improve this Doc View Source Container The container of this SourceText . Declaration public virtual SourceTextContainer Container { get; } Property Value Type Description SourceTextContainer | Improve this Doc View Source Encoding Encoding of the file that the text was read from or is going to be saved to. null if the encoding is unspecified. Declaration public abstract Encoding Encoding { get; } Property Value Type Description Encoding Remarks If the encoding is not specified the source isn't debuggable. If an encoding-less SourceText is written to a file a UTF8 shall be used as a default. | Improve this Doc View Source Item[Int32] Returns a character at given position. Declaration public abstract char this[int position] { get; } Parameters Type Name Description Int32 position The position to get the character from. Property Value Type Description Char The character. | Improve this Doc View Source Length The length of the text in characters. Declaration public abstract int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Lines The collection of individual text lines. Declaration public TextLineCollection Lines { get; } Property Value Type Description TextLineCollection Methods | Improve this Doc View Source ContentEquals(SourceText) Compares the content with content of another SourceText . Declaration public bool ContentEquals(SourceText other) Parameters Type Name Description SourceText other Returns Type Description Boolean | Improve this Doc View Source CopyTo(Int32, Char[], Int32, Int32) Copy a range of characters from this SourceText to a destination array. Declaration public abstract void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) Parameters Type Name Description Int32 sourceIndex Char [] destination Int32 destinationIndex Int32 count | Improve this Doc View Source From(Stream, Encoding, SourceHashAlgorithm, Boolean) Constructs a SourceText from stream content. Declaration public static SourceText From(Stream stream, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false) Parameters Type Name Description Stream stream Stream. The stream must be seekable. Encoding encoding Data encoding to use if the stream doesn't start with Byte Order Mark specifying the encoding. UTF8 if not specified. SourceHashAlgorithm checksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Boolean throwIfBinaryDetected If the decoded text contains at least two consecutive NUL characters, then an is thrown. Returns Type Description SourceText Remarks Reads from the beginning of the stream. Leaves the stream open. Exceptions Type Condition DecoderFallbackException If the given encoding is set to use a throwing decoder as a fallback | Improve this Doc View Source From(Byte[], Int32, Encoding, SourceHashAlgorithm, Boolean) Constructs a SourceText from a byte array. Declaration public static SourceText From(byte[] buffer, int length, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1, bool throwIfBinaryDetected = false) Parameters Type Name Description Byte [] buffer The encoded source buffer. Int32 length The number of bytes to read from the buffer. Encoding encoding Data encoding to use if the encoded buffer doesn't start with Byte Order Mark. UTF8 if not specified. SourceHashAlgorithm checksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Boolean throwIfBinaryDetected If the decoded text contains at least two consecutive NUL characters, then an is thrown. Returns Type Description SourceText The decoded text. Exceptions Type Condition DecoderFallbackException If the given encoding is set to use a throwing decoder as a fallback | Improve this Doc View Source From(String, Encoding, SourceHashAlgorithm) Constructs a SourceText from text in a string. Declaration public static SourceText From(string text, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1) Parameters Type Name Description String text Text. Encoding encoding Encoding of the file that the text was read from or is going to be saved to. null if the encoding is unspecified. If the encoding is not specified the resulting SourceText isn't debuggable. If an encoding-less SourceText is written to a file a UTF8 shall be used as a default. SourceHashAlgorithm checksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Returns Type Description SourceText | Improve this Doc View Source From(TextReader, Int32, Encoding, SourceHashAlgorithm) Constructs a SourceText from text in a string. Declaration public static SourceText From(TextReader reader, int length, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1) Parameters Type Name Description TextReader reader TextReader Int32 length length of content from reader Encoding encoding Encoding of the file that the reader was read from or is going to be saved to. null if the encoding is unspecified. If the encoding is not specified the resulting SourceText isn't debuggable. If an encoding-less SourceText is written to a file a UTF8 shall be used as a default. SourceHashAlgorithm checksumAlgorithm Hash algorithm to use to calculate checksum of the text that's saved to PDB. Returns Type Description SourceText | Improve this Doc View Source GetChangeRanges(SourceText) Gets the set of TextChangeRange that describe how the text changed between this text an older version. This may be multiple detailed changes or a single change encompassing the entire text. Declaration public virtual IReadOnlyList<TextChangeRange> GetChangeRanges(SourceText oldText) Parameters Type Name Description SourceText oldText Returns Type Description IReadOnlyList < TextChangeRange > | Improve this Doc View Source GetChecksum() Returns the checksum for this text. Declaration public ImmutableArray<byte> GetChecksum() Returns Type Description ImmutableArray < Byte > | Improve this Doc View Source GetSubText(TextSpan) Gets a SourceText that contains the characters in the specified span of this text. Declaration public virtual SourceText GetSubText(TextSpan span) Parameters Type Name Description TextSpan span Returns Type Description SourceText | Improve this Doc View Source GetSubText(Int32) Returns a SourceText that has the contents of this text including and after the start position. Declaration public SourceText GetSubText(int start) Parameters Type Name Description Int32 start Returns Type Description SourceText | Improve this Doc View Source GetTextChanges(SourceText) Gets the set of TextChange that describe how the text changed between this text and an older version. This may be multiple detailed changes or a single change encompassing the entire text. Declaration public virtual IReadOnlyList<TextChange> GetTextChanges(SourceText oldText) Parameters Type Name Description SourceText oldText Returns Type Description IReadOnlyList < TextChange > | Improve this Doc View Source Replace(TextSpan, String) Returns a new SourceText with the specified span of characters replaced by the new text. Declaration public SourceText Replace(TextSpan span, string newText) Parameters Type Name Description TextSpan span String newText Returns Type Description SourceText | Improve this Doc View Source Replace(Int32, Int32, String) Returns a new SourceText with the specified range of characters replaced by the new text. Declaration public SourceText Replace(int start, int length, string newText) Parameters Type Name Description Int32 start Int32 length String newText Returns Type Description SourceText | Improve this Doc View Source ToString() Provides a string representation of the SourceText. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() | Improve this Doc View Source ToString(TextSpan) Gets a string containing the characters in specified span. Declaration public virtual string ToString(TextSpan span) Parameters Type Name Description TextSpan span Returns Type Description String | Improve this Doc View Source WithChanges(IEnumerable<TextChange>) Constructs a new SourceText from this text with the specified changes. Declaration public virtual SourceText WithChanges(IEnumerable<TextChange> changes) Parameters Type Name Description IEnumerable < TextChange > changes Returns Type Description SourceText | Improve this Doc View Source WithChanges(TextChange[]) Constructs a new SourceText from this text with the specified changes. If any changes are not in bounds of this SourceText . If any changes overlap other changes. Declaration public SourceText WithChanges(params TextChange[] changes) Parameters Type Name Description TextChange [] changes Returns Type Description SourceText Remarks Changes do not have to be in sorted order. However, WithChanges(IEnumerable<TextChange>) will perform better if they are. | Improve this Doc View Source Write(TextWriter, CancellationToken) Write this SourceText to a text writer. Declaration public void Write(TextWriter textWriter, CancellationToken cancellationToken = null) Parameters Type Name Description TextWriter textWriter CancellationToken cancellationToken | Improve this Doc View Source Write(TextWriter, TextSpan, CancellationToken) Write a span of text to a text writer. Declaration public virtual void Write(TextWriter writer, TextSpan span, CancellationToken cancellationToken = null) Parameters Type Name Description TextWriter writer TextSpan span CancellationToken cancellationToken"
  },
  "api/Loretta.CodeAnalysis.Text.SourceTextContainer.html": {
    "href": "api/Loretta.CodeAnalysis.Text.SourceTextContainer.html",
    "title": "Class SourceTextContainer | Loretta",
    "keywords": "Class SourceTextContainer An object that contains an instance of a SourceText and raises events when its current instance changes. Inheritance Object SourceTextContainer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class SourceTextContainer Properties | Improve this Doc View Source CurrentText The current text instance. Declaration public abstract SourceText CurrentText { get; } Property Value Type Description SourceText Events | Improve this Doc View Source TextChanged Raised when the current text instance changes. Declaration public abstract event EventHandler<TextChangeEventArgs> TextChanged Event Type Type Description EventHandler < TextChangeEventArgs >"
  },
  "api/Loretta.CodeAnalysis.Text.TextChange.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextChange.html",
    "title": "Struct TextChange | Loretta",
    "keywords": "Struct TextChange Describes a single change when a particular span is replaced with a new text. Implements IEquatable < TextChange > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax [DataContract] public readonly struct TextChange Constructors | Improve this Doc View Source TextChange(TextSpan, String) Initializes a new instance of TextChange Declaration public TextChange(TextSpan span, string newText) Parameters Type Name Description TextSpan span The original span of the changed text. String newText The new text. Properties | Improve this Doc View Source NewText The new text. Declaration [DataMember(Order = 1)] public readonly string NewText { get; } Property Value Type Description String | Improve this Doc View Source NoChanges An empty set of changes. Declaration public static readonly IReadOnlyList<TextChange> NoChanges { get; } Property Value Type Description IReadOnlyList < TextChange > | Improve this Doc View Source Span The original span of the changed text. Declaration [DataMember(Order = 0)] public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Equals(TextChange) Declaration public readonly bool Equals(TextChange other) Parameters Type Name Description TextChange other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Provides a string representation for TextChange . Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TextChange, TextChange) Checks whether two text changes are equal. Declaration public static bool operator ==(TextChange left, TextChange right) Parameters Type Name Description TextChange left TextChange right Returns Type Description Boolean | Improve this Doc View Source Implicit(TextChange to TextChangeRange) Converts a TextChange to a TextChangeRange . Declaration public static implicit operator TextChangeRange(TextChange change) Parameters Type Name Description TextChange change Returns Type Description TextChangeRange | Improve this Doc View Source Inequality(TextChange, TextChange) Checks whether two text changes are not equal. Declaration public static bool operator !=(TextChange left, TextChange right) Parameters Type Name Description TextChange left TextChange right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Text.TextChangeEventArgs.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextChangeEventArgs.html",
    "title": "Class TextChangeEventArgs | Loretta",
    "keywords": "Class TextChangeEventArgs Represents state for a TextChanged event. Inheritance Object TextChangeEventArgs Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public class TextChangeEventArgs : EventArgs Constructors | Improve this Doc View Source TextChangeEventArgs(SourceText, SourceText, IEnumerable<TextChangeRange>) Initializes an instance of TextChangeEventArgs . Declaration public TextChangeEventArgs(SourceText oldText, SourceText newText, IEnumerable<TextChangeRange> changes) Parameters Type Name Description SourceText oldText The text before the change. SourceText newText The text after the change. IEnumerable < TextChangeRange > changes A set of ranges for the change. | Improve this Doc View Source TextChangeEventArgs(SourceText, SourceText, TextChangeRange[]) Initializes an instance of TextChangeEventArgs . Declaration public TextChangeEventArgs(SourceText oldText, SourceText newText, params TextChangeRange[] changes) Parameters Type Name Description SourceText oldText The text before the change. SourceText newText The text after the change. TextChangeRange [] changes A set of ranges for the change. Properties | Improve this Doc View Source Changes Gets the set of ranges for the change. Declaration public IReadOnlyList<TextChangeRange> Changes { get; } Property Value Type Description IReadOnlyList < TextChangeRange > | Improve this Doc View Source NewText Gets the text after the change. Declaration public SourceText NewText { get; } Property Value Type Description SourceText | Improve this Doc View Source OldText Gets the text before the change. Declaration public SourceText OldText { get; } Property Value Type Description SourceText"
  },
  "api/Loretta.CodeAnalysis.Text.TextChangeRange.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextChangeRange.html",
    "title": "Struct TextChangeRange | Loretta",
    "keywords": "Struct TextChangeRange Represents the change to a span of text. Implements IEquatable < TextChangeRange > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct TextChangeRange Constructors | Improve this Doc View Source TextChangeRange(TextSpan, Int32) Initializes a new instance of TextChangeRange . Declaration public TextChangeRange(TextSpan span, int newLength) Parameters Type Name Description TextSpan span Int32 newLength Properties | Improve this Doc View Source NewLength Width of the span after the edit. A 0 here would represent a delete Declaration public readonly int NewLength { get; } Property Value Type Description Int32 | Improve this Doc View Source NoChanges An empty set of changes. Declaration public static readonly IReadOnlyList<TextChangeRange> NoChanges { get; } Property Value Type Description IReadOnlyList < TextChangeRange > | Improve this Doc View Source Span The span of text before the edit which is being changed Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan Methods | Improve this Doc View Source Collapse(IEnumerable<TextChangeRange>) Collapse a set of TextChangeRange s into a single encompassing range. If the set of ranges provided is empty, an empty range is returned. Declaration public static TextChangeRange Collapse(IEnumerable<TextChangeRange> changes) Parameters Type Name Description IEnumerable < TextChangeRange > changes Returns Type Description TextChangeRange | Improve this Doc View Source Equals(TextChangeRange) Compares current instance of TextChangeRange to another. Declaration public readonly bool Equals(TextChangeRange other) Parameters Type Name Description TextChangeRange other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Compares current instance of TextChangeRange to another. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Provides hash code for current instance of TextChangeRange . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts the text change range to a string. Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TextChangeRange, TextChangeRange) Determines if two instances of TextChangeRange are same. Declaration public static bool operator ==(TextChangeRange left, TextChangeRange right) Parameters Type Name Description TextChangeRange left TextChangeRange right Returns Type Description Boolean | Improve this Doc View Source Inequality(TextChangeRange, TextChangeRange) Determines if two instances of TextChangeRange are different. Declaration public static bool operator !=(TextChangeRange left, TextChangeRange right) Parameters Type Name Description TextChangeRange left TextChangeRange right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Text.TextLine.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextLine.html",
    "title": "Struct TextLine | Loretta",
    "keywords": "Struct TextLine Information about the character boundaries of a single line of text. Implements IEquatable < TextLine > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public readonly struct TextLine Properties | Improve this Doc View Source End Gets the end position of the line not including the line break. Declaration public readonly int End { get; } Property Value Type Description Int32 | Improve this Doc View Source EndIncludingLineBreak Gets the end position of the line including the line break. Declaration public readonly int EndIncludingLineBreak { get; } Property Value Type Description Int32 | Improve this Doc View Source LineNumber Gets the zero-based line number. Declaration public readonly int LineNumber { get; } Property Value Type Description Int32 | Improve this Doc View Source Span Gets the line span not including the line break. Declaration public readonly TextSpan Span { get; } Property Value Type Description TextSpan | Improve this Doc View Source SpanIncludingLineBreak Gets the line span including the line break. Declaration public readonly TextSpan SpanIncludingLineBreak { get; } Property Value Type Description TextSpan | Improve this Doc View Source Start Gets the start position of the line. Declaration public readonly int Start { get; } Property Value Type Description Int32 | Improve this Doc View Source Text Gets the source text. Declaration public readonly SourceText Text { get; } Property Value Type Description SourceText Methods | Improve this Doc View Source Equals(TextLine) Declaration public readonly bool Equals(TextLine other) Parameters Type Name Description TextLine other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source FromSpan(SourceText, TextSpan) Creates a TextLine instance. Declaration public static TextLine FromSpan(SourceText text, TextSpan span) Parameters Type Name Description SourceText text The source text. TextSpan span The span of the line. Returns Type Description TextLine An instance of TextLine . | Improve this Doc View Source GetHashCode() Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns the text for this line. Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TextLine, TextLine) Checks whether two text lines are equal. Declaration public static bool operator ==(TextLine left, TextLine right) Parameters Type Name Description TextLine left TextLine right Returns Type Description Boolean | Improve this Doc View Source Inequality(TextLine, TextLine) Checks whether two text lines are not equal. Declaration public static bool operator !=(TextLine left, TextLine right) Parameters Type Name Description TextLine left TextLine right Returns Type Description Boolean Implements IEquatable<>"
  },
  "api/Loretta.CodeAnalysis.Text.TextLineCollection.Enumerator.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextLineCollection.Enumerator.html",
    "title": "Struct TextLineCollection.Enumerator | Loretta",
    "keywords": "Struct TextLineCollection.Enumerator An enumerator for TextLineCollection . Implements System.Collections.IEnumerator < TextLine > IEnumerator Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public struct Enumerator : IEnumerator Properties | Improve this Doc View Source Current Declaration public readonly TextLine Current { get; } Property Value Type Description TextLine Methods | Improve this Doc View Source Equals(Object) Not supported. Do not use. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Not supported. Do not use. Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Operators | Improve this Doc View Source Equality(TextLineCollection.Enumerator, TextLineCollection.Enumerator) Not supported. Do not use. Declaration public static bool operator ==(TextLineCollection.Enumerator left, TextLineCollection.Enumerator right) Parameters Type Name Description TextLineCollection.Enumerator left TextLineCollection.Enumerator right Returns Type Description Boolean | Improve this Doc View Source Inequality(TextLineCollection.Enumerator, TextLineCollection.Enumerator) Not supported. Do not use. Declaration public static bool operator !=(TextLineCollection.Enumerator left, TextLineCollection.Enumerator right) Parameters Type Name Description TextLineCollection.Enumerator left TextLineCollection.Enumerator right Returns Type Description Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object | Improve this Doc View Source IEnumerator.MoveNext() Declaration bool IEnumerator.MoveNext() Returns Type Description Boolean | Improve this Doc View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements System.Collections.IEnumerator<> System.Collections.IEnumerator"
  },
  "api/Loretta.CodeAnalysis.Text.TextLineCollection.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextLineCollection.html",
    "title": "Class TextLineCollection | Loretta",
    "keywords": "Class TextLineCollection Abstract base class for TextLine collections. Inheritance Object TextLineCollection Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax public abstract class TextLineCollection : IReadOnlyList<TextLine> Properties | Improve this Doc View Source Count The count of TextLine items in the collection Declaration public abstract int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets the TextLine item at the specified index. Declaration public abstract TextLine this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description TextLine Methods | Improve this Doc View Source GetEnumerator() Returns the enumerator for this text line collection. Declaration public TextLineCollection.Enumerator GetEnumerator() Returns Type Description TextLineCollection.Enumerator | Improve this Doc View Source GetLineFromPosition(Int32) Gets a TextLine that encompasses the character position. Declaration public virtual TextLine GetLineFromPosition(int position) Parameters Type Name Description Int32 position Returns Type Description TextLine | Improve this Doc View Source GetLinePosition(Int32) Gets a LinePosition corresponding to a character position. Declaration public virtual LinePosition GetLinePosition(int position) Parameters Type Name Description Int32 position Returns Type Description LinePosition | Improve this Doc View Source GetLinePositionSpan(TextSpan) Convert a TextSpan to a LinePositionSpan . Declaration public LinePositionSpan GetLinePositionSpan(TextSpan span) Parameters Type Name Description TextSpan span Returns Type Description LinePositionSpan | Improve this Doc View Source GetPosition(LinePosition) Convert a LinePosition to a position. Declaration public int GetPosition(LinePosition position) Parameters Type Name Description LinePosition position Returns Type Description Int32 | Improve this Doc View Source GetTextSpan(LinePositionSpan) Convert a LinePositionSpan to TextSpan . Declaration public TextSpan GetTextSpan(LinePositionSpan span) Parameters Type Name Description LinePositionSpan span Returns Type Description TextSpan | Improve this Doc View Source IndexOf(Int32) The index of the TextLine that encompasses the character position. Declaration public abstract int IndexOf(int position) Parameters Type Name Description Int32 position Returns Type Description Int32 Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator"
  },
  "api/Loretta.CodeAnalysis.Text.TextSpan.html": {
    "href": "api/Loretta.CodeAnalysis.Text.TextSpan.html",
    "title": "Struct TextSpan | Loretta",
    "keywords": "Struct TextSpan Immutable abstract representation of a span of text. For example, in an error diagnostic that reports a location, it could come from a parsed string, text from a tool editor buffer, etc. Implements IEquatable < TextSpan > IComparable < TextSpan > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : Loretta.CodeAnalysis.Text Assembly : Loretta.CodeAnalysis.dll Syntax [DataContract] public readonly struct TextSpan Constructors | Improve this Doc View Source TextSpan(Int32, Int32) Creates a TextSpan instance beginning with the position Start and having the Length specified with length . Declaration public TextSpan(int start, int length) Parameters Type Name Description Int32 start Int32 length Properties | Improve this Doc View Source End End of the span. Declaration public readonly int End { get; } Property Value Type Description Int32 | Improve this Doc View Source IsEmpty Determines whether or not the span is empty. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Length of the span. Declaration [DataMember(Order = 1)] public readonly int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Start Start point of the span. Declaration [DataMember(Order = 0)] public readonly int Start { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CompareTo(TextSpan) Compares current instance of TextSpan with another. Declaration public readonly int CompareTo(TextSpan other) Parameters Type Name Description TextSpan other Returns Type Description Int32 | Improve this Doc View Source Contains(TextSpan) Determines whether span falls completely within this span. Declaration public readonly bool Contains(TextSpan span) Parameters Type Name Description TextSpan span The span to check. Returns Type Description Boolean true if the specified span falls completely within this span, otherwise false . | Improve this Doc View Source Contains(Int32) Determines whether the position lies within the span. Declaration public readonly bool Contains(int position) Parameters Type Name Description Int32 position The position to check. Returns Type Description Boolean true if the position is greater than or equal to Start and strictly less than End, otherwise false . | Improve this Doc View Source Equals(TextSpan) Determines if current instance of TextSpan is equal to another. Declaration public readonly bool Equals(TextSpan other) Parameters Type Name Description TextSpan other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Determines if current instance of TextSpan is equal to another. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source FromBounds(Int32, Int32) Creates a new TextSpan from start and end positions as opposed to a position and length. The returned TextSpan contains the range with start inclusive, and end exclusive. Declaration public static TextSpan FromBounds(int start, int end) Parameters Type Name Description Int32 start Int32 end Returns Type Description TextSpan | Improve this Doc View Source GetHashCode() Produces a hash code for TextSpan . Declaration public override readonly int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() | Improve this Doc View Source Intersection(TextSpan) Returns the intersection with the given span, or null if there is no intersection. Declaration public readonly TextSpan? Intersection(TextSpan span) Parameters Type Name Description TextSpan span The span to check. Returns Type Description Nullable < TextSpan > The intersection of the spans, or null if the intersection is empty. | Improve this Doc View Source IntersectsWith(TextSpan) Determines whether span intersects this span. Two spans are considered to intersect if they have positions in common or the end of one span coincides with the start of the other span. Declaration public readonly bool IntersectsWith(TextSpan span) Parameters Type Name Description TextSpan span The span to check. Returns Type Description Boolean true if the spans intersect, otherwise false . | Improve this Doc View Source IntersectsWith(Int32) Determines whether position intersects this span. A position is considered to intersect if it is between the start and end positions (inclusive) of this span. Declaration public readonly bool IntersectsWith(int position) Parameters Type Name Description Int32 position The position to check. Returns Type Description Boolean true if the position intersects, otherwise false . | Improve this Doc View Source Overlap(TextSpan) Returns the overlap with the given span, or null if there is no overlap. Declaration public readonly TextSpan? Overlap(TextSpan span) Parameters Type Name Description TextSpan span The span to check. Returns Type Description Nullable < TextSpan > The overlap of the spans, or null if the overlap is empty. | Improve this Doc View Source OverlapsWith(TextSpan) Determines whether span overlaps this span. Two spans are considered to overlap if they have positions in common and neither is empty. Empty spans do not overlap with any other span. Declaration public readonly bool OverlapsWith(TextSpan span) Parameters Type Name Description TextSpan span The span to check. Returns Type Description Boolean true if the spans overlap, otherwise false . | Improve this Doc View Source ToString() Provides a string representation for TextSpan . Declaration public override readonly string ToString() Returns Type Description String Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(TextSpan, TextSpan) Determines if two instances of TextSpan are the same. Declaration public static bool operator ==(TextSpan left, TextSpan right) Parameters Type Name Description TextSpan left TextSpan right Returns Type Description Boolean | Improve this Doc View Source Inequality(TextSpan, TextSpan) Determines if two instances of TextSpan are different. Declaration public static bool operator !=(TextSpan left, TextSpan right) Parameters Type Name Description TextSpan left TextSpan right Returns Type Description Boolean Implements IEquatable<> IComparable<>"
  },
  "api/Loretta.CodeAnalysis.WellKnownDiagnosticTags.html": {
    "href": "api/Loretta.CodeAnalysis.WellKnownDiagnosticTags.html",
    "title": "Class WellKnownDiagnosticTags | Loretta",
    "keywords": "Class WellKnownDiagnosticTags A class with common diagnostic tags. Inheritance Object WellKnownDiagnosticTags Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Loretta.CodeAnalysis Assembly : Loretta.CodeAnalysis.dll Syntax public static class WellKnownDiagnosticTags Fields | Improve this Doc View Source Build Indicates that the diagnostic is related to build. Declaration public const string Build = \"Build\" Field Value Type Description String | Improve this Doc View Source Compiler Indicates that the diagnostic is reported by the compiler. Declaration public const string Compiler = \"Compiler\" Field Value Type Description String | Improve this Doc View Source NotConfigurable Indicates that the diagnostic is not configurable, i.e. it cannot be suppressed or filtered or have its severity changed. Declaration public const string NotConfigurable = \"NotConfigurable\" Field Value Type Description String | Improve this Doc View Source Unnecessary Indicates that the diagnostic is related to some unnecessary source code. Declaration public const string Unnecessary = \"Unnecessary\" Field Value Type Description String"
  },
  "articles/basics/locations.html": {
    "href": "articles/basics/locations.html",
    "title": "Source Locations | Loretta",
    "keywords": "Source Locations Locations of things in source can be represented as 3 different types: TextSpan ; LinePosition ; and LinePositionSpan . TextSpan A TextSpan basically represents a range of positions (offset from the start of the @Loretta.CodeAnalysis.Text.SourceText). So in the following code: print(\"Hello there\") The location of the word there could be represented with a TextSpan created with new TextSpan(13, 5) or TextSpan.FromBounds(13, 18) . A TextSpan also comes with a few builtin methods that allow comparison between instances of it. A few examples are: OverlapsWith(TextSpan) : Checks if a TextSpan overlaps with another; IntersectsWith(TextSpan) : Checks if a TextSpan intersects with another. Contains(TextSpan) : Checks if a TextSpan contains another. LinePosition A LinePosition is the type of representation of a position in a SourceText that is more suitable for humans to use, as it is a combination of line number and column number. Given that is is simply a representation meant for human consumption, it doesn't have any methods other than comparison and equality. Obtaining a LinePosition is a bit more of an involved process, requiring using GetLinePosition(Int32) on the Lines of a SourceText . LinePositionSpan A LinePositionSpan is the type of representation of a TextSpan that is meant to be used to"
  },
  "articles/basics/sourcetext.html": {
    "href": "articles/basics/sourcetext.html",
    "title": "Source Text | Loretta",
    "keywords": "Source Text The SourceText is probably the first piece of Loretta anyone who starts using the library has to deal with. The primary duty of a SourceText instance is to hold a given source code file's contents in memory and provide access to them. It also provides the following features: Splits the file's contents into lines; Enables a checksum/hash to be created from the contents of the text; Detecting changes between 2 SourceText instances; Replacing parts of the text; Applying patches ( TextChange s) to create a new SourceText; Writing the contents of the SourceText to an output TextWriter. Creating a SourceText To create a SourceText instance, one of the SourceText.From overloads can be used. These will load the contents into memory and allow the source text information such as lines and length to be read. Example: using Loretta.CodeAnaylsis.Text; SourceText text; using (var stream = File.OpenRead(\"file.lua\")) text = SourceText.From(stream); Console.WriteLine(text.Lines.Count); // Number of lines in the file. Text Navigation After loading the source code into memory, SourceText allows you to enumerate the lines the file contains. By using the SourceText.Lines property, a TextLineCollection can be obtained which can be used to enumerate the lines that the file contains as well as find the line a position belongs to using TextLineCollection.GetLineFromPosition . Checksum/Hashing SourceText allows one to calculate the checksum/hash for a given instance by providing the proper SourceHashAlgorithm to the SourceText.From overload and then calling the SourceText.GetChecksum method. The method will return an ImmutableArray<byte> which contains the hashed bytes of the file's contents. This can be turned into a hexadecimal string to show the user or outputted to some place for identification and validation afterwards. Change Detection If you wish to take advantage of incremental parsing or want to find out which parts of a file have been changed, SourceText can help with that by allowing you to find out which sections of a file have changed. To get these changes, the SourceText.GetTextChanges(SourceText) method can be used which will then return a list of TextChange s . A TextChange is basically composed of two values: Span : The original location the text was in, represented by a TextSpan ; NewText : The text that the \"old\" text has gotten replaced with."
  },
  "articles/experimental/constant-folder.html": {
    "href": "articles/experimental/constant-folder.html",
    "title": "Constant Folder | Loretta",
    "keywords": "Constant Folder Confidence Level: High Why is this experimental? No comprehensive testing done. How to use To use the constant folder, just add the following using to the top of your file: using Loretta.CodeAnalysis.Lua.Experimental; and then use the ConstantFold extension method to constant fold that node and its children. Example The following Program.cs file is a simple console program that will constant fold the code in a file passed as an argument: using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; using Loretta.CodeAnalysis.Lua.Experimental; var path = args[1]; // Read the file into a SourceText SourceText sourceText; using (var stream = File.OpenRead(path)) sourceText = SourceText.From(stream, Encoding.UTF8); // Parse the text into a tree var syntaxTree = LuaSyntaxTree.ParseText(sourceText, options: new LuaParseOptions(LuaSyntaxOptions.All), path: path); // Fold the tree's root. var root = syntaxTree.GetRoot().ConstantFold(); // Write the tree back to the file using (var writer = File.OpenText(path)) root.WriteTo(writer); How Does it Work? The constant folder basically turns operations that it knows are constant into their actual values. A small (but not comprehensive) set examples are: Original Expression Folded Expression --1 1 not \"hi\" false 1 + 1 2 #\"hello\" 5 ({a = 1}).a 1 ({[\"e\" .. not \"hi\"] = {[\"e\" .. not not \"hi\"] = (2 + 2 ^ 3 + ~2)}}).efalse[\"e\" .. not (nil ~= nil)] (7)"
  },
  "articles/experimental/index.html": {
    "href": "articles/experimental/index.html",
    "title": "Experimental Features | Loretta",
    "keywords": "Experimental Features Experimental features are in the Loretta.CodeAnalysis.Lua.Experimental package. Experimental can mean a lot of things, but mainly one or more of the following: Untested; Unstable; Unsupported. Each experimental project will list its state."
  },
  "articles/experimental/minifier.html": {
    "href": "articles/experimental/minifier.html",
    "title": "Minifier | Loretta",
    "keywords": "Minifier Confidence Level: Low Why is this experimental? Almost no testing and no support. How to use To use the minifier, just add the following using to the top of your file: using Loretta.CodeAnalysis.Lua.Experimental; and then use one of the Minify extension methods to minify that tree. If you'd like to use a different naming strategy or slot allocator, you'll need the following using as well: using Loretta.CodeAnalysis.Lua.Experimental.Minifying; The minifier has a few customization points (which are all optional): Naming strategies: naming strategies are what's used to convert slots (look in the \"How it Works\" section to learn about slots) into variable names; There are a few builtin naming strategies in NamingStrategies with the default one being Alphabetical . Slot allocators: slot allocators are for advanced usage so it is not recommended you write one unless if you know what you're doing. There are two builtin slot allocators (with the default being the SortedSlotAllocator ): SequentialSlotAllocator : This is the simplest possible slot allocator that does not reuse slots even after they are released. By using this, every single renamed variable will have a unique name and names will not be reused. SortedSlotAllocator : This is a slot allocator that will pick the first unused slot it has. By using this, variable names will be reused aggressively resulting in better compression but less readable code. Examples The following Program.cs file is a simple console program that will minify the code in a file passed as an argument: using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; using Loretta.CodeAnalysis.Lua.Experimental; using Loretta.CodeAnalysis.Lua.Experimental.Minifying; var path = args[1]; // Read the file into a SourceText SourceText sourceText; using (var stream = File.OpenRead(path)) sourceText = SourceText.From(stream, Encoding.UTF8); // Parse the text into a tree var syntaxTree = LuaSyntaxTree.ParseText(sourceText, options: new LuaParseOptions(LuaSyntaxOptions.All), path: path); // Minify the tree. syntaxTree = syntaxTree.Minify(); // Examples of alternative calls: // // Numeric variable names (_0, _1, _2, etc.): // syntaxTree = syntaxTree.Minify(NamingStrategies.Numerical); // // No variable name reuse: // syntaxTree = syntaxTree.Minify(NamingStrategies.Alphabetical, new SequentialSlotAllocator()); // Write the tree back to the file using (var writer = File.OpenText(Path.ChangeExtension(path, \".min.lua\"))) syntaxTree.GetRoot().WriteTo(writer); How Does it Work? Currently the minifier does 2 things: variable renaming and trivia removal. Renaming The renamer goes through the script and does the following choices: When it finds a new variable, it: Allocates a slot for it with the provided ISlotAllocator ; Renames the variable with the name converted using the provided naming strategy. When it finds an existing variable, it: Renames the variable with the name converted using the provided naming strategy; Checks if this is the last use of the variable and then releases the slot if it is. When naming a variable, the NamingStrategy will generate a name that will not conflict with other names in the file. Trivia Removal The trivial removal step removes all trivia (comments and whitespace) and only inserts a space where it would be necessary. Advanced Usage NamingStrategy A naming strategy is provided two things: The slot to convert to a name; The scopes the name will be added to. The naming slot must: be deterministc (given the same slot and scope set it must generate the same variable name); not generate names that conflict with others in the provided scopes (or its parent scopes); generate valid identifier names. Since none of these are validated by the minifier, you should have your own test suite for it. ISlotAllocator A slot allocator has one main job: allocating slots (numbers) for variables. The minifier will request a slot from the allocator which will then be reserved for use until it is released. The slot allocator must not return a slot that is already allocated. The minifier does not validate if the allocator returns an already allocated slot so this must be checked with your own test suite."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting started with Loretta | Loretta",
    "keywords": "Getting started with Loretta Installing Loretta v0.2 We have two NuGet packages: Package Stable Latest Main Experimental Using Loretta v0.2 Parsing text (Optional) Pick a LuaSyntaxOptions preset and then create a LuaParseOptions from it. If no preset is picked, LuaSyntaxOptions.All is used by default; (Optional) Create a SourceText from your code (using one of the SourceText.From overloads); Call LuaSyntaxTree.ParseText with your SourceText / string , (optional) LuaParseOptions , (optional) path and (optional) CancellationToken ; Do whatever you want with the returned LuaSyntaxTree . Formatting Code The NormalizeWhitespace method replaces all whitespace and and end of line trivia by normalized (standard code style) ones. Accessing scope information If you'd like to get scoping and variable information, create a new Script from your SyntaxTree s and then do one of the following: Access Script.RootScope to get the global scope; Call Script.GetScope(SyntaxNode) or Script.FindScope(SyntaxNode, ScopeKind) to get an IScope ; Call Script.GetVariable(SyntaxNode) to get an IVariable ; Call Script.GetLabel(SyntaxNode) on a GotoStatementSyntax or a GotoLabelStatementSyntax to get an IGotoLabel ; Using Variables There are 4 kinds of variables: VariableKind.Local a variable declared in one of the following nodes: LocalVariableDeclarationStatementSyntax ; LocalFunctionDeclarationStatementSyntax . VariableKind.Global a variable used without a previous declaration; VariableKind.Parameter a function parameter . VariableKind.Iteration a variable that is an iteration variable from a NumericForStatementSyntax or GenericForStatementSyntax ; The interface for variables is IVariable which exposes the following information: IVariable.Kind - The VariableKind ; IVariable.ContainingScope - The containing scope; IVariable.Name - The variable name (might be ... for varargs); IVariable.Declaration - The place where the variable was declared ( null for the implcit arg and ... variables available in all files and global variables); IVariable.ReferencingScopes - The scopes that have statements that directly reference this variable; IVariable.CapturingScopes - Scopes that capture this variable as an upvalue; IVariable.ReadLocations - Nodes that read from this variable; IVariable.WriteLocations - Nodes that write to this variable; Using Scopes There are 4 kinds of scopes: ScopeKind.Global - There is only one of these, the Script.RootScope . It implements IScope and only contains globals; ScopeKind.File - These implement IFileScope and are the scope for CompilationUnitSyntax es which are a file's root node; ScopeKind.Function - These implement IFunctionScope and are generated for these nodes: AnonymousFunctionExpressionSyntax ; LocalFunctionDeclarationStatementSyntax ; FunctionDeclarationStatementSyntax . ScopeKind.Block - These implement only IScope and are generated for normal blocks from these nodes: NumericForStatementSyntax ; GenericForStatementSyntax ; WhileStatementSyntax ; RepeatUntilStatementSyntax ; IfStatementSyntax ; ElseIfClauseSyntax ; ElseClauseSyntax ; DoStatementSyntax ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Loretta | Loretta",
    "keywords": "Loretta A C# (G)Lua lexer, parser, code analysis, transformation and code generation toolkit. For getting started, see the tutorial . This is (another) rewrite from scratch based on Roslyn and The Complete Syntax of Lua with a few extensions: Operators introduced in Garry's Mod Lua (glua): && for and ; || for or ; != for ~= ; ! for not ; Comment types introduced in Garry's Mod Lua (glua): C style single line comment: // ... ; C style multi line comment: /* */ ; Characters accepted as part of identifiers by LuaJIT (emojis, non-rendering characters, or basically any byte above 127 / 0x7F ); Luau (Roblox Lua) syntax (partial): Compound assignment: += , -= , *= , /= , ^= , %= , ..= ; If expressions: if a then b else c and if a then b elseif c then d else e ; Typed lua syntax. FiveM's hash string syntax (only parsing, manual node creation currently not possible); Continue support. The following options are available: No continue at all; Roblox's continue which is a contextual keyword; Garry's Mod's continue which is a full fledged keyword. TL;DR: This supports Lua 5.1, Lua 5.2, Lua 5.3, Lua 5.4, LuaJIT 2.0, LuaJIT 2.1, FiveM, GLua and (partially) Luau (Roblox Lua)."
  },
  "tutorials/creating-a-localizer/part-1.html": {
    "href": "tutorials/creating-a-localizer/part-1.html",
    "title": "Creating a Localizer - Part 1 | Loretta",
    "keywords": "Creating a Localizer - Part 1 Hello, welcome! In this tutorial we'll build a function localizer from scratch using Loretta. Our objective is to transform the following: local zero, nine, comma = string.byte('09,', 1, 3) -- Parses a comma separated list of numbers into numbers local function parser(input) return function() local len = #input local numstart = nil for idx = 1, len do -- Read the char as a byte since it's more efficient -- than a plain tostring local ch = string.byte(input, idx) -- If we have a decimal char, then do nothing other -- than set the start position if it's not set if ch >= zero and ch <= nine then if numstart == nil then numstart = idx end elseif ch == comma then -- Otherwise, if we have a start set, return the parsed -- number and set the starting position back to nil if numstart ~= nil then return tostring(string.sub(input, numstart, idx)) numstart = nil end else error(string.format(\"Invalid character '%c' found in input.\", string.char(ch))) end end end end Into the following script: local string_byte, tostring, string_sub, error, string_format, string_char = string.byte, tostring, string.sub, error, string.format, string.char local zero, nine, comma = string_byte('09,', 1, 3) -- Parses a comma separated list of numbers into numbers local function parser(input) return function() local len = #input local numstart = nil for idx = 1, len do -- Read the char as a byte since it's more efficient -- than a plain string.sub local ch = string_byte(input, idx) -- If we have a decimal char, then do nothing other -- than set the start position if it's not set if ch >= zero and ch <= nine then if numstart == nil then numstart = idx end elseif ch == comma then -- Otherwise, if we have a start set, return the parsed -- number and set the starting position back to nil if numstart ~= nil then return tostring(string_sub(input, numstart, idx)) numstart = nil end else error(string_format(\"Invalid character '%c' found in input.\", string_char(ch))) end end end end For LuaJIT (no interpreter) this has no performance difference but for LuaJIT in interpreter mode and PUC Lua it does so there's some benefit to doing it. Now that introductions are out of the way, let's get started! 1. Creating a console project Since our program will be invoked from the command line, we'll need to create a console project. First let's create a new console project by running dotnet new console in an empty directory: ❯ dotnet new console The template \"Console App\" was created successfully. Processing post-creation actions... Running 'dotnet restore' on B:\\tutorials\\localizer\\localizer.csproj... Determining projects to restore... Restored B:\\tutorials\\localizer\\localizer.csproj (in 65 ms). Restore succeeded. And now let's add a reference to the Loretta nuget package with dotnet add package Loretta.CodeAnalysis.Lua : ❯ dotnet add package Loretta.CodeAnalysis.Lua Determining projects to restore... info : Adding PackageReference for package 'Loretta.CodeAnalysis.Lua' into project 'B:\\tutorials\\localizer\\localizer.csproj'. info : CACHE https://api.nuget.org/v3/registration5-gz-semver2/loretta.codeanalysis.lua/index.json info : Restoring packages for B:\\tutorials\\localizer\\localizer.csproj... info : Package 'Loretta.CodeAnalysis.Lua' is compatible with all the specified frameworks in project 'B:\\tutorials\\localizer\\localizer.csproj'. info : PackageReference for package 'Loretta.CodeAnalysis.Lua' version '0.2.8' added to file 'B:\\tutorials\\localizer\\localizer.csproj'. info : Writing assets file to disk. Path: B:\\tutorials\\localizer\\obj\\project.assets.json log : Restored B:\\tutorials\\localizer\\localizer.csproj (in 67 ms). And then save the initial code that was presented in the introduction (the one without all the local s at the top) in a file named sample.lua . 2. Implementing file loading Now it is time for us to make our program load lua files and parse them. We'll start by loading the files into a SourceText first by using SourceText.From . Also note that since we're using new templates . First we'll add the using for Loretta.CodeAnalysis.Text so that we can access SourceText and then we add validation for the provided file path: if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } Then we actually load the file into a SourceText : SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); The responsibility SourceText has is to store the code in memory in a format that won't make it end up in the LOH (Large Object Heap) as well as allowing us to obtain specific characters from it and/or substrings of the code as well as splitting the code into multiple TextLines . We can also use the SourceText to map a TextSpan to a LinePositionSpan which can then be used for error reporting. SourceText is also important for obtaining the checksum of a file as well as calculating the changes between two versions of a file with SourceText.GetTextChanges or simply applying a set of changes to a file with SourceText.WithChanges Our code up to this point // See https://aka.ms/new-console-template for more information using Loretta.CodeAnalysis.Text; if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); return 0; 3. Parsing code into a tree Now it is time for us to parse the file we just loaded into a tree so we can manipulate it. First we'll need to add another using for Loretta.CodeAnalysis.Lua so we can access LuaSyntaxTree so we can call its ParseText method. Then we'll need to pick a preset for the files we'll be loading. The \"preset\" we'll be choosing is a set of options in the LuaSyntaxOptions class which defines which errors the parser will be generating as well as which constructs the parser will accept or not (such as integers, C comments and C boolean operators for Garry's Mod Lua, Typed Lua for Luau/Roblox Lua and others). The presets that are currently available are the following: LuaSyntaxOptions.Lua51 : The preset for Lua 5.1 LuaSyntaxOptions.Lua52 : The preset for Lua 5.2 LuaSyntaxOptions.Lua53 : The preset for Lua 5.3 LuaSyntaxOptions.Lua54 : The preset for Lua 5.4 LuaSyntaxOptions.LuaJIT20 : The preset for LuaJIT 2.0 LuaSyntaxOptions.LuaJIT21 : The preset for LuaJIT 2.1 LuaSyntaxOptions.FiveM : The preset for FiveM's flavor of Lua 5.3 LuaSyntaxOptions.GMod : The preset for Garry's Mod's flavor of LuaJIT 2.0 And then we have the following 2 that are meant to accept the largest amount of syntax possible. These presets exist mostly for cases when the file's lua version is not known and as such we try to accept the largest amount of syntax without erroring (and as such are not recommented for general usage ): LuaSyntaxOptions.All : The preset for accepting the most Lua without integers LuaSyntaxOptions.AllWithIntegers : The preset for accepting the most Lua with integers The side effect of accepting integers is that this preset will not accept C comment syntax. In this snippet the Lua51 preset will be used but you should choose the one that applies best to your use case. var parseOptions = new LuaParseOptions(LuaSyntaxOptions.Lua51); var syntaxTree = LuaSyntaxTree.ParseText(text, parseOptions, args[0]); Here we do 2 things: we define a LuaParseOptions using the LuaSyntaxOptions.Lua51 preset and then call LuaSyntaxTree.ParseText with the text we loaded earlier as well as the parse options and the file name through ( args[0] ). Now, we need to check that the parsed code contains no errors. We'll do that by using SyntaxTree.GetDiagnostics and checking that the list of diagnostics has no errors: var hasErrors = false; foreach (var diagnostic in syntaxTree.GetDiagnostics().OrderByDescending(diag => diag.Severity)) { Console.WriteLine(diagnostic.ToString()); hasErrors |= diagnostic.Severity == DiagnosticSeverity.Error; } if (hasErrors) { Console.WriteLine(\"File has errors! Exiting...\"); return 2; } In Loretta (as in Roslyn), errors, warnings and infos are called diagnostics . A diagnostic contains important information about an error such as: Diagnostic.Id : The diagnostic's ID. As an example, LUA0001 is the diagnostic ID for an invalid string escape. Diagnostic.Location : The location the diagnostic was reported at. This is important for being able to point to the user where an error or warning is in their text editor or to output it to the command line. Diagnostic.Severity : The diagnostic's severity (whether it's an error, warning, info or suggestion). The value is a member of the DiagnosticSeverity enum. Diagnostic.Descriptor : This is the instance of the diagnostic's definition which we call a DiagnosticDescriptor . For diagnostics, you can think of the DiagnosticDescriptor as a class' definition and the Diagnostic as the class' instance. Our code up to this point // See https://aka.ms/new-console-template for more information using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Text; using Loretta.CodeAnalysis.Lua; if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); var parseOptions = new LuaParseOptions(LuaSyntaxOptions.All); var syntaxTree = LuaSyntaxTree.ParseText(text, parseOptions, args[0]); var hasErrors = false; foreach (var diagnostic in syntaxTree.GetDiagnostics().OrderByDescending(diag => diag.Severity)) { Console.WriteLine(diagnostic.ToString()); hasErrors |= diagnostic.Severity == DiagnosticSeverity.Error; } if (hasErrors) { Console.WriteLine(\"File has errors! Exiting...\"); return 2; } return 0; 4. Collecting function calls Now that we have the parsed tree from the file and have confirmed it does not have any errors, it is time for us to start extracting the function calls from the tree so that we can create local variables for them. For that we'll use one of the fundamental building blocks of working with trees in Loretta: LuaSyntaxWalker . The walker allows us to go through every node of the tree recursively and only act upon the nodes we're interested in, which in our case is the FunctionCallExpressionSyntax . Since we'll be implementing a new class for the walker we'll create a new file called FunctionCallCollector.cs which will start out with 3 using s for namespaces which we'll need as well as our namespace: using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; Then we need to actually create our class and make it inherit from LuaSyntaxWalker as well as add a proper constructor for it passing SyntaxWalkerDepth.Node to the LuaSyntaxWalker constructor as we are not interested in anything below nodes for this walker: internal class FunctionCallCollector : LuaSyntaxWalker { private FunctionCallCollector() : base(SyntaxWalkerDepth.Node) { } } The constructor is private because we'll be exposing the functionality of this class as a public static method and it being a LuaSyntaxWalker will be an internal implementation detail of the class. But you might've noticed we're missing something. That's right! We're missing a list so we can store the function calls we'll be collecting! For that we'll be using an ImmutableArray<FunctionCallExpressionSyntax>.Builder so that later we can return an ImmutableArray<FunctionCallExpressionSyntax> : internal class FunctionCallCollector : LuaSyntaxWalker { private readonly ImmutableArray<FunctionCallExpressionSyntax>.Builder _functionCalls; private FunctionCallCollector() : base(SyntaxWalkerDepth.Node) { _functionCalls = ImmutableArray.CreateBuilder<FunctionCallExpressionSyntax>(); } } Now, we have to actually add the function calls to the list. We'll do that by overriding the @Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.VisitFunctionCallExpression method so that we can do something whenever it finds a function call. It's also important to keep in mind we'll have to call the base method otherwise other function calls that might be contained inside the one we're visiting will not be visited. public override void VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { _functionCalls.Add(node); base.VisitFunctionCallExpression(node); } And lastly, let's add our public static method at the top of our class so that we can actually use this walker: public static ImmutableArray<FunctionCallExpressionSyntax> Collect(SyntaxNode node) { var collector = new FunctionCallCollector(); collector.Visit(node); return collector._functionCalls.ToImmutable(); } Now that we have our function call collector done, it's time for us to actually use it back in Program.cs : Our code so far Program.cs FunctionCallCollector.cs // See https://aka.ms/new-console-template for more information using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Text; using Loretta.CodeAnalysis.Lua; if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); var parseOptions = new LuaParseOptions(LuaSyntaxOptions.All); var syntaxTree = LuaSyntaxTree.ParseText(text, parseOptions, args[0]); var hasErrors = false; foreach (var diagnostic in syntaxTree.GetDiagnostics().OrderByDescending(diag => diag.Severity)) { Console.WriteLine(diagnostic.ToString()); hasErrors |= diagnostic.Severity == DiagnosticSeverity.Error; } if (hasErrors) { Console.WriteLine(\"File has errors! Exiting...\"); return 2; } return 0; using System.Collections.Immutable; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; internal class FunctionCallCollector : LuaSyntaxWalker { public static ImmutableArray<FunctionCallExpressionSyntax> Collect(SyntaxNode node) { var collector = new FunctionCallCollector(); collector.Visit(node); return collector._functionCalls.ToImmutable(); } private readonly ImmutableArray<FunctionCallExpressionSyntax>.Builder _functionCalls; private FunctionCallCollector() : base(SyntaxWalkerDepth.Node) { _functionCalls = ImmutableArray.CreateBuilder<FunctionCallExpressionSyntax>(); } public override void VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { _functionCalls.Add(node); base.VisitFunctionCallExpression(node); } } 5. Function call processing Now that we have all the function calls in the script, we need to deduplicate them and group them up so we can map each function call to a local variable. First we need to filter the list of function calls to the ones that we can process. For simplicity's sake, we'll only be accepting function calls on identifiers and members of identifiers (e.g.: print or math.ceil ). For that, we'll be implementing a method to check a function call's Expression to see if it is an IdentifierNameSyntax or a MemberAccessExpressionSyntax whose base Expression is a IdentifierNameSyntax . We can check if a node is of a certain type by using the IsKind(SyntaxNode, SyntaxKind) method: /// <summary> /// Returns whether the provided node can be turned into a local. /// </summary> /// <remarks> /// A node can be turned into a local if it is a <see cref=\"IdentifierNameSyntax\" /> /// or a <see cref=\"MemberAccessExpressionSyntax\" /> with its base passing this function. /// /// This means that <c>a</c> passes, <c>a.b</c> passes and <c>a.b.c</c> passes but /// <c>(1 + 1).a</c> does not nor does <c>(1 + 1).a.b.c</c>. /// </remarks> static bool canTurnIntoLocal(SyntaxNode node) { if (node.IsKind(SyntaxKind.IdentifierName)) return true; else if (node.IsKind(SyntaxKind.MemberAccessExpression)) return canTurnIntoLocal(((MemberAccessExpressionSyntax) node).Expression); else return false; } Then afterwards, we'll make a function that will convert a node into its local name: /// <summary> /// Turns a name that we can turn into a local and makes it into a local variable name. /// </summary> static IdentifierNameSyntax getLocalName(SyntaxNode node) { Debug.Assert(canTurnIntoLocal(node), \"Node cannot be turned into local!\"); // We use a stack because we'll be reading this in reverse order. var nameParts = new Stack<string>(); while (node.IsKind(SyntaxKind.MemberAccessExpression)) { var memberExpr = (MemberAccessExpressionSyntax) node; nameParts.Push(memberExpr.MemberName.Text); node = memberExpr.Expression; } nameParts.Push(((IdentifierNameSyntax) node).Name); return SyntaxFactory.IdentifierName(string.Join(\"_\", nameParts)); } And then finally, we'll use a bit of LINQ to glue everything together: var groups = FunctionCallCollector.Collect(syntaxTree.GetRoot()) .Where(call => canTurnIntoLocal(call.Expression)) .GroupBy(call => getLocalName(call.Expression)); Then finally, we can print out the results of the array so we can see something in the console for the first time! foreach (var group in groups) { Console.WriteLine($\"{group.Key}:\"); foreach (var call in group) { Console.WriteLine($\" {call}\"); } } Which results in the following output: ❯ dotnet run -- .\\sample.lua string_byte: string.byte('09,', 1, 3) string.byte(input, idx) tostring: tostring(string.sub(input, numstart, idx)) string_sub: string.sub(input, numstart, idx) error: error(string.format(\"Invalid character '%c' found in input.\", string.char(ch))) string_format: string.format(\"Invalid character '%c' found in input.\", string.char(ch)) string_char: string.char(ch) Our code so far Program.cs FunctionCallCollector.cs // See https://aka.ms/new-console-template for more information using Localizer; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; using Loretta.CodeAnalysis.Text; using System.Diagnostics; if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); var parseOptions = new LuaParseOptions(LuaSyntaxOptions.All); var syntaxTree = LuaSyntaxTree.ParseText(text, parseOptions, args[0]); var hasErrors = false; foreach (var diagnostic in syntaxTree.GetDiagnostics().OrderByDescending(diag => diag.Severity)) { Console.WriteLine(diagnostic.ToString()); hasErrors |= diagnostic.Severity == DiagnosticSeverity.Error; } if (hasErrors) { Console.WriteLine(\"File has errors! Exiting...\"); return 2; } var groups = FunctionCallCollector.Collect(syntaxTree.GetRoot()) .Where(call => canTurnIntoLocal(call.Expression)) .GroupBy(call => getLocalName(call.Expression)); foreach (var group in groups) { Console.WriteLine(group.Key + \":\"); foreach (var call in group) { Console.WriteLine($\" {call}\"); } } return 0; /// <summary> /// Returns whether the provided node can be turned into a local. /// </summary> /// <remarks> /// A node can be turned into a local if it is a <see cref=\"IdentifierNameSyntax\" /> /// or a <see cref=\"MemberAccessExpressionSyntax\" /> with its base passing this function. /// /// This means that <c>a</c> passes, <c>a.b</c> passes and <c>a.b.c</c> passes but /// <c>(1 + 1).a</c> does not nor does <c>(1 + 1).a.b.c</c>. /// </remarks> static bool canTurnIntoLocal(SyntaxNode node) { if (node.IsKind(SyntaxKind.IdentifierName)) return true; else if (node.IsKind(SyntaxKind.MemberAccessExpression)) return canTurnIntoLocal(((MemberAccessExpressionSyntax) node).Expression); else return false; } /// <summary> /// Turns a name that we can turn into a local and makes it into a local variable name. /// </summary> static string getLocalName(SyntaxNode node) { Debug.Assert(canTurnIntoLocal(node), \"Node cannot be turned into local!\"); // We use a stack because we'll be reading this in reverse order. var nameParts = new Stack<string>(); while (node.IsKind(SyntaxKind.MemberAccessExpression)) { var memberExpr = (MemberAccessExpressionSyntax) node; nameParts.Push(memberExpr.MemberName.Text); node = memberExpr.Expression; } nameParts.Push(((IdentifierNameSyntax) node).Name); return string.Join(\"_\", nameParts); } using System.Collections.Immutable; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; internal class FunctionCallCollector : LuaSyntaxWalker { public static ImmutableArray<FunctionCallExpressionSyntax> Collect(SyntaxNode node) { var collector = new FunctionCallCollector(); collector.Visit(node); return collector._functionCalls.ToImmutable(); } private readonly ImmutableArray<FunctionCallExpressionSyntax>.Builder _functionCalls; private FunctionCallCollector() : base(SyntaxWalkerDepth.Node) { _functionCalls = ImmutableArray.CreateBuilder<FunctionCallExpressionSyntax>(); } public override void VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { _functionCalls.Add(node); base.VisitFunctionCallExpression(node); } } 6. Rewriting the input file For this last step, we'll rewrite the input file to add the local declaration at the top of the file as well as rewriting all function calls to their local counterparts. For this we'll be using another fundamental building block of working with Loretta trees: LuaSyntaxRewriter . The rewriter allows you to replace certain nodes in the tree without having to modify all parents yourself as well as making your life easier since you can handle only the nodes you're interested in. Another important component of this will be the SyntaxFactory which is the static class that's used to create everything related to nodes including the nodes themselves but also the SyntaxList<TNode> and the SeparatedSyntaxList<TNode> . With the LuaSyntaxRewriter and SyntaxFactory introduction out of the way, let's get started on writing the code with the following using s as well as the namespace in a file named Rewriter.cs : using System.Collections.Immutable; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; Then we'll create our rewriter which will inherit from LuaSyntaxRewriter and have 2 private fields: A field to store the groups we generated when mapping the function calls to their local name counterparts; And another field to store the mapping of the strings to the IdentifierNameSyntax . It'll have a private constructor as well as a public static method to provide a contained method that enforces correct usage of our rewriter: class Rewriter : LuaSyntaxRewriter { public static SyntaxNode Rewrite( IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> functionCalls, SyntaxNode node) { var rewriter = new Rewriter(functionCalls); return rewriter.Visit(node); } private readonly IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> _functionCalls; private readonly ImmutableDictionary<string, IdentifierNameSyntax> _localNames; private Rewriter(IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> functionCalls) { _functionCalls = functionCalls; // Create deduplicated identifier name nodes since they can be safely reused. _localNames = functionCalls.ToImmutableDictionary(g => g.Key, g => SyntaxFactory.IdentifierName(g.Key)); } } Then for the first step of our rewriter, we'll override VisitCompilationUnit(CompilationUnitSyntax) so that we can add the local variable declaration at the top of it. The CompilationUnitSyntax represents a parsed file and contains only the list of statements at the root of the file as well as the EOF token. But first we'll make it visit every statement in the compilation unit and update the compilation unit with the results of it: public override SyntaxNode? VisitCompilationUnit(CompilationUnitSyntax node) { var statements = VisitList(node.Statements.Statements); var statementList = node.Statements.WithStatements(statements); return node.WithStatements(statementList); } Now we need to create the LocalVariableDeclarationStatementSyntax node: public override SyntaxNode? VisitCompilationUnit(CompilationUnitSyntax node) { var statements = VisitList(node.Statements.Statements); // Create the list of names as well the values var names = _functionCalls.Select(g => SyntaxFactory.LocalDeclarationName(_localNames[g.Key])); var values = _functionCalls.Select(g => g.First().Expression); // And then we create the local variable declaration node: var localDeclaration = SyntaxFactory.LocalVariableDeclarationStatement( SyntaxFactory.SeparatedList(names), SyntaxFactory.SeparatedList<ExpressionSyntax>(values)); // Then we normalize the whitespace in the node so it doesn't look ugly: localDeclaration = localDeclaration.NormalizeWhitespace(); // And we need to add a line break to the last value so that it doesn't show up // in the same line as the next statement in the file. localDeclaration = localDeclaration.WithTrailingTrivia( localDeclaration.GetTrailingTrivia().Add(SyntaxFactory.EndOfLine(Environment.NewLine))); // And finally we insert it at the start of the list. // Note that we're reassigning the statements list to the result of the call // since lists are immutable and any operations on them will return the modified // list. statements = statements.Insert(0, localDeclaration); var statementList = node.Statements.WithStatements(statements); return node.WithStatements(statementList); } Note A lot is being done in the code above so take a while to read it through carefully. Introduction to Trivia In the code above, we used WithTrailingTrivia<TSyntax>(TSyntax, SyntaxTriviaList) as well as GetTrailingTrivia() to manipulate the trivia of the local variable declaration node we created. But what is trivia? In Loretta (as in Roslyn), we call extraneous syntax that doesn't necessarily impact parsing such as whitespaces, line breaks, comments and shebangs (the #!/bin/bash you see at the start of some linux scripts) trivia and they are stored as part of the token preceding or following them: Leading trivia is all trivia located since the first line break after the previous token. Trailing trivia is all trivia after a token up to (and including) the first line break. Now we can go back to Program.cs to replace the loop where we print the groups with the following: var root = Rewriter.Rewrite(groups, syntaxTree.GetRoot()); root.WriteTo(Console.Out); Which prints out the rewritten node to the console, resulting in the following output: local string_byte, tostring, string_sub, error, string_format, string_char = string.byte, tostring, string.sub, error, string.format, string.char local zero, nine, comma = string.byte('09,', 1, 3) -- Parses a comma separated list of numbers into numbers local function parser(input) return function() local len = #input local numstart = nil for idx = 1, len do -- Read the char as a byte since it's more efficient -- than a plain tostring local ch = string.byte(input, idx) -- If we have a decimal char, then do nothing other -- than set the start position if it's not set if ch >= zero and ch <= nine then if numstart == nil then numstart = idx end elseif ch == comma then -- Otherwise, if we have a start set, return the parsed -- number and set the starting position back to nil if numstart ~= nil then return tostring(string.sub(input, numstart, idx)) numstart = nil end else error(string.format(\"Invalid character '%c' found in input.\", string.char(ch))) end end end end Lastly, we now need to rewrite the function calls to use the locals instead of the globals by overriding VisitFunctionCallExpression(FunctionCallExpressionSyntax) : public override SyntaxNode? VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { foreach (var group in _functionCalls) { // Skip to the next group if the current one doesn't have the node if (!group.Contains(node)) continue; // Get the IdentifierNameSyntax we created earlier. var nameNode = _localNames[group.Key]; // Import the trivia from old expression nameNode = nameNode.WithTriviaFrom(node.Expression); // Update the function argument(s) var argument = (FunctionArgumentSyntax) Visit(node.Argument)!; // And finally, we return the function call with the // updated expression. return node.Update(nameNode, argument); } return base.VisitFunctionCallExpression(node); } And now when we run the program again, we get the following output in the console: local string_byte, tostring, string_sub, error, string_format, string_char = string.byte, tostring, string.sub, error, string.format, string.char local zero, nine, comma = string_byte('09,', 1, 3) -- Parses a comma separated list of numbers into numbers local function parser(input) return function() local len = #input local numstart = nil for idx = 1, len do -- Read the char as a byte since it's more efficient -- than a plain tostring local ch = string_byte(input, idx) -- If we have a decimal char, then do nothing other -- than set the start position if it's not set if ch >= zero and ch <= nine then if numstart == nil then numstart = idx end elseif ch == comma then -- Otherwise, if we have a start set, return the parsed -- number and set the starting position back to nil if numstart ~= nil then return tostring(string_sub(input, numstart, idx)) numstart = nil end else error(string_format(\"Invalid character '%c' found in input.\", string_char(ch))) end end end end Final code Program.cs FunctionCallCollector.cs Rewriter.cs // See https://aka.ms/new-console-template for more information using Localizer; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; using Loretta.CodeAnalysis.Text; using System.Diagnostics; if (args.Length < 1) { Console.WriteLine(\"No file path provided!\"); return 1; } if (!File.Exists(args[0])) { Console.WriteLine(\"The specified file does not exist!\"); return 1; } SourceText text; using (var stream = File.OpenRead(args[0])) text = SourceText.From(stream); var parseOptions = new LuaParseOptions(LuaSyntaxOptions.All); var syntaxTree = LuaSyntaxTree.ParseText(text, parseOptions, args[0]); var hasErrors = false; foreach (var diagnostic in syntaxTree.GetDiagnostics().OrderByDescending(diag => diag.Severity)) { Console.WriteLine(diagnostic.ToString()); hasErrors |= diagnostic.Severity == DiagnosticSeverity.Error; } if (hasErrors) { Console.WriteLine(\"File has errors! Exiting...\"); return 2; } var groups = FunctionCallCollector.Collect(syntaxTree.GetRoot()) .Where(call => canTurnIntoLocal(call.Expression)) .GroupBy(call => getLocalName(call.Expression)); foreach (var group in groups) { Console.WriteLine(group.Key + \":\"); foreach (var call in group) { Console.WriteLine($\" {call}\"); } } return 0; /// <summary> /// Returns whether the provided node can be turned into a local. /// </summary> /// <remarks> /// A node can be turned into a local if it is a <see cref=\"IdentifierNameSyntax\" /> /// or a <see cref=\"MemberAccessExpressionSyntax\" /> with its base passing this function. /// /// This means that <c>a</c> passes, <c>a.b</c> passes and <c>a.b.c</c> passes but /// <c>(1 + 1).a</c> does not nor does <c>(1 + 1).a.b.c</c>. /// </remarks> static bool canTurnIntoLocal(SyntaxNode node) { if (node.IsKind(SyntaxKind.IdentifierName)) return true; else if (node.IsKind(SyntaxKind.MemberAccessExpression)) return canTurnIntoLocal(((MemberAccessExpressionSyntax) node).Expression); else return false; } /// <summary> /// Turns a name that we can turn into a local and makes it into a local variable name. /// </summary> static string getLocalName(SyntaxNode node) { Debug.Assert(canTurnIntoLocal(node), \"Node cannot be turned into local!\"); // We use a stack because we'll be reading this in reverse order. var nameParts = new Stack<string>(); while (node.IsKind(SyntaxKind.MemberAccessExpression)) { var memberExpr = (MemberAccessExpressionSyntax) node; nameParts.Push(memberExpr.MemberName.Text); node = memberExpr.Expression; } nameParts.Push(((IdentifierNameSyntax) node).Name); return string.Join(\"_\", nameParts); } using System.Collections.Immutable; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; internal class FunctionCallCollector : LuaSyntaxWalker { public static ImmutableArray<FunctionCallExpressionSyntax> Collect(SyntaxNode node) { var collector = new FunctionCallCollector(); collector.Visit(node); return collector._functionCalls.ToImmutable(); } private readonly ImmutableArray<FunctionCallExpressionSyntax>.Builder _functionCalls; private FunctionCallCollector() : base(SyntaxWalkerDepth.Node) { _functionCalls = ImmutableArray.CreateBuilder<FunctionCallExpressionSyntax>(); } public override void VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { _functionCalls.Add(node); base.VisitFunctionCallExpression(node); } } using System.Collections.Immutable; using Loretta.CodeAnalysis; using Loretta.CodeAnalysis.Lua; using Loretta.CodeAnalysis.Lua.Syntax; namespace Localizer; class Rewriter : LuaSyntaxRewriter { public static SyntaxNode Rewrite( IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> functionCalls, SyntaxNode node) { var rewriter = new Rewriter(functionCalls); return rewriter.Visit(node); } private readonly IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> _functionCalls; private readonly ImmutableDictionary<string, IdentifierNameSyntax> _localNames; private Rewriter(IEnumerable<IGrouping<string, FunctionCallExpressionSyntax>> functionCalls) { _functionCalls = functionCalls; // Create deduplicated identifier name nodes since they can be safely reused. _localNames = functionCalls.ToImmutableDictionary(g => g.Key, g => SyntaxFactory.IdentifierName(g.Key)); } public override SyntaxNode? VisitCompilationUnit(CompilationUnitSyntax node) { var statements = VisitList(node.Statements.Statements); // Create the list of names as well the values var names = _functionCalls.Select(g => SyntaxFactory.LocalDeclarationName(_localNames[g.Key])); var values = _functionCalls.Select(g => g.First().Expression); // And then we create the local variable declaration node: var localDeclaration = SyntaxFactory.LocalVariableDeclarationStatement( SyntaxFactory.SeparatedList(names), SyntaxFactory.SeparatedList<ExpressionSyntax>(values)); // Then we normalize the whitespace in the node so it doesn't look ugly: localDeclaration = localDeclaration.NormalizeWhitespace(); // And we need to add a line break to the last value so that it doesn't show up // in the same line as the next statement in the file. localDeclaration = localDeclaration.WithTrailingTrivia( localDeclaration.GetTrailingTrivia().Add(SyntaxFactory.EndOfLine(Environment.NewLine))); // And finally we insert it at the start of the list. // Note that we're reassigning the statements list to the result of the call // since lists are immutable and any operations on them will return the modified // list. statements = statements.Insert(0, localDeclaration); var statementList = node.Statements.WithStatements(statements); return node.WithStatements(statementList); } public override SyntaxNode? VisitFunctionCallExpression(FunctionCallExpressionSyntax node) { foreach (var group in _functionCalls) { // Skip to the next group if the current one doesn't have the node if (!group.Contains(node)) continue; // Get the IdentifierNameSyntax we created earlier. var nameNode = _localNames[group.Key]; // Import the trivia from old expression nameNode = nameNode.WithTriviaFrom(node.Expression); // Update the function argument(s) var argument = (FunctionArgumentSyntax) Visit(node.Argument)!; // And finally, we return the function call with the // updated expression. return node.Update(nameNode, argument); } return base.VisitFunctionCallExpression(node); } } 7. What's next? So we've built a localizer! But it is not perfect. In part 2 we'll handle checking whether or not the variable the function is being called (or the variable that contains the field being called) is a global so that we don't create any locals for the following case: local function something(func) return func(42) end local t = { sq = function(x) return x * x end } local k = something(function(x) return t.sq(x) end)"
  }
}