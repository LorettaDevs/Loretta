<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="$(MSBuildThisFileDirectory)../../../../build/LibraryProject.props"/>

    <!-- Package data -->
    <PropertyGroup>
        <PackageId>Loretta.CodeAnalysis.Lua</PackageId>
        <Description>A GLua/Lua lexer, parser, code analysis, transformation and generation library.</Description>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Enable output of generated files back into our Generated directory -->
        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>
        <CompilerGeneratedFilesOutputPath>Generated</CompilerGeneratedFilesOutputPath>
    </PropertyGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="Loretta.CodeAnalysis.Test.Utilities"/>
        <InternalsVisibleTo Include="Loretta.CodeAnalysis.Lua.Test.Utilities"/>
        <InternalsVisibleTo Include="Loretta.CodeAnalysis.Lua.UnitTests"/>
        <InternalsVisibleTo Include="Loretta.CLI"/>
        <InternalsVisibleTo Include="Loretta.CodeAnalysis.Lua.StatisticsCollector"/>
        <InternalsVisibleTo Include="Loretta.CodeAnalysis.Lua.Experimental"/>
    </ItemGroup>

    <!-- Packages that we need from .NET 6+ on .NET Standard 2.0 -->

    <ItemGroup>
        <PackageReference Include="Tsu" Version="2.2.2"/>
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\..\..\Tools\Generators\ErrorFactsGenerator\Loretta.Generators.ErrorFactsGenerator.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false"/>
        <ProjectReference Include="..\..\..\Tools\Generators\SyntaxFactsGenerator\Loretta.Generators.SyntaxFactsGenerator.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false"/>
        <ProjectReference Include="..\..\..\Tools\Generators\SyntaxXml\Loretta.Generators.SyntaxXml.csproj">
            <OutputItemType>Analyzer</OutputItemType>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <!-- The generator project currently builds as both a console app and a source generator,
                 depending upon which TFM is built. No matter what the this project builds as,
                 we want to grab the generator.-->
            <SetTargetFramework>TargetFramework=netstandard2.0</SetTargetFramework>
        </ProjectReference>
        <ProjectReference Include="..\..\Core\Portable\Loretta.CodeAnalysis.csproj"/>
    </ItemGroup>
    <ItemGroup>
        <Compile Update="LuaResources.Designer.cs">
            <DesignTime>True</DesignTime>
            <AutoGen>True</AutoGen>
            <DependentUpon>LuaResources.resx</DependentUpon>
        </Compile>
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Update="LuaResources.resx">
            <Generator>ResXFileCodeGenerator</Generator>
            <LastGenOutput>LuaResources.Designer.cs</LastGenOutput>
        </EmbeddedResource>
    </ItemGroup>


    <ItemGroup Condition="'$(DocGen)' != 'true'">
        <Folder Include="Generated\"/>

        <AdditionalFiles Include="Syntax\Syntax.xml"/>
        <None Include="Syntax\Syntax.xsd"/>

        <!-- Don't include the output from a previous source generator execution into future runs; the */** trick here ensures that there's
         at least one subdirectory, which is our key that it's coming from a source generator as opposed to something that is coming from
         some other tool. -->
        <Compile Remove="$(CompilerGeneratedFilesOutputPath)/*/**/*.cs"/>
    </ItemGroup>


    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="System.Collections.Immutable" Version="8.0.0"/>
    </ItemGroup>

</Project>
