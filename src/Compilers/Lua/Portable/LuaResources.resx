<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR_AmbiguousFunctionCallOrNewStatement" xml:space="preserve">
    <value>Syntax ambiguous between a function call and a new statement</value>
  </data>
  <data name="ERR_BadCharacter" xml:space="preserve">
    <value>Bad character input: '{0}'</value>
  </data>
  <data name="ERR_BadDocumentationMode" xml:space="preserve">
    <value>Provided documentation mode is unsupported or invalid: '{0}'</value>
    <comment>0 is documentation mode</comment>
  </data>
  <data name="ERR_BinaryNumericLiteralNotSupportedInVersion" xml:space="preserve">
    <value>Binary numeric literals are not supported in this lua version</value>
  </data>
  <data name="ERR_BitwiseOperatorsNotSupportedInVersion" xml:space="preserve">
    <value>Bitwise operators are not supported in this lua version</value>
  </data>
  <data name="ERR_CannotBeAssignedTo" xml:space="preserve">
    <value>This expression cannot be assigned to</value>
  </data>
  <data name="ERR_CCommentsNotSupportedInVersion" xml:space="preserve">
    <value>C comments are not supported in this lua version</value>
  </data>
  <data name="ERR_CloseParenExpected" xml:space="preserve">
    <value>) expected</value>
  </data>
  <data name="ERR_CompoundAssignmentNotSupportedInLuaVersion" xml:space="preserve">
    <value>Compound assignments are not supported in this lua version</value>
  </data>
  <data name="ERR_DoubleOverflow" xml:space="preserve">
    <value>Constant represents a value either too large or too small for a double precision floating-point number</value>
  </data>
  <data name="ERR_EscapeTooLarge" xml:space="preserve">
    <value>Escape is too large, the limit is {0}</value>
    <comment>{0} is the numerical limit</comment>
  </data>
  <data name="ERR_ExpressionExpected" xml:space="preserve">
    <value>Expression expected</value>
  </data>
  <data name="ERR_HashStringsNotSupportedInVersion" xml:space="preserve">
    <value>Hash strings are not supported in this lua version</value>
  </data>
  <data name="ERR_HexDigitExpected" xml:space="preserve">
    <value>Hexadecimal digit expected</value>
  </data>
  <data name="ERR_HexFloatLiteralNotSupportedInVersion" xml:space="preserve">
    <value>Hexadecimal floating point numeric literals are not supported in this lua version</value>
  </data>
  <data name="ERR_HexStringEscapesNotSupportedInVersion" xml:space="preserve">
    <value>Hexadecimal string escapes are not supported in this lua version</value>
  </data>
  <data name="ERR_IdentifierExpected" xml:space="preserve">
    <value>Identifier expected</value>
  </data>
  <data name="ERR_IdentifierExpectedKW" xml:space="preserve">
    <value>Identifier expected; '{1}' is a keyword</value>
    <comment>{1} is the actual value obtained</comment>
  </data>
  <data name="ERR_IfExpressionConditionExpected" xml:space="preserve">
    <value>Condition not found for if expression</value>
  </data>
  <data name="ERR_IfExpressionConditionExpected_Description" xml:space="preserve">
    <value>If expressions require a condition but one was not found, did you perhaps forget to specify one?</value>
  </data>
  <data name="ERR_IfExpressionConditionExpected_Title" xml:space="preserve">
    <value>If expressions require a condition</value>
  </data>
  <data name="ERR_IfExpressionsNotSupportedInLuaVersion" xml:space="preserve">
    <value>If expressions are not supported in this lua version</value>
  </data>
  <data name="ERR_InsufficientStack" xml:space="preserve">
    <value>An expression is too long or complex to compile</value>
  </data>
  <data name="ERR_InvalidExpressionPart" xml:space="preserve">
    <value>Invalid expression part '{0}'</value>
    <comment>{0} is the text of the token found</comment>
  </data>
  <data name="ERR_InvalidNumber" xml:space="preserve">
    <value>Invalid number</value>
  </data>
  <data name="ERR_InvalidStatement" xml:space="preserve">
    <value>Invalid statement</value>
  </data>
  <data name="ERR_InvalidStringEscape" xml:space="preserve">
    <value>Invalid string escape</value>
  </data>
  <data name="ERR_LbraceExpected" xml:space="preserve">
    <value>{ expected</value>
  </data>
  <data name="ERR_Lua51NestingInLongString" xml:space="preserve">
    <value>Nesting of [[...]] is deprecated</value>
  </data>
  <data name="ERR_LuajitIdentifierRulesNotSupportedInVersion" xml:space="preserve">
    <value>Identifiers containing characters with value above 0x7F are not supported in this lua version</value>
  </data>
  <data name="ERR_LuajitSuffixInFloat" xml:space="preserve">
    <value>LuaJIT suffixes cannot be used in floating point numbers</value>
  </data>
  <data name="ERR_MixingNilableAndIntersectionNotAllowed" xml:space="preserve">
    <value>Using nilable types directly in intersections is not allowed</value>
  </data>
  <data name="ERR_MixingNilableAndIntersectionNotAllowed_Description" xml:space="preserve">
    <value>Using nilable types directly in intersections is not allowed. The nilable types must be in parenthesis to be used in intersections</value>
  </data>
  <data name="ERR_MixingNilableAndIntersectionNotAllowed_Title" xml:space="preserve">
    <value>Using nilable types directly in intersections is not allowed</value>
  </data>
  <data name="ERR_MixingUnionsAndIntersectionsNotAllowed" xml:space="preserve">
    <value>Mixing union and intersection types is not allowed</value>
  </data>
  <data name="ERR_MixingUnionsAndIntersectionsNotAllowed_Description" xml:space="preserve">
    <value>Mixing union and intersection types is not allowed. The unions must be inside parenthesis to be used in intersections</value>
  </data>
  <data name="ERR_MixingUnionsAndIntersectionsNotAllowed_Title" xml:space="preserve">
    <value>Mixing union and intersection types is not allowed</value>
  </data>
  <data name="ERR_NonFunctionCallBeingUsedAsStatement" xml:space="preserve">
    <value>Function calls are the only expressions that can be used as statements</value>
  </data>
  <data name="ERR_NormalTypeParametersComeBeforePacks" xml:space="preserve">
    <value>Normal type parameters must come before pack type parameters</value>
  </data>
  <data name="ERR_NumberSuffixNotSupportedInVersion" xml:space="preserve">
    <value>LuaJIT number suffixes are not supported in this lua version</value>
  </data>
  <data name="ERR_NumericLiteralTooLarge" xml:space="preserve">
    <value>Numeric literal is too large</value>
  </data>
  <data name="ERR_OctalNumericLiteralNotSupportedInVersion" xml:space="preserve">
    <value>Octal numeric literals are not supported in this lua version</value>
  </data>
  <data name="ERR_OnlyOneTableTypeIndexerIsAllowed" xml:space="preserve">
    <value>Only one indexer is allowed per table type</value>
  </data>
  <data name="ERR_RbraceExpected" xml:space="preserve">
    <value>} expected</value>
  </data>
  <data name="ERR_SemicolonExpected" xml:space="preserve">
    <value>; expected</value>
  </data>
  <data name="ERR_ShebangNotSupportedInLuaVersion" xml:space="preserve">
    <value>Shebangs are not supported in this lua version</value>
  </data>
  <data name="ERR_SyntaxError" xml:space="preserve">
    <value>Syntax error, '{0}' expected</value>
    <comment>{0} is the expected value</comment>
  </data>
  <data name="ERR_TypedLuaNotSupportedInLuaVersion" xml:space="preserve">
    <value>Typed lua is not supported in this lua version</value>
  </data>
  <data name="ERR_UnderscoreInNumericLiteralNotSupportedInVersion" xml:space="preserve">
    <value>Underscores in numeric literals are not supported in this lua version</value>
  </data>
  <data name="ERR_UnescapedLineBreakInString" xml:space="preserve">
    <value>Unescaped line break in string</value>
  </data>
  <data name="ERR_UnexpectedToken" xml:space="preserve">
    <value>Unexpected token '{0}'</value>
    <comment>{0} is the actual kind</comment>
  </data>
  <data name="ERR_UnfinishedLongComment" xml:space="preserve">
    <value>Unfinished multi-line comment</value>
  </data>
  <data name="ERR_UnfinishedString" xml:space="preserve">
    <value>Unfinished string</value>
  </data>
  <data name="ERR_UnicodeEscapeMissingCloseBrace" xml:space="preserve">
    <value>Unicode escape must have a closing brace ('}') after the hexadecimal number</value>
  </data>
  <data name="ERR_UnicodeEscapeMissingOpenBrace" xml:space="preserve">
    <value>Unicode escape must have an opening brace ('{') after '\u'</value>
  </data>
  <data name="ERR_UnicodeEscapesNotSupportedLuaInVersion" xml:space="preserve">
    <value>Unicode escapes are not supported in this lua version</value>
  </data>
  <data name="ERR_WhitespaceEscapeNotSupportedInVersion" xml:space="preserve">
    <value>The whitespace escape ('\z') is not supported in this lua version</value>
  </data>
  <data name="ThisMethodCanOnlyBeUsedToCreateTokens" xml:space="preserve">
    <value>This method can only be used to create tokens - {0} is not a token kind.</value>
    <comment>{0} is the token kind</comment>
  </data>
  <data name="UseIdentifierToCreateIdentifiers" xml:space="preserve">
    <value>Use Loretta.CodeAnalysis.Lua.SyntaxFactory.Identifier to create identifier tokens.</value>
  </data>
  <data name="UseLiteralForNumeric" xml:space="preserve">
    <value>Use Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal to create numeric literal tokens.</value>
  </data>
  <data name="WRN_LineBreakMayAffectErrorReporting" xml:space="preserve">
    <value>This line break (\n\r) may affect error reporting between the editor and lua</value>
  </data>
  <data name="WRN_LineBreakMayAffectErrorReporting_Description" xml:space="preserve">
    <value>Lua considers '\n\r' a single line break so error reporting between the editor and Lua may differ; use \n, \r or \r\n instead</value>
  </data>
  <data name="WRN_LineBreakMayAffectErrorReporting_Title" xml:space="preserve">
    <value>Line break may affect error reporting</value>
  </data>
</root>