Loretta.CodeAnalysis.Lua.BacktickStringType
Loretta.CodeAnalysis.Lua.BacktickStringType.HashLiteral = 1 -> Loretta.CodeAnalysis.Lua.BacktickStringType
Loretta.CodeAnalysis.Lua.BacktickStringType.InterpolatedStringLiteral = 2 -> Loretta.CodeAnalysis.Lua.BacktickStringType
Loretta.CodeAnalysis.Lua.BacktickStringType.None = 0 -> Loretta.CodeAnalysis.Lua.BacktickStringType
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.BacktickStringType.get -> Loretta.CodeAnalysis.Lua.BacktickStringType
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, Loretta.CodeAnalysis.Lua.IntegerFormats binaryIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats octalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats decimalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes, bool acceptNestingOfLongStrings, Loretta.CodeAnalysis.Lua.BacktickStringType backtickStringType) -> void
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> binaryIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> octalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> decimalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> hexIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<bool> acceptTypedLua = default(Tsu.Option<bool>), Tsu.Option<bool> acceptFloorDivision = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLuaJITNumberSuffixes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptNestingOfLongStrings = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.BacktickStringType> backtickStringType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.BacktickStringType>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.AddContents(params Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax![]! items) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.Contents.get -> Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!>
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.StringEndToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.StringStartToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.Update(Loretta.CodeAnalysis.SyntaxToken stringStartToken, Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!> contents, Loretta.CodeAnalysis.SyntaxToken stringEndToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.WithContents(Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!> contents) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.WithStringEndToken(Loretta.CodeAnalysis.SyntaxToken stringEndToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.WithStringStartToken(Loretta.CodeAnalysis.SyntaxToken stringStartToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax.TextToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax.Update(Loretta.CodeAnalysis.SyntaxToken textToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax.WithTextToken(Loretta.CodeAnalysis.SyntaxToken textToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.CloseBraceToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.Expression.get -> Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.OpenBraceToken.get -> Loretta.CodeAnalysis.SyntaxToken
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.Update(Loretta.CodeAnalysis.SyntaxToken openBraceToken, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! expression, Loretta.CodeAnalysis.SyntaxToken closeBraceToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.WithCloseBraceToken(Loretta.CodeAnalysis.SyntaxToken closeBraceToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.WithExpression(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! expression) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.WithOpenBraceToken(Loretta.CodeAnalysis.SyntaxToken openBraceToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
Loretta.CodeAnalysis.Lua.SyntaxKind.BacktickToken = 57 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.InterpolatedStringExpression = 2115 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.InterpolatedStringText = 2113 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.InterpolatedStringTextToken = 1006 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.InterpolatedStringToken = 1005 -> Loretta.CodeAnalysis.Lua.SyntaxKind
Loretta.CodeAnalysis.Lua.SyntaxKind.Interpolation = 2114 -> Loretta.CodeAnalysis.Lua.SyntaxKind
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitInterpolatedStringExpression(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitInterpolatedStringText(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitInterpolation(Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax! node) -> Loretta.CodeAnalysis.SyntaxNode?
override Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
override Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
override Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor! visitor) -> void
override Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax.Accept<TResult>(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>! visitor) -> TResult?
static Loretta.CodeAnalysis.Lua.SyntaxFactory.InterpolatedStringExpression(Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!> contents = default(Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!>)) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.InterpolatedStringExpression(Loretta.CodeAnalysis.SyntaxToken stringStartToken, Loretta.CodeAnalysis.SyntaxList<Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringContentSyntax!> contents, Loretta.CodeAnalysis.SyntaxToken stringEndToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.InterpolatedStringText() -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.InterpolatedStringText(Loretta.CodeAnalysis.SyntaxToken textToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.Interpolation(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! expression) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.Interpolation(Loretta.CodeAnalysis.SyntaxToken openBraceToken, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! expression, Loretta.CodeAnalysis.SyntaxToken closeBraceToken) -> Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFacts.HasKeywordBeenDisabled(Loretta.CodeAnalysis.Lua.SyntaxKind kind, Loretta.CodeAnalysis.Lua.LuaSyntaxOptions! syntaxOptions) -> bool
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitInterpolatedStringExpression(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitInterpolatedStringText(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitInterpolation(Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax! node) -> void
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitInterpolatedStringExpression(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringExpressionSyntax! node) -> TResult?
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitInterpolatedStringText(Loretta.CodeAnalysis.Lua.Syntax.InterpolatedStringTextSyntax! node) -> TResult?
virtual Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor<TResult>.VisitInterpolation(Loretta.CodeAnalysis.Lua.Syntax.InterpolationSyntax! node) -> TResult?
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, Loretta.CodeAnalysis.Lua.IntegerFormats binaryIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats octalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats decimalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes, bool acceptNestingOfLongStrings) -> void
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> binaryIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> octalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> decimalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> hexIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<bool> acceptTypedLua = default(Tsu.Option<bool>), Tsu.Option<bool> acceptFloorDivision = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLuaJITNumberSuffixes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptNestingOfLongStrings = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!