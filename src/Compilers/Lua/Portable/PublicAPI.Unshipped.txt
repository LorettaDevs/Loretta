#nullable enable
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptNestingOfLongStrings.get -> bool
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, Loretta.CodeAnalysis.Lua.IntegerFormats binaryIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats octalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats decimalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes, bool acceptNestingOfLongStrings) -> void
Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> binaryIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> octalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> decimalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> hexIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<bool> acceptTypedLua = default(Tsu.Option<bool>), Tsu.Option<bool> acceptFloorDivision = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLuaJITNumberSuffixes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptNestingOfLongStrings = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.AnonymousFunctionExpression(Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax! parameters, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.CompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! statements) -> Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.DoStatement(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseClause(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! elseBody) -> Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax! name, Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax! parameters, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.IfStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! condition, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalDeclarationName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifierName, Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax? attribute) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalDeclarationName(string! name, Loretta.CodeAnalysis.Lua.Syntax.VariableAttributeSyntax? attribute) -> Loretta.CodeAnalysis.Lua.Syntax.LocalDeclarationNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! name, Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax! parameters, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken localKeyword, Loretta.CodeAnalysis.SyntaxToken functionKeyword, Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! name, Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax! parameters, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body, Loretta.CodeAnalysis.SyntaxToken endKeyword, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(string! name, Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax! parameters, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax! baseName, string! name) -> Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifier, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax? stepValue, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax! identifier, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.SyntaxToken forKeyword, Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! identifier, Loretta.CodeAnalysis.SyntaxToken equalsToken, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.SyntaxToken finalValueCommaToken, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue, Loretta.CodeAnalysis.SyntaxToken stepValueCommaToken, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax? stepValue, Loretta.CodeAnalysis.SyntaxToken doKeyword, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body, Loretta.CodeAnalysis.SyntaxToken endKeyword, Loretta.CodeAnalysis.SyntaxToken semicolonToken) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(string! identifier, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax? stepValue, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(string! identifier, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue, Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax! body) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.AnonymousFunctionExpression() -> Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.CompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax? statements = null) -> Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.DoStatement(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax? body = null) -> Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseClause(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax? elseBody = null) -> Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! condition) -> Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax! name) -> Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.GenericForStatement(Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax!> identifiers, Loretta.CodeAnalysis.SeparatedSyntaxList<Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax!> expressions) -> Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.IfStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! condition) -> Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax! name) -> Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(string! name) -> Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.TypedIdentifierNameSyntax! identifier, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! initialValue, Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! finalValue) -> Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.RepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! condition) -> Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax!
*REMOVED*static Loretta.CodeAnalysis.Lua.SyntaxFactory.WhileStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax! condition) -> Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax!
*REMOVED*Loretta.CodeAnalysis.Lua.SyntaxKind.StartEqualsToken = 26 -> Loretta.CodeAnalysis.Lua.SyntaxKind
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaSyntaxOptions(bool acceptBinaryNumbers, bool acceptCCommentSyntax, bool acceptCompoundAssignment, bool acceptEmptyStatements, bool acceptCBooleanOperators, bool acceptGoto, bool acceptHexEscapesInStrings, bool acceptHexFloatLiterals, bool acceptOctalNumbers, bool acceptShebang, bool acceptUnderscoreInNumberLiterals, bool useLuaJitIdentifierRules, bool acceptBitwiseOperators, bool acceptWhitespaceEscape, bool acceptUnicodeEscape, Loretta.CodeAnalysis.Lua.ContinueType continueType, bool acceptIfExpression, bool acceptHashStrings, bool acceptInvalidEscapes, bool acceptLocalVariableAttributes, Loretta.CodeAnalysis.Lua.IntegerFormats binaryIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats octalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats decimalIntegerFormat, Loretta.CodeAnalysis.Lua.IntegerFormats hexIntegerFormat, bool acceptTypedLua, bool acceptFloorDivision, bool acceptLuaJITNumberSuffixes) -> void
*REMOVED*Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option<bool> acceptBinaryNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCCommentSyntax = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCompoundAssignment = default(Tsu.Option<bool>), Tsu.Option<bool> acceptEmptyStatements = default(Tsu.Option<bool>), Tsu.Option<bool> acceptCBooleanOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptGoto = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexEscapesInStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHexFloatLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> acceptOctalNumbers = default(Tsu.Option<bool>), Tsu.Option<bool> acceptShebang = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnderscoreInNumberLiterals = default(Tsu.Option<bool>), Tsu.Option<bool> useLuaJitIdentifierRules = default(Tsu.Option<bool>), Tsu.Option<bool> acceptBitwiseOperators = default(Tsu.Option<bool>), Tsu.Option<bool> acceptWhitespaceEscape = default(Tsu.Option<bool>), Tsu.Option<bool> acceptUnicodeEscape = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType> continueType = default(Tsu.Option<Loretta.CodeAnalysis.Lua.ContinueType>), Tsu.Option<bool> acceptIfExpression = default(Tsu.Option<bool>), Tsu.Option<bool> acceptHashStrings = default(Tsu.Option<bool>), Tsu.Option<bool> acceptInvalidEscapes = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLocalVariableAttributes = default(Tsu.Option<bool>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> binaryIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> octalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> decimalIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats> hexIntegerFormat = default(Tsu.Option<Loretta.CodeAnalysis.Lua.IntegerFormats>), Tsu.Option<bool> acceptTypedLua = default(Tsu.Option<bool>), Tsu.Option<bool> acceptFloorDivision = default(Tsu.Option<bool>), Tsu.Option<bool> acceptLuaJITNumberSuffixes = default(Tsu.Option<bool>)) -> Loretta.CodeAnalysis.Lua.LuaSyntaxOptions!
